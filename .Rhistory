}
if(df.best_match[pat.i,"HAP2"] == T){
df.criteria_reproducibility_md[row,"HAP2.T"] = df.criteria_reproducibility_md[row,"HAP2.T"] + 1
df.criteria_reproducibility_os[row2,"HAP2.T"] = df.criteria_reproducibility_os[row2,"HAP2.T"] + 1
if(df.criteria_results[pat.j,"HAP2"] == F){
df.criteria_reproducibility_md[row,"HAP2"] = df.criteria_reproducibility_md[row,"HAP2"] + 1
df.criteria_reproducibility_os[row2,"HAP2"] = df.criteria_reproducibility_os[row2,"HAP2"] + 1
}
}
if(df.best_match[pat.i,"UKGTS"] == T){
df.criteria_reproducibility_md[row,"UKGTS.T"] = df.criteria_reproducibility_md[row,"UKGTS.T"] + 1
df.criteria_reproducibility_os[row2,"UKGTS.T"] = df.criteria_reproducibility_os[row2,"UKGTS.T"] + 1
if(df.criteria_results[pat.j,"UKGTS"] == F){
df.criteria_reproducibility_md[row,"UKGTS"] = df.criteria_reproducibility_md[row,"UKGTS"] + 1
df.criteria_reproducibility_os[row2,"UKGTS"] = df.criteria_reproducibility_os[row2,"UKGTS"] + 1
}
}
if(df.best_match[pat.i,"GHT"] == T){
df.criteria_reproducibility_md[row,"GHT.T"] = df.criteria_reproducibility_md[row,"GHT.T"] + 1
df.criteria_reproducibility_os[row2,"GHT.T"] = df.criteria_reproducibility_os[row2,"GHT.T"] + 1
if(df.criteria_results[pat.j,"GHT"] == F){
df.criteria_reproducibility_md[row,"GHT"] = df.criteria_reproducibility_md[row,"GHT"] + 1
df.criteria_reproducibility_os[row2,"GHT"] = df.criteria_reproducibility_os[row2,"GHT"] + 1
}
}
if(df.best_match[pat.i,"FOST"] == T){
df.criteria_reproducibility_md[row,"FOST.T"] = df.criteria_reproducibility_md[row,"FOST.T"] + 1
df.criteria_reproducibility_os[row2,"FOST.T"] = df.criteria_reproducibility_os[row2,"FOST.T"] + 1
if(df.criteria_results[pat.j,"FOST"] == F){
df.criteria_reproducibility_md[row,"FOST"] = df.criteria_reproducibility_md[row,"FOST"] + 1
df.criteria_reproducibility_os[row2,"FOST"] = df.criteria_reproducibility_os[row2,"FOST"] + 1
}
}
if(df.best_match[pat.i,"LOGTS"] == T){
df.criteria_reproducibility_md[row,"LOGTS.T"] = df.criteria_reproducibility_md[row,"LOGTS.T"] + 1
df.criteria_reproducibility_os[row2,"LOGTS.T"] = df.criteria_reproducibility_os[row2,"LOGTS.T"] + 1
if(df.criteria_results[pat.j,"LOGTS"] == F){
df.criteria_reproducibility_md[row,"LOGTS"] = df.criteria_reproducibility_md[row,"LOGTS"] + 1
df.criteria_reproducibility_os[row2,"LOGTS"] = df.criteria_reproducibility_os[row2,"LOGTS"] + 1
}
}
if((df.best_match[pat.i,"HAP2"] == T) || (df.best_match[pat.i,"UKGTS"] == T) || (df.best_match[pat.i,"GHT"] == T) || (df.best_match[pat.i,"FOST"] == T) || (df.best_match[pat.i,"LOGTS"] == T)){
print(date2-date1)
followup_times = c(followup_times, date2-date1)
}
#if(df.best_match[pat.i,"GHT"] == T){
#  df.criteria_reproducibility_md[row,"GHT.T"] = df.criteria_reproducibility_md[row,"GHT.T"] + 1
#  df.criteria_reproducibility_os[row2,"GHT.T"] = df.criteria_reproducibility_os[row2,"GHT.T"] + 1
#
#  if(df.criteria_results[pat.j,"GHT"] == F){
#    df.criteria_reproducibility_md[row,"GHT"] = df.criteria_reproducibility_md[row,"GHT"] + 1
#    df.criteria_reproducibility_os[row2,"GHT"] = df.criteria_reproducibility_os[row2,"GHT"] + 1
#  }
#}
#
#if(df.best_match[pat.i,"GHT"] == T){
#  df.criteria_reproducibility_md[row,"GHT.T"] = df.criteria_reproducibility_md[row,"GHT.T"] + 1
#  df.criteria_reproducibility_os[row2,"GHT.T"] = df.criteria_reproducibility_os[row2,"GHT.T"] + 1
#
#  if(df.criteria_results[pat.j,"GHT"] == F){
#    df.criteria_reproducibility_md[row,"GHT"] = df.criteria_reproducibility_md[row,"GHT"] + 1
#    df.criteria_reproducibility_os[row2,"GHT"] = df.criteria_reproducibility_os[row2,"GHT"] + 1
#  }
#}
break
}
}
}
assign("df.criteria_reproducibility_md", df.criteria_reproducibility_md, envir = .GlobalEnv)
assign("df.criteria_reproducibility_os", df.criteria_reproducibility_os, envir = .GlobalEnv)
print(df.criteria_reproducibility_md)
print(df.criteria_reproducibility_os)
print(followup_times)
}
checkCriteriaReproducibility()
#import libraries
library("tidyverse")
library("dplyr")
library("ggplot2")
library("readxl")
library("devtools")
library("roxygen2")
library("cowplot")
library("readxl")
library("venneuler")
library("UpSetR")
library("reshape2")
library("scales")
library("spatstat.utils")
library("binom")
library("gridGraphics")
#' Reproducibility
#'
#' Assigns OCT score to patient based on RNFLT, MRW, and GCLT
#' @param df.results formatted results to be used
#' @return none
#' @export
checkCriteriaReproducibility = function()
{
names_col = c("HAP2", "HAP2.T", "UKGTS", "UKGTS.T", "GHT", "GHT.T", "FOST", "FOST.T",
"LOGTS", "LOGTS.T", "EAGLE", "EAGLE.T", "AGIS", "AGIS.T")
names_row = c(">10%", "2-10%", "0.5-2%", "<0.5%")
df.criteria_reproducibility_md = data.frame(matrix(0, nrow=length(names_row), ncol=length(names_col)))
colnames(df.criteria_reproducibility_md) = names_col
rownames(df.criteria_reproducibility_md) = names_row
df.criteria_reproducibility_md = data.frame("MD"=rownames(df.criteria_reproducibility_md), df.criteria_reproducibility_md)
names_row = c("0", "1-3", "4-5", "6")
df.criteria_reproducibility_os = data.frame(matrix(0, nrow=length(names_row), ncol=length(names_col)))
colnames(df.criteria_reproducibility_os) = names_col
rownames(df.criteria_reproducibility_os) = names_row
df.criteria_reproducibility_os = data.frame("OCT.Score"=rownames(df.criteria_reproducibility_os), df.criteria_reproducibility_os)
followup_times = vector()
for(pat.i in 1:nrow(df.best_match)){
row = row2 = ""
id = df.best_match[pat.i,"Patient.ID"]
eye = df.best_match[pat.i,"Eye.Vf"]
date1 = df.best_match[pat.i,"Date.Vf"]
#print(pat.i)
for(pat.j in which(as.integer(df.criteria_results[,"Patient.ID"]) == id)){
date2 = as.Date.POSIXct(as.double(df.criteria_results[pat.j,"Date.Time"]))
eye2 = df.criteria_results[pat.j,"Eye"]
#print(pat.j)
if((date2 > date1) && (eye2 == eye)){
md = df.best_match[pat.i,"MD.pval"]
if(is.na(md)){
row = ">10%"
}
else if(md == 0.005){
row = "<0.5%"
}
else if(md == 0.01){
row = "0.5-2%"
}
else if(md == 0.02){
row = "0.5-2%"
}
else if(md == 0.05){
row = "2-10%"
}
else if(md == 0.1){
row = "2-10%"
}
else
print("catch")
os = df.best_match[pat.i,"OCT.Score"]
if(os == 0){
row2 = "0"
}
else if(inside.range(os, c(1,3))){
row2 = "1-3"
}
else if(inside.range(os, c(4,5))){
row2 = "4-5"
}
else if(os == 6){
row2 = "6"
}
if(df.best_match[pat.i,"HAP2"] == T){
df.criteria_reproducibility_md[row,"HAP2.T"] = df.criteria_reproducibility_md[row,"HAP2.T"] + 1
df.criteria_reproducibility_os[row2,"HAP2.T"] = df.criteria_reproducibility_os[row2,"HAP2.T"] + 1
if(df.criteria_results[pat.j,"HAP2"] == F){
df.criteria_reproducibility_md[row,"HAP2"] = df.criteria_reproducibility_md[row,"HAP2"] + 1
df.criteria_reproducibility_os[row2,"HAP2"] = df.criteria_reproducibility_os[row2,"HAP2"] + 1
}
}
if(df.best_match[pat.i,"UKGTS"] == T){
df.criteria_reproducibility_md[row,"UKGTS.T"] = df.criteria_reproducibility_md[row,"UKGTS.T"] + 1
df.criteria_reproducibility_os[row2,"UKGTS.T"] = df.criteria_reproducibility_os[row2,"UKGTS.T"] + 1
if(df.criteria_results[pat.j,"UKGTS"] == F){
df.criteria_reproducibility_md[row,"UKGTS"] = df.criteria_reproducibility_md[row,"UKGTS"] + 1
df.criteria_reproducibility_os[row2,"UKGTS"] = df.criteria_reproducibility_os[row2,"UKGTS"] + 1
}
}
if(df.best_match[pat.i,"GHT"] == T){
df.criteria_reproducibility_md[row,"GHT.T"] = df.criteria_reproducibility_md[row,"GHT.T"] + 1
df.criteria_reproducibility_os[row2,"GHT.T"] = df.criteria_reproducibility_os[row2,"GHT.T"] + 1
if(df.criteria_results[pat.j,"GHT"] == F){
df.criteria_reproducibility_md[row,"GHT"] = df.criteria_reproducibility_md[row,"GHT"] + 1
df.criteria_reproducibility_os[row2,"GHT"] = df.criteria_reproducibility_os[row2,"GHT"] + 1
}
}
if(df.best_match[pat.i,"FOST"] == T){
df.criteria_reproducibility_md[row,"FOST.T"] = df.criteria_reproducibility_md[row,"FOST.T"] + 1
df.criteria_reproducibility_os[row2,"FOST.T"] = df.criteria_reproducibility_os[row2,"FOST.T"] + 1
if(df.criteria_results[pat.j,"FOST"] == F){
df.criteria_reproducibility_md[row,"FOST"] = df.criteria_reproducibility_md[row,"FOST"] + 1
df.criteria_reproducibility_os[row2,"FOST"] = df.criteria_reproducibility_os[row2,"FOST"] + 1
}
}
if(df.best_match[pat.i,"LOGTS"] == T){
df.criteria_reproducibility_md[row,"LOGTS.T"] = df.criteria_reproducibility_md[row,"LOGTS.T"] + 1
df.criteria_reproducibility_os[row2,"LOGTS.T"] = df.criteria_reproducibility_os[row2,"LOGTS.T"] + 1
if(df.criteria_results[pat.j,"LOGTS"] == F){
df.criteria_reproducibility_md[row,"LOGTS"] = df.criteria_reproducibility_md[row,"LOGTS"] + 1
df.criteria_reproducibility_os[row2,"LOGTS"] = df.criteria_reproducibility_os[row2,"LOGTS"] + 1
}
}
if((df.best_match[pat.i,"HAP2"] == T) || (df.best_match[pat.i,"UKGTS"] == T) || (df.best_match[pat.i,"GHT"] == T) || (df.best_match[pat.i,"FOST"] == T) || (df.best_match[pat.i,"LOGTS"] == T)){
print(date2-date1)
followup_times = c(followup_times, date2-date1)
}
#if(df.best_match[pat.i,"GHT"] == T){
#  df.criteria_reproducibility_md[row,"GHT.T"] = df.criteria_reproducibility_md[row,"GHT.T"] + 1
#  df.criteria_reproducibility_os[row2,"GHT.T"] = df.criteria_reproducibility_os[row2,"GHT.T"] + 1
#
#  if(df.criteria_results[pat.j,"GHT"] == F){
#    df.criteria_reproducibility_md[row,"GHT"] = df.criteria_reproducibility_md[row,"GHT"] + 1
#    df.criteria_reproducibility_os[row2,"GHT"] = df.criteria_reproducibility_os[row2,"GHT"] + 1
#  }
#}
#
#if(df.best_match[pat.i,"GHT"] == T){
#  df.criteria_reproducibility_md[row,"GHT.T"] = df.criteria_reproducibility_md[row,"GHT.T"] + 1
#  df.criteria_reproducibility_os[row2,"GHT.T"] = df.criteria_reproducibility_os[row2,"GHT.T"] + 1
#
#  if(df.criteria_results[pat.j,"GHT"] == F){
#    df.criteria_reproducibility_md[row,"GHT"] = df.criteria_reproducibility_md[row,"GHT"] + 1
#    df.criteria_reproducibility_os[row2,"GHT"] = df.criteria_reproducibility_os[row2,"GHT"] + 1
#  }
#}
break
}
}
}
assign("df.criteria_reproducibility_md", df.criteria_reproducibility_md, envir = .GlobalEnv)
assign("df.criteria_reproducibility_os", df.criteria_reproducibility_os, envir = .GlobalEnv)
print(df.criteria_reproducibility_md)
print(df.criteria_reproducibility_os)
print(followup_times)
}
checkCriteriaReproducibility()
#' Reproducibility
#'
#' Assigns OCT score to patient based on RNFLT, MRW, and GCLT
#' @param df.results formatted results to be used
#' @return none
#' @export
checkCriteriaReproducibility = function()
{
names_col = c("HAP2", "HAP2.T", "UKGTS", "UKGTS.T", "GHT", "GHT.T", "FOST", "FOST.T",
"LOGTS", "LOGTS.T", "EAGLE", "EAGLE.T", "AGIS", "AGIS.T")
names_row = c(">10%", "2-10%", "0.5-2%", "<0.5%")
df.criteria_reproducibility_md = data.frame(matrix(0, nrow=length(names_row), ncol=length(names_col)))
colnames(df.criteria_reproducibility_md) = names_col
rownames(df.criteria_reproducibility_md) = names_row
df.criteria_reproducibility_md = data.frame("MD"=rownames(df.criteria_reproducibility_md), df.criteria_reproducibility_md)
names_row = c("0", "1-3", "4-5", "6")
df.criteria_reproducibility_os = data.frame(matrix(0, nrow=length(names_row), ncol=length(names_col)))
colnames(df.criteria_reproducibility_os) = names_col
rownames(df.criteria_reproducibility_os) = names_row
df.criteria_reproducibility_os = data.frame("OCT.Score"=rownames(df.criteria_reproducibility_os), df.criteria_reproducibility_os)
followup_times = vector()
for(pat.i in 1:nrow(df.best_match)){
row = row2 = ""
id = df.best_match[pat.i,"Patient.ID"]
eye = df.best_match[pat.i,"Eye.Vf"]
date1 = df.best_match[pat.i,"Date.Vf"]
#print(pat.i)
for(pat.j in which(as.integer(df.criteria_results[,"Patient.ID"]) == id)){
date2 = as.Date.POSIXct(as.double(df.criteria_results[pat.j,"Date.Time"]))
eye2 = df.criteria_results[pat.j,"Eye"]
#print(pat.j)
if((date2 > date1) && (eye2 == eye)){
md = df.best_match[pat.i,"MD.pval"]
if(is.na(md)){
row = ">10%"
}
else if(md == 0.005){
row = "<0.5%"
}
else if(md == 0.01){
row = "0.5-2%"
}
else if(md == 0.02){
row = "0.5-2%"
}
else if(md == 0.05){
row = "2-10%"
}
else if(md == 0.1){
row = "2-10%"
}
else
print("catch")
os = df.best_match[pat.i,"OCT.Score"]
if(os == 0){
row2 = "0"
}
else if(inside.range(os, c(1,3))){
row2 = "1-3"
}
else if(inside.range(os, c(4,5))){
row2 = "4-5"
}
else if(os == 6){
row2 = "6"
}
if(df.best_match[pat.i,"HAP2"] == T){
df.criteria_reproducibility_md[row,"HAP2.T"] = df.criteria_reproducibility_md[row,"HAP2.T"] + 1
df.criteria_reproducibility_os[row2,"HAP2.T"] = df.criteria_reproducibility_os[row2,"HAP2.T"] + 1
if(df.criteria_results[pat.j,"HAP2"] == F){
df.criteria_reproducibility_md[row,"HAP2"] = df.criteria_reproducibility_md[row,"HAP2"] + 1
df.criteria_reproducibility_os[row2,"HAP2"] = df.criteria_reproducibility_os[row2,"HAP2"] + 1
}
}
if(df.best_match[pat.i,"UKGTS"] == T){
df.criteria_reproducibility_md[row,"UKGTS.T"] = df.criteria_reproducibility_md[row,"UKGTS.T"] + 1
df.criteria_reproducibility_os[row2,"UKGTS.T"] = df.criteria_reproducibility_os[row2,"UKGTS.T"] + 1
if(df.criteria_results[pat.j,"UKGTS"] == F){
df.criteria_reproducibility_md[row,"UKGTS"] = df.criteria_reproducibility_md[row,"UKGTS"] + 1
df.criteria_reproducibility_os[row2,"UKGTS"] = df.criteria_reproducibility_os[row2,"UKGTS"] + 1
}
}
if(df.best_match[pat.i,"GHT"] == T){
df.criteria_reproducibility_md[row,"GHT.T"] = df.criteria_reproducibility_md[row,"GHT.T"] + 1
df.criteria_reproducibility_os[row2,"GHT.T"] = df.criteria_reproducibility_os[row2,"GHT.T"] + 1
if(df.criteria_results[pat.j,"GHT"] == F){
df.criteria_reproducibility_md[row,"GHT"] = df.criteria_reproducibility_md[row,"GHT"] + 1
df.criteria_reproducibility_os[row2,"GHT"] = df.criteria_reproducibility_os[row2,"GHT"] + 1
}
}
if(df.best_match[pat.i,"FOST"] == T){
df.criteria_reproducibility_md[row,"FOST.T"] = df.criteria_reproducibility_md[row,"FOST.T"] + 1
df.criteria_reproducibility_os[row2,"FOST.T"] = df.criteria_reproducibility_os[row2,"FOST.T"] + 1
if(df.criteria_results[pat.j,"FOST"] == F){
df.criteria_reproducibility_md[row,"FOST"] = df.criteria_reproducibility_md[row,"FOST"] + 1
df.criteria_reproducibility_os[row2,"FOST"] = df.criteria_reproducibility_os[row2,"FOST"] + 1
}
}
if(df.best_match[pat.i,"LOGTS"] == T){
df.criteria_reproducibility_md[row,"LOGTS.T"] = df.criteria_reproducibility_md[row,"LOGTS.T"] + 1
df.criteria_reproducibility_os[row2,"LOGTS.T"] = df.criteria_reproducibility_os[row2,"LOGTS.T"] + 1
if(df.criteria_results[pat.j,"LOGTS"] == F){
df.criteria_reproducibility_md[row,"LOGTS"] = df.criteria_reproducibility_md[row,"LOGTS"] + 1
df.criteria_reproducibility_os[row2,"LOGTS"] = df.criteria_reproducibility_os[row2,"LOGTS"] + 1
}
}
if((df.best_match[pat.i,"HAP2"] == T) || (df.best_match[pat.i,"UKGTS"] == T) || (df.best_match[pat.i,"GHT"] == T) || (df.best_match[pat.i,"FOST"] == T) || (df.best_match[pat.i,"LOGTS"] == T)){
print(date2-date1)
followup_times = c(followup_times, date2-date1)
}
#if(df.best_match[pat.i,"GHT"] == T){
#  df.criteria_reproducibility_md[row,"GHT.T"] = df.criteria_reproducibility_md[row,"GHT.T"] + 1
#  df.criteria_reproducibility_os[row2,"GHT.T"] = df.criteria_reproducibility_os[row2,"GHT.T"] + 1
#
#  if(df.criteria_results[pat.j,"GHT"] == F){
#    df.criteria_reproducibility_md[row,"GHT"] = df.criteria_reproducibility_md[row,"GHT"] + 1
#    df.criteria_reproducibility_os[row2,"GHT"] = df.criteria_reproducibility_os[row2,"GHT"] + 1
#  }
#}
#
#if(df.best_match[pat.i,"GHT"] == T){
#  df.criteria_reproducibility_md[row,"GHT.T"] = df.criteria_reproducibility_md[row,"GHT.T"] + 1
#  df.criteria_reproducibility_os[row2,"GHT.T"] = df.criteria_reproducibility_os[row2,"GHT.T"] + 1
#
#  if(df.criteria_results[pat.j,"GHT"] == F){
#    df.criteria_reproducibility_md[row,"GHT"] = df.criteria_reproducibility_md[row,"GHT"] + 1
#    df.criteria_reproducibility_os[row2,"GHT"] = df.criteria_reproducibility_os[row2,"GHT"] + 1
#  }
#}
break
}
}
}
assign("df.criteria_reproducibility_md", df.criteria_reproducibility_md, envir = .GlobalEnv)
assign("df.criteria_reproducibility_os", df.criteria_reproducibility_os, envir = .GlobalEnv)
assign("followup_times", followup_times, envir = .GlobalEnv)
print(df.criteria_reproducibility_md)
print(df.criteria_reproducibility_os)
}
checkCriteriaReproducibility()
#' Reproducibility
#'
#' Assigns OCT score to patient based on RNFLT, MRW, and GCLT
#' @param df.results formatted results to be used
#' @return none
#' @export
checkCriteriaReproducibility = function()
{
names_col = c("HAP2", "HAP2.T", "UKGTS", "UKGTS.T", "GHT", "GHT.T", "FOST", "FOST.T",
"LOGTS", "LOGTS.T", "EAGLE", "EAGLE.T", "AGIS", "AGIS.T")
names_row = c(">10%", "2-10%", "0.5-2%", "<0.5%")
df.criteria_reproducibility_md = data.frame(matrix(0, nrow=length(names_row), ncol=length(names_col)))
colnames(df.criteria_reproducibility_md) = names_col
rownames(df.criteria_reproducibility_md) = names_row
df.criteria_reproducibility_md = data.frame("MD"=rownames(df.criteria_reproducibility_md), df.criteria_reproducibility_md)
names_row = c("0", "1-3", "4-5", "6")
df.criteria_reproducibility_os = data.frame(matrix(0, nrow=length(names_row), ncol=length(names_col)))
colnames(df.criteria_reproducibility_os) = names_col
rownames(df.criteria_reproducibility_os) = names_row
df.criteria_reproducibility_os = data.frame("OCT.Score"=rownames(df.criteria_reproducibility_os), df.criteria_reproducibility_os)
followup_times = vector()
for(pat.i in 1:nrow(df.best_match)){
row = row2 = ""
id = df.best_match[pat.i,"Patient.ID"]
eye = df.best_match[pat.i,"Eye.Vf"]
date1 = df.best_match[pat.i,"Date.Vf"]
#print(pat.i)
for(pat.j in which(as.integer(df.criteria_results[,"Patient.ID"]) == id)){
date2 = as.Date.POSIXct(as.double(df.criteria_results[pat.j,"Date.Time"]))
eye2 = df.criteria_results[pat.j,"Eye"]
#print(pat.j)
if((date2 > date1) && (eye2 == eye)){
md = df.best_match[pat.i,"MD.pval"]
if(is.na(md)){
row = ">10%"
}
else if(md == 0.005){
row = "<0.5%"
}
else if(md == 0.01){
row = "0.5-2%"
}
else if(md == 0.02){
row = "0.5-2%"
}
else if(md == 0.05){
row = "2-10%"
}
else if(md == 0.1){
row = "2-10%"
}
else
print("catch")
os = df.best_match[pat.i,"OCT.Score"]
if(os == 0){
row2 = "0"
}
else if(inside.range(os, c(1,3))){
row2 = "1-3"
}
else if(inside.range(os, c(4,5))){
row2 = "4-5"
}
else if(os == 6){
row2 = "6"
}
if(df.best_match[pat.i,"HAP2"] == T){
df.criteria_reproducibility_md[row,"HAP2.T"] = df.criteria_reproducibility_md[row,"HAP2.T"] + 1
df.criteria_reproducibility_os[row2,"HAP2.T"] = df.criteria_reproducibility_os[row2,"HAP2.T"] + 1
if(df.criteria_results[pat.j,"HAP2"] == F){
df.criteria_reproducibility_md[row,"HAP2"] = df.criteria_reproducibility_md[row,"HAP2"] + 1
df.criteria_reproducibility_os[row2,"HAP2"] = df.criteria_reproducibility_os[row2,"HAP2"] + 1
}
}
if(df.best_match[pat.i,"UKGTS"] == T){
df.criteria_reproducibility_md[row,"UKGTS.T"] = df.criteria_reproducibility_md[row,"UKGTS.T"] + 1
df.criteria_reproducibility_os[row2,"UKGTS.T"] = df.criteria_reproducibility_os[row2,"UKGTS.T"] + 1
if(df.criteria_results[pat.j,"UKGTS"] == F){
df.criteria_reproducibility_md[row,"UKGTS"] = df.criteria_reproducibility_md[row,"UKGTS"] + 1
df.criteria_reproducibility_os[row2,"UKGTS"] = df.criteria_reproducibility_os[row2,"UKGTS"] + 1
}
}
if(df.best_match[pat.i,"GHT"] == T){
df.criteria_reproducibility_md[row,"GHT.T"] = df.criteria_reproducibility_md[row,"GHT.T"] + 1
df.criteria_reproducibility_os[row2,"GHT.T"] = df.criteria_reproducibility_os[row2,"GHT.T"] + 1
if(df.criteria_results[pat.j,"GHT"] == F){
df.criteria_reproducibility_md[row,"GHT"] = df.criteria_reproducibility_md[row,"GHT"] + 1
df.criteria_reproducibility_os[row2,"GHT"] = df.criteria_reproducibility_os[row2,"GHT"] + 1
}
}
if(df.best_match[pat.i,"FOST"] == T){
df.criteria_reproducibility_md[row,"FOST.T"] = df.criteria_reproducibility_md[row,"FOST.T"] + 1
df.criteria_reproducibility_os[row2,"FOST.T"] = df.criteria_reproducibility_os[row2,"FOST.T"] + 1
if(df.criteria_results[pat.j,"FOST"] == F){
df.criteria_reproducibility_md[row,"FOST"] = df.criteria_reproducibility_md[row,"FOST"] + 1
df.criteria_reproducibility_os[row2,"FOST"] = df.criteria_reproducibility_os[row2,"FOST"] + 1
}
}
if(df.best_match[pat.i,"LOGTS"] == T){
df.criteria_reproducibility_md[row,"LOGTS.T"] = df.criteria_reproducibility_md[row,"LOGTS.T"] + 1
df.criteria_reproducibility_os[row2,"LOGTS.T"] = df.criteria_reproducibility_os[row2,"LOGTS.T"] + 1
if(df.criteria_results[pat.j,"LOGTS"] == F){
df.criteria_reproducibility_md[row,"LOGTS"] = df.criteria_reproducibility_md[row,"LOGTS"] + 1
df.criteria_reproducibility_os[row2,"LOGTS"] = df.criteria_reproducibility_os[row2,"LOGTS"] + 1
}
}
if((df.best_match[pat.i,"HAP2"] == T) || (df.best_match[pat.i,"UKGTS"] == T) || (df.best_match[pat.i,"GHT"] == T) || (df.best_match[pat.i,"FOST"] == T) || (df.best_match[pat.i,"LOGTS"] == T)){
#print(date2-date1)
followup_times = c(followup_times, date2-date1)
}
#if(df.best_match[pat.i,"GHT"] == T){
#  df.criteria_reproducibility_md[row,"GHT.T"] = df.criteria_reproducibility_md[row,"GHT.T"] + 1
#  df.criteria_reproducibility_os[row2,"GHT.T"] = df.criteria_reproducibility_os[row2,"GHT.T"] + 1
#
#  if(df.criteria_results[pat.j,"GHT"] == F){
#    df.criteria_reproducibility_md[row,"GHT"] = df.criteria_reproducibility_md[row,"GHT"] + 1
#    df.criteria_reproducibility_os[row2,"GHT"] = df.criteria_reproducibility_os[row2,"GHT"] + 1
#  }
#}
#
#if(df.best_match[pat.i,"GHT"] == T){
#  df.criteria_reproducibility_md[row,"GHT.T"] = df.criteria_reproducibility_md[row,"GHT.T"] + 1
#  df.criteria_reproducibility_os[row2,"GHT.T"] = df.criteria_reproducibility_os[row2,"GHT.T"] + 1
#
#  if(df.criteria_results[pat.j,"GHT"] == F){
#    df.criteria_reproducibility_md[row,"GHT"] = df.criteria_reproducibility_md[row,"GHT"] + 1
#    df.criteria_reproducibility_os[row2,"GHT"] = df.criteria_reproducibility_os[row2,"GHT"] + 1
#  }
#}
break
}
}
}
assign("df.criteria_reproducibility_md", df.criteria_reproducibility_md, envir = .GlobalEnv)
assign("df.criteria_reproducibility_os", df.criteria_reproducibility_os, envir = .GlobalEnv)
assign("followup_times", followup_times, envir = .GlobalEnv)
print(df.criteria_reproducibility_md)
print(df.criteria_reproducibility_os)
}
mean(followup_times)
sd(followup_times)
