df.criteria_reproducibility_os = data.frame("OCT.Score"=rownames(df.criteria_reproducibility_os), df.criteria_reproducibility_os)
for(pat.i in 1:nrow(df.best_match)){
ght = fost = mhpa = logts = ukgts = eagle = agis = F
row = row2 = ""
id = df.best_match[pat.i,"Patient.ID"]
date1 = df.best_match[pat.i,"Date.Vf"]
for(pat.j in which(as.integer(df.criteria_results[,"Patient.ID"]) == id)){
date2 = as.Date.POSIXct(as.double(df.criteria_results[pat.j,"Date.Time"]))
if(date2 > date1){
md = df.best_match[pat.i,"MD.pval"]
if(is.na(md)){
row = ">10%"
}
else if(md == 0.005){
row = "<0.5%"
}
else if(md == 0.01){
row = "0.5-2%"
}
else if(md == 0.02){
row = "0.5-2%"
}
else if(md == 0.05){
row = "2-10%"
}
else if(md == 0.1){
row = "2-10%"
}
else
print("catch")
os = df.best_match[pat.i,"OCT.Score"]
if(os == 0){
row2 = "0"
}
else if(inside.range(os, c(1,3))){
row2 = "1-3"
}
else if(inside.range(os, c(4,5))){
row2 = "4-5"
}
else if(os == 6){
row2 = "6"
}
if((ght == F) && (fost == F) && (mhpa == F) && (ukgts == F) && (logts == F) && (eagle == F) && (agis == F)){
if((df.best_match[pat.i,"GHT"] == T) || (df.best_match[pat.i,"FOST"] == T) ||
(df.best_match[pat.i,"MHPA"] == T) || (df.best_match[pat.i,"UKGTS"] == T) ||
(df.best_match[pat.i,"LOGTS"] == T) || (df.best_match[pat.i,"EAGLE"] == T) ||
(df.best_match[pat.i,"AGIS"] == T))
df.criteria_reproducibility_md[row,"Num"] = df.criteria_reproducibility_md[row,"Num"] + 1
df.criteria_reproducibility_os[row2,"Num"] = df.criteria_reproducibility_os[row2,"Num"] + 1
}
if((ght == F) && (df.best_match[pat.i,"GHT"] == T)){
df.criteria_reproducibility_md["Total","GHT"] = df.criteria_reproducibility_md["Total","GHT"] + 1
df.criteria_reproducibility_os["Total","GHT"] = df.criteria_reproducibility_os["Total","GHT"] + 1
if(df.criteria_results[pat.j,"GHT"] == F){
ght = T
df.criteria_reproducibility_md[row,"GHT"] = df.criteria_reproducibility_md[row,"GHT"] + 1
df.criteria_reproducibility_os[row2,"GHT"] = df.criteria_reproducibility_os[row2,"GHT"] + 1
}
}
if((fost == F) && (df.best_match[pat.i,"FOST"] == T)){
df.criteria_reproducibility_md["Total","FOST"] = df.criteria_reproducibility_md["Total","FOST"] + 1
df.criteria_reproducibility_os["Total","FOST"] = df.criteria_reproducibility_os["Total","FOST"] + 1
if(df.criteria_results[pat.j,"FOST"] == F){
fost = T
df.criteria_reproducibility_md[row,"FOST"] = df.criteria_reproducibility_md[row,"FOST"] + 1
df.criteria_reproducibility_os[row2,"FOST"] = df.criteria_reproducibility_os[row2,"FOST"] + 1
}
}
if((mhpa == F) && (df.best_match[pat.i,"MHPA"] == T)){
df.criteria_reproducibility_md["Total","MHPA"] = df.criteria_reproducibility_md["Total","MHPA"] + 1
df.criteria_reproducibility_os["Total","MHPA"] = df.criteria_reproducibility_os["Total","MHPA"] + 1
if(df.criteria_results[pat.j,"MHPA"] == F){
mhpa = T
df.criteria_reproducibility_md[row,"MHPA"] = df.criteria_reproducibility_md[row,"MHPA"] + 1
df.criteria_reproducibility_os[row2,"MHPA"] = df.criteria_reproducibility_os[row2,"MHPA"] + 1
}
}
if((logts == F) && (df.best_match[pat.i,"LOGTS"] == T)){
df.criteria_reproducibility_md["Total","LOGTS"] = df.criteria_reproducibility_md["Total","LOGTS"] + 1
df.criteria_reproducibility_os["Total","LOGTS"] = df.criteria_reproducibility_os["Total","LOGTS"] + 1
if(df.criteria_results[pat.j,"LOGTS"] == F){
logts = T
df.criteria_reproducibility_md[row,"LOGTS"] = df.criteria_reproducibility_md[row,"LOGTS"] + 1
df.criteria_reproducibility_os[row2,"LOGTS"] = df.criteria_reproducibility_os[row2,"LOGTS"] + 1
}
}
if((ukgts == F) && (df.best_match[pat.i,"UKGTS"] == T)){
df.criteria_reproducibility_md["Total","UKGTS"] = df.criteria_reproducibility_md["Total","UKGTS"] + 1
df.criteria_reproducibility_os["Total","UKGTS"] = df.criteria_reproducibility_os["Total","UKGTS"] + 1
if(df.criteria_results[pat.j,"UKGTS"] == F){
ukgts = T
df.criteria_reproducibility_md[row,"UKGTS"] = df.criteria_reproducibility_md[row,"UKGTS"] + 1
df.criteria_reproducibility_os[row2,"UKGTS"] = df.criteria_reproducibility_os[row2,"UKGTS"] + 1
}
}
#if((eagle == F) && (df.best_match[pat.i,"EAGLE"] == T)){
#  df.criteria_reproducibility_md["Total","EAGLE"] = df.criteria_reproducibility_md["Total","EAGLE"] + 1
#  df.criteria_reproducibility_os["Total","EAGLE"] = df.criteria_reproducibility_os["Total","EAGLE"] + 1
#
#  if(df.criteria_results[pat.j,"EAGLE"] == F){
#    eagle = T
#    df.criteria_reproducibility_md[row,"EAGLE"] = df.criteria_reproducibility_md[row,"EAGLE"] + 1
#    df.criteria_reproducibility_os[row2,"EAGLE"] = df.criteria_reproducibility_os[row2,"EAGLE"] + 1
#  }
#}
#
#if((agis == F) && (df.best_match[pat.i,"AGIS"] == T)){
#  df.criteria_reproducibility_md["Total","AGIS"] = df.criteria_reproducibility_md["Total","AGIS"] + 1
#  df.criteria_reproducibility_os["Total","AGIS"] = df.criteria_reproducibility_os["Total","AGIS"] + 1
#
#  if(df.criteria_results[pat.j,"AGIS"] == F){
#    agis = T
#    df.criteria_reproducibility_md[row,"AGIS"] = df.criteria_reproducibility_md[row,"AGIS"] + 1
#    df.criteria_reproducibility_os[row2,"AGIS"] = df.criteria_reproducibility_os[row2,"AGIS"] + 1
#  }
#}
}
}
}
assign("df.criteria_reproducibility_md", df.criteria_reproducibility_md, envir = .GlobalEnv)
assign("df.criteria_reproducibility_os", df.criteria_reproducibility_os, envir = .GlobalEnv)
print(df.criteria_reproducibility_md)
print(df.criteria_reproducibility_os)
}
checkCriteriaReproducibility()
sum(df.criteria_reproducibility_md[,"Num"])
sum(df.criteria_reproducibility_os[,"Num"])
sum(df.criteria_reproducibility_os[1,2:8])
sum(df.criteria_reproducibility_md[1,2:8])
a = c(0,0,0,0)
if(a) a = 2
rm(a)
View(df.best_match)
#' Reproducibility
#'
#' Assigns OCT score to patient based on RNFLT, MRW, and GCLT
#' @param df.results formatted results to be used
#' @return none
#' @export
checkCriteriaReproducibility = function()
{
names_col = c("MHPA", "UKGTS", "GHT","FOST", "LOGTS", "EAGLE", "AGIS", "Num")
names_row = c(">10%", "2-10%", "0.5-2%", "<0.5%", "Total")
df.criteria_reproducibility_md = data.frame(matrix(0, nrow=length(names_row), ncol=length(names_col)))
colnames(df.criteria_reproducibility_md) = names_col
rownames(df.criteria_reproducibility_md) = names_row
df.criteria_reproducibility_md = data.frame("MD"=rownames(df.criteria_reproducibility_md), df.criteria_reproducibility_md)
names_row = c("6", "4-5", "1-3", "0", "Total")
df.criteria_reproducibility_os = data.frame(matrix(0, nrow=length(names_row), ncol=length(names_col)))
colnames(df.criteria_reproducibility_os) = names_col
rownames(df.criteria_reproducibility_os) = names_row
df.criteria_reproducibility_os = data.frame("OCT.Score"=rownames(df.criteria_reproducibility_os), df.criteria_reproducibility_os)
for(pat.i in 1:nrow(df.best_match)){
ght = fost = mhpa = logts = ukgts = eagle = agis = F
row = row2 = ""
id = df.best_match[pat.i,"Patient.ID"]
date1 = df.best_match[pat.i,"Date.Vf"]
for(pat.j in which(as.integer(df.criteria_results[,"Patient.ID"]) == id)){
date2 = as.Date.POSIXct(as.double(df.criteria_results[pat.j,"Date.Time"]))
if(date2 > date1){
md = df.best_match[pat.i,"MD.pval"]
if(is.na(md)){
row = ">10%"
}
else if(md == 0.005){
row = "<0.5%"
}
else if(md == 0.01){
row = "0.5-2%"
}
else if(md == 0.02){
row = "0.5-2%"
}
else if(md == 0.05){
row = "2-10%"
}
else if(md == 0.1){
row = "2-10%"
}
else
print("catch")
os = df.best_match[pat.i,"OCT.Score"]
if(os == 0){
row2 = "0"
}
else if(inside.range(os, c(1,3))){
row2 = "1-3"
}
else if(inside.range(os, c(4,5))){
row2 = "4-5"
}
else if(os == 6){
row2 = "6"
}
if((ght == F) && (fost == F) && (mhpa == F) && (ukgts == F) && (logts == F) && (eagle == F) && (agis == F)){
if((df.best_match[pat.i,"GHT"] == T) || (df.best_match[pat.i,"FOST"] == T) ||
(df.best_match[pat.i,"MHPA"] == T) || (df.best_match[pat.i,"UKGTS"] == T) ||
(df.best_match[pat.i,"LOGTS"] == T) || (df.best_match[pat.i,"EAGLE"] == T) ||
(df.best_match[pat.i,"AGIS"] == T)){
df.criteria_reproducibility_md[row,"Num"] = df.criteria_reproducibility_md[row,"Num"] + 1
df.criteria_reproducibility_os[row2,"Num"] = df.criteria_reproducibility_os[row2,"Num"] + 1
}
}
if((ght == F) && (df.best_match[pat.i,"GHT"] == T)){
df.criteria_reproducibility_md["Total","GHT"] = df.criteria_reproducibility_md["Total","GHT"] + 1
df.criteria_reproducibility_os["Total","GHT"] = df.criteria_reproducibility_os["Total","GHT"] + 1
if(df.criteria_results[pat.j,"GHT"] == F){
ght = T
df.criteria_reproducibility_md[row,"GHT"] = df.criteria_reproducibility_md[row,"GHT"] + 1
df.criteria_reproducibility_os[row2,"GHT"] = df.criteria_reproducibility_os[row2,"GHT"] + 1
}
}
if((fost == F) && (df.best_match[pat.i,"FOST"] == T)){
df.criteria_reproducibility_md["Total","FOST"] = df.criteria_reproducibility_md["Total","FOST"] + 1
df.criteria_reproducibility_os["Total","FOST"] = df.criteria_reproducibility_os["Total","FOST"] + 1
if(df.criteria_results[pat.j,"FOST"] == F){
fost = T
df.criteria_reproducibility_md[row,"FOST"] = df.criteria_reproducibility_md[row,"FOST"] + 1
df.criteria_reproducibility_os[row2,"FOST"] = df.criteria_reproducibility_os[row2,"FOST"] + 1
}
}
if((mhpa == F) && (df.best_match[pat.i,"MHPA"] == T)){
df.criteria_reproducibility_md["Total","MHPA"] = df.criteria_reproducibility_md["Total","MHPA"] + 1
df.criteria_reproducibility_os["Total","MHPA"] = df.criteria_reproducibility_os["Total","MHPA"] + 1
if(df.criteria_results[pat.j,"MHPA"] == F){
mhpa = T
df.criteria_reproducibility_md[row,"MHPA"] = df.criteria_reproducibility_md[row,"MHPA"] + 1
df.criteria_reproducibility_os[row2,"MHPA"] = df.criteria_reproducibility_os[row2,"MHPA"] + 1
}
}
if((logts == F) && (df.best_match[pat.i,"LOGTS"] == T)){
df.criteria_reproducibility_md["Total","LOGTS"] = df.criteria_reproducibility_md["Total","LOGTS"] + 1
df.criteria_reproducibility_os["Total","LOGTS"] = df.criteria_reproducibility_os["Total","LOGTS"] + 1
if(df.criteria_results[pat.j,"LOGTS"] == F){
logts = T
df.criteria_reproducibility_md[row,"LOGTS"] = df.criteria_reproducibility_md[row,"LOGTS"] + 1
df.criteria_reproducibility_os[row2,"LOGTS"] = df.criteria_reproducibility_os[row2,"LOGTS"] + 1
}
}
if((ukgts == F) && (df.best_match[pat.i,"UKGTS"] == T)){
df.criteria_reproducibility_md["Total","UKGTS"] = df.criteria_reproducibility_md["Total","UKGTS"] + 1
df.criteria_reproducibility_os["Total","UKGTS"] = df.criteria_reproducibility_os["Total","UKGTS"] + 1
if(df.criteria_results[pat.j,"UKGTS"] == F){
ukgts = T
df.criteria_reproducibility_md[row,"UKGTS"] = df.criteria_reproducibility_md[row,"UKGTS"] + 1
df.criteria_reproducibility_os[row2,"UKGTS"] = df.criteria_reproducibility_os[row2,"UKGTS"] + 1
}
}
#if((eagle == F) && (df.best_match[pat.i,"EAGLE"] == T)){
#  df.criteria_reproducibility_md["Total","EAGLE"] = df.criteria_reproducibility_md["Total","EAGLE"] + 1
#  df.criteria_reproducibility_os["Total","EAGLE"] = df.criteria_reproducibility_os["Total","EAGLE"] + 1
#
#  if(df.criteria_results[pat.j,"EAGLE"] == F){
#    eagle = T
#    df.criteria_reproducibility_md[row,"EAGLE"] = df.criteria_reproducibility_md[row,"EAGLE"] + 1
#    df.criteria_reproducibility_os[row2,"EAGLE"] = df.criteria_reproducibility_os[row2,"EAGLE"] + 1
#  }
#}
#
#if((agis == F) && (df.best_match[pat.i,"AGIS"] == T)){
#  df.criteria_reproducibility_md["Total","AGIS"] = df.criteria_reproducibility_md["Total","AGIS"] + 1
#  df.criteria_reproducibility_os["Total","AGIS"] = df.criteria_reproducibility_os["Total","AGIS"] + 1
#
#  if(df.criteria_results[pat.j,"AGIS"] == F){
#    agis = T
#    df.criteria_reproducibility_md[row,"AGIS"] = df.criteria_reproducibility_md[row,"AGIS"] + 1
#    df.criteria_reproducibility_os[row2,"AGIS"] = df.criteria_reproducibility_os[row2,"AGIS"] + 1
#  }
#}
}
}
}
assign("df.criteria_reproducibility_md", df.criteria_reproducibility_md, envir = .GlobalEnv)
assign("df.criteria_reproducibility_os", df.criteria_reproducibility_os, envir = .GlobalEnv)
print(df.criteria_reproducibility_md)
print(df.criteria_reproducibility_os)
}
checkCriteriaReproducibility()
sum(df.criteria_reproducibility_md[,"Num"])
sum(df.criteria_reproducibility_os[,"Num"])
printClusteredHist(x_var="rmd")
printClusteredHist(x_var="ros")
a = c(sum(df.criteria_reproducibility_md[1,2:7]),sum(df.criteria_reproducibility_md[2,2:7]),sum(df.criteria_reproducibility_md[3,2:7]),sum(df.criteria_reproducibility_md[4,2:7]))
a
CI = binom.confint(x=a, n=df.results_md_cluster[,"Total"], methods="wilson")
CI
CI = binom.confint(x=a, n=df.criteria_reproducibility_md[,"Num"], methods="wilson")
CI = binom.confint(x=a, n=df.criteria_reproducibility_md[1:4,"Num"], methods="wilson")
CI
#' Reproducibility
#'
#' Assigns OCT score to patient based on RNFLT, MRW, and GCLT
#' @param df.results formatted results to be used
#' @return none
#' @export
checkCriteriaReproducibility = function()
{
names_col = c("MHPA", "UKGTS", "GHT","FOST", "LOGTS", "EAGLE", "AGIS", "Num")
names_row = c(">10%", "2-10%", "0.5-2%", "<0.5%", "Total")
df.criteria_reproducibility_md = data.frame(matrix(0, nrow=length(names_row), ncol=length(names_col)))
colnames(df.criteria_reproducibility_md) = names_col
rownames(df.criteria_reproducibility_md) = names_row
df.criteria_reproducibility_md = data.frame("MD"=rownames(df.criteria_reproducibility_md), df.criteria_reproducibility_md)
names_row = c("0", "1-3", "4-5", "6", "Total")
df.criteria_reproducibility_os = data.frame(matrix(0, nrow=length(names_row), ncol=length(names_col)))
colnames(df.criteria_reproducibility_os) = names_col
rownames(df.criteria_reproducibility_os) = names_row
df.criteria_reproducibility_os = data.frame("OCT.Score"=rownames(df.criteria_reproducibility_os), df.criteria_reproducibility_os)
for(pat.i in 1:nrow(df.best_match)){
ght = fost = mhpa = logts = ukgts = eagle = agis = F
row = row2 = ""
id = df.best_match[pat.i,"Patient.ID"]
date1 = df.best_match[pat.i,"Date.Vf"]
for(pat.j in which(as.integer(df.criteria_results[,"Patient.ID"]) == id)){
date2 = as.Date.POSIXct(as.double(df.criteria_results[pat.j,"Date.Time"]))
if(date2 > date1){
md = df.best_match[pat.i,"MD.pval"]
if(is.na(md)){
row = ">10%"
}
else if(md == 0.005){
row = "<0.5%"
}
else if(md == 0.01){
row = "0.5-2%"
}
else if(md == 0.02){
row = "0.5-2%"
}
else if(md == 0.05){
row = "2-10%"
}
else if(md == 0.1){
row = "2-10%"
}
else
print("catch")
os = df.best_match[pat.i,"OCT.Score"]
if(os == 0){
row2 = "0"
}
else if(inside.range(os, c(1,3))){
row2 = "1-3"
}
else if(inside.range(os, c(4,5))){
row2 = "4-5"
}
else if(os == 6){
row2 = "6"
}
if((ght == F) && (fost == F) && (mhpa == F) && (ukgts == F) && (logts == F) && (eagle == F) && (agis == F)){
if((df.best_match[pat.i,"GHT"] == T) || (df.best_match[pat.i,"FOST"] == T) ||
(df.best_match[pat.i,"MHPA"] == T) || (df.best_match[pat.i,"UKGTS"] == T) ||
(df.best_match[pat.i,"LOGTS"] == T) || (df.best_match[pat.i,"EAGLE"] == T) ||
(df.best_match[pat.i,"AGIS"] == T)){
df.criteria_reproducibility_md[row,"Num"] = df.criteria_reproducibility_md[row,"Num"] + 1
df.criteria_reproducibility_os[row2,"Num"] = df.criteria_reproducibility_os[row2,"Num"] + 1
}
}
if((ght == F) && (df.best_match[pat.i,"GHT"] == T)){
df.criteria_reproducibility_md["Total","GHT"] = df.criteria_reproducibility_md["Total","GHT"] + 1
df.criteria_reproducibility_os["Total","GHT"] = df.criteria_reproducibility_os["Total","GHT"] + 1
if(df.criteria_results[pat.j,"GHT"] == F){
ght = T
df.criteria_reproducibility_md[row,"GHT"] = df.criteria_reproducibility_md[row,"GHT"] + 1
df.criteria_reproducibility_os[row2,"GHT"] = df.criteria_reproducibility_os[row2,"GHT"] + 1
}
}
if((fost == F) && (df.best_match[pat.i,"FOST"] == T)){
df.criteria_reproducibility_md["Total","FOST"] = df.criteria_reproducibility_md["Total","FOST"] + 1
df.criteria_reproducibility_os["Total","FOST"] = df.criteria_reproducibility_os["Total","FOST"] + 1
if(df.criteria_results[pat.j,"FOST"] == F){
fost = T
df.criteria_reproducibility_md[row,"FOST"] = df.criteria_reproducibility_md[row,"FOST"] + 1
df.criteria_reproducibility_os[row2,"FOST"] = df.criteria_reproducibility_os[row2,"FOST"] + 1
}
}
if((mhpa == F) && (df.best_match[pat.i,"MHPA"] == T)){
df.criteria_reproducibility_md["Total","MHPA"] = df.criteria_reproducibility_md["Total","MHPA"] + 1
df.criteria_reproducibility_os["Total","MHPA"] = df.criteria_reproducibility_os["Total","MHPA"] + 1
if(df.criteria_results[pat.j,"MHPA"] == F){
mhpa = T
df.criteria_reproducibility_md[row,"MHPA"] = df.criteria_reproducibility_md[row,"MHPA"] + 1
df.criteria_reproducibility_os[row2,"MHPA"] = df.criteria_reproducibility_os[row2,"MHPA"] + 1
}
}
if((logts == F) && (df.best_match[pat.i,"LOGTS"] == T)){
df.criteria_reproducibility_md["Total","LOGTS"] = df.criteria_reproducibility_md["Total","LOGTS"] + 1
df.criteria_reproducibility_os["Total","LOGTS"] = df.criteria_reproducibility_os["Total","LOGTS"] + 1
if(df.criteria_results[pat.j,"LOGTS"] == F){
logts = T
df.criteria_reproducibility_md[row,"LOGTS"] = df.criteria_reproducibility_md[row,"LOGTS"] + 1
df.criteria_reproducibility_os[row2,"LOGTS"] = df.criteria_reproducibility_os[row2,"LOGTS"] + 1
}
}
if((ukgts == F) && (df.best_match[pat.i,"UKGTS"] == T)){
df.criteria_reproducibility_md["Total","UKGTS"] = df.criteria_reproducibility_md["Total","UKGTS"] + 1
df.criteria_reproducibility_os["Total","UKGTS"] = df.criteria_reproducibility_os["Total","UKGTS"] + 1
if(df.criteria_results[pat.j,"UKGTS"] == F){
ukgts = T
df.criteria_reproducibility_md[row,"UKGTS"] = df.criteria_reproducibility_md[row,"UKGTS"] + 1
df.criteria_reproducibility_os[row2,"UKGTS"] = df.criteria_reproducibility_os[row2,"UKGTS"] + 1
}
}
#if((eagle == F) && (df.best_match[pat.i,"EAGLE"] == T)){
#  df.criteria_reproducibility_md["Total","EAGLE"] = df.criteria_reproducibility_md["Total","EAGLE"] + 1
#  df.criteria_reproducibility_os["Total","EAGLE"] = df.criteria_reproducibility_os["Total","EAGLE"] + 1
#
#  if(df.criteria_results[pat.j,"EAGLE"] == F){
#    eagle = T
#    df.criteria_reproducibility_md[row,"EAGLE"] = df.criteria_reproducibility_md[row,"EAGLE"] + 1
#    df.criteria_reproducibility_os[row2,"EAGLE"] = df.criteria_reproducibility_os[row2,"EAGLE"] + 1
#  }
#}
#
#if((agis == F) && (df.best_match[pat.i,"AGIS"] == T)){
#  df.criteria_reproducibility_md["Total","AGIS"] = df.criteria_reproducibility_md["Total","AGIS"] + 1
#  df.criteria_reproducibility_os["Total","AGIS"] = df.criteria_reproducibility_os["Total","AGIS"] + 1
#
#  if(df.criteria_results[pat.j,"AGIS"] == F){
#    agis = T
#    df.criteria_reproducibility_md[row,"AGIS"] = df.criteria_reproducibility_md[row,"AGIS"] + 1
#    df.criteria_reproducibility_os[row2,"AGIS"] = df.criteria_reproducibility_os[row2,"AGIS"] + 1
#  }
#}
}
}
}
assign("df.criteria_reproducibility_md", df.criteria_reproducibility_md, envir = .GlobalEnv)
assign("df.criteria_reproducibility_os", df.criteria_reproducibility_os, envir = .GlobalEnv)
print(df.criteria_reproducibility_md)
print(df.criteria_reproducibility_os)
}
checkCriteriaReproducibility()
printClusteredHist(x_var="ros")
#' Low-pressure glaucoma treatment study criteria (LOGTS)
#'
#' Presence of at least 3 contiguous points depressed more than 8 decibels or 2 contiguous points depressed more than 10 decibels on TD plot
#' @param pat_id Patient position in the list on the excel spreadsheet
#' @return BOOL Whether patient VF analysis resulted in a positive result.
#' @export
checkLogtsCriteria = function(pat_id)
{
#import data points
df.VF_TD = data.frame(t(df.vf_data[VF_V_OFST+pat_id, TD_H_OFST:(TD_H_OFST+VF_H_SIZE-1)]))
# check cluster of 2 points
for(pt1 in 1:VF_H_SIZE)
{
if(!(is.na(df.VF_TD[pt1,1])))
{
if((df.VF_TD[pt1,1] <= -10))
{
print(paste0("pt1=", pt1))
for(n1 in 4:11)
{
pt2 = df.pt_mapping[pt1,n1]
if(!(is.na(df.VF_TD[pt2,1])))
{
if(df.VF_TD[pt2,1] <= -10)
{
print(paste0("pt2=", pt2))
return(TRUE)
}
}
}
}
}
}
# check cluster of 3 points
for(pt1 in 1:VF_H_SIZE)
{
if(!(is.na(df.VF_TD[pt1,1])))
{
if((df.VF_TD[pt1,1] <= -8))
{
print(paste0("pt1=", pt1))
for(n1 in 4:11)
{
pt2 = df.pt_mapping[pt1,n1]
if(!(is.na(df.VF_TD[pt2,1])))
{
if(df.VF_TD[pt2,1] <= -8)
{
print(paste0("pt2=", pt2))
for(n2 in 4:11)
{
pt3 = df.pt_mapping[pt2,n2]
if(!(is.na(df.VF_TD[pt3,1])))
{
if(df.VF_TD[pt3,1] <= -8)
{
if(pt1 != pt3)
{
print(paste0("pt3=", pt3))
return(TRUE)
}
}
}
}
}
}
}
}
}
}
return(FALSE)
}
assignVfCriteria()
matchVfToOct()
scoreOct()
printClusteredHist()
