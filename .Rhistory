theme_bw(base_size = 22) +
theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
}
else if(x_var == "md"){
# create data frame to house graph variables
df.results_md_cluster = data.frame("MD"=1:6, "GHT"=1:6, "FOST"=1:6, "MHPA"=1:6, "UKGTS"=1:6,  "NUM"=1:6)
df.results_md_cluster[,1] = c(">10%", "<10%", "<5%", "<2%", "<1%", "<0.5%")
for(row in 1:nrow(df.results_md_cluster)){
for(col in 2:ncol(df.results_md_cluster)){
df.results_md_cluster[row,col] = 0
}
}
for(pat in 1:nrow(df.results)){
md = df.results[pat,"MD"]
#print(md)
if(is.na(md)){
row = 1
}
else if(md == 0.005){
row = 6
}
else if(md == 0.01){
row = 5
}
else if(md == 0.02){
row = 4
}
else if(md == 0.05){
row = 3
}
else if(md == 0.1){
row = 2
}
df.results_md_cluster[row,6] = df.results_md_cluster[row,6] + 1
for(col in c("GHT", "FOST", "UKGTS", "MHPA")){
#print(pat)
if(df.results[pat,col] == T)
df.results_md_cluster[row,col] = df.results_md_cluster[row,col] + 1
}
}
assign("df.results_md_cluster", df.results_md_cluster, envir = .GlobalEnv)
# confidence intervals
CIs = rbind(binom.confint(x=df.results_md_cluster[1:4,2:5], n=df.results_md_cluster[1:4,6], methods="wilson"),
binom.confint(x=df.results_md_cluster[3:6,2:5], n=df.results_md_cluster[3:6,6], methods="wilson")[3:4,])
# modify name of each bin
for(row in 1:nrow(df.results_md_cluster)){
df.results_md_cluster[row,1] = paste0(df.results_md_cluster[row,1], "\nN=", df.results_md_cluster[row,6])
}
# generate data frame to be graphed
df.results_graph = cbind(MD=df.results_md_cluster[,1], CIs[,7:18])
colnames(df.results_graph)[2:5] = c("GHT", "FOST", "MHPA", "UKGTS")
df.results_graph = within(df.results_graph,  MD <- factor(MD, levels=MD))
print(df.results_graph)
# melt
df.melted = melt(df.results_graph[,1:5], variable.name = "criterion", value.name = "Hit.Rate")
# round hit rates to 2 sig figs
df.melted[,"Hit.Rate"] = round(df.melted[,"Hit.Rate"], digits=2)
# add CI columns
df.melted = cbind(df.melted,
lower.CI=c(df.results_graph[,"lower.GHT"], df.results_graph[,"lower.FOST"], df.results_graph[,"lower.MHPA"], df.results_graph[,"lower.UKGTS"]),
upper.CI=c(df.results_graph[,"upper.GHT"], df.results_graph[,"upper.FOST"], df.results_graph[,"upper.MHPA"], df.results_graph[,"upper.UKGTS"]))
print(df.melted)
plot.hist = ggplot(df.melted, aes(x=MD, y=Hit.Rate, fill=criterion)) +
geom_bar(position = position_dodge(), stat = "identity") +
geom_errorbar(position=position_dodge(0.9), width=.5, aes(ymin=lower.CI, ymax=upper.CI)) +
geom_text(aes(label = Hit.Rate, group = criterion), size=6, hjust=0.5, vjust=5, position=position_dodge(0.9)) +
theme_bw(base_size = 22) +
theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
}
return(plot.hist)
}
printClusteredHist()
#' Clustered histogram for MD and criteria results
#'
#' Print histogram where criteria (Foster, MHPA, UKGTS, and GHT) results are clustered within their MD percentiles (10, 5, 2, 1, and 0.5 %)
#' @export
printClusteredHist = function(df.results = df.best_match, x_var = "os", percentage.weight = FALSE)
{
df.results = df.best_match
if(x_var == "os"){
# create data frame to house graph variables
df.results_os_cluster = data.frame("OCT.Score"=1:4, "GHT"=1:4,"FOST"=1:4, "MHPA"=1:4, "UKGTS"=1:4,  "NUM"=1:4)
df.results_os_cluster[,1] = c("0", "4-5", "1-3","6")
# set cell values to 0
for(row in 1:nrow(df.results_os_cluster)){
for(col in 2:ncol(df.results_os_cluster)){
df.results_os_cluster[row,col] = 0
}
}
# record counts of OCT scores in the cells
for(pat in 1:nrow(df.results)){
os = df.results[pat,"OCT.Score"]
#print(pat)
if(os == 0){
row = 1
}
else if(inside.range(os, c(1,3))){
row = 2
}
else if(inside.range(os, c(4,5))){
row = 3
}
else if(os == 6){
row = 4
}
# increment count of OCT bin
df.results_os_cluster[row,"NUM"] = df.results_os_cluster[row,"NUM"] + 1
# increment count of OCT-VFcriterion cell
for(col in c("GHT", "FOST", "UKGTS", "MHPA")){
#print(pat)
if(df.results[pat,col] == T)
df.results_os_cluster[row,col] = df.results_os_cluster[row,col] + 1
}
}
assign("df.results_os_cluster", df.results_os_cluster, envir = .GlobalEnv)
# confidence intervals
CIs = binom.confint(x=df.results_os_cluster[,2:5], n=df.results_os_cluster[,6], methods="wilson")
# modify name of each bin
for(row in 1:nrow(df.results_os_cluster)){
df.results_os_cluster[row,1] = paste0(df.results_os_cluster[row,1], "\nN=", df.results_os_cluster[row,6])
}
# generate data frame to be graphed
df.results_graph = cbind(OCT.Score=df.results_os_cluster[,1], CIs[,7:18])
colnames(df.results_graph)[2:5] = c("GHT", "FOST", "MHPA", "UKGTS")
df.results_graph = within(df.results_graph,  OCT.Score <- factor(OCT.Score, levels=OCT.Score))
print(df.results_graph)
# melt
df.melted = melt(df.results_graph[,1:5], variable.name = "criterion", value.name = "Hit.Rate")
# round hit rates to 2 sig figs
df.melted[,"Hit.Rate"] = round(df.melted[,"Hit.Rate"], digits=2)
# add CI columns
df.melted = cbind(df.melted,
lower.CI=c(df.results_graph[,"lower.GHT"], df.results_graph[,"lower.FOST"], df.results_graph[,"lower.MHPA"], df.results_graph[,"lower.UKGTS"]),
upper.CI=c(df.results_graph[,"upper.GHT"], df.results_graph[,"upper.FOST"], df.results_graph[,"upper.MHPA"], df.results_graph[,"upper.UKGTS"]))
print(df.melted)
plot.hist = ggplot(df.melted, aes(x=OCT.Score, y=Hit.Rate, fill=criterion)) +
geom_bar(position = position_dodge(), stat = "identity") +
scale_fill_manual("legend", values = c("GHT" = "#bbbcbe", "FOST" = "#ffffb1", "MHPA" = "#ffb1b1", "UKGTS" = "#b1e6fa")) +
geom_errorbar(position=position_dodge(0.9), width=.5, aes(ymin=lower.CI, ymax=upper.CI)) +
geom_text(aes(label = Hit.Rate, group = criterion), size=6, hjust=0.5, vjust=5, position=position_dodge(0.9)) +
theme_bw(base_size = 22) +
theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
}
else if(x_var == "md"){
# create data frame to house graph variables
df.results_md_cluster = data.frame("MD"=1:6, "GHT"=1:6, "FOST"=1:6, "MHPA"=1:6, "UKGTS"=1:6,  "NUM"=1:6)
df.results_md_cluster[,1] = c(">10%", "<10%", "<5%", "<2%", "<1%", "<0.5%")
for(row in 1:nrow(df.results_md_cluster)){
for(col in 2:ncol(df.results_md_cluster)){
df.results_md_cluster[row,col] = 0
}
}
for(pat in 1:nrow(df.results)){
md = df.results[pat,"MD"]
#print(md)
if(is.na(md)){
row = 1
}
else if(md == 0.005){
row = 6
}
else if(md == 0.01){
row = 5
}
else if(md == 0.02){
row = 4
}
else if(md == 0.05){
row = 3
}
else if(md == 0.1){
row = 2
}
df.results_md_cluster[row,6] = df.results_md_cluster[row,6] + 1
for(col in c("GHT", "FOST", "UKGTS", "MHPA")){
#print(pat)
if(df.results[pat,col] == T)
df.results_md_cluster[row,col] = df.results_md_cluster[row,col] + 1
}
}
assign("df.results_md_cluster", df.results_md_cluster, envir = .GlobalEnv)
# confidence intervals
CIs = rbind(binom.confint(x=df.results_md_cluster[1:4,2:5], n=df.results_md_cluster[1:4,6], methods="wilson"),
binom.confint(x=df.results_md_cluster[3:6,2:5], n=df.results_md_cluster[3:6,6], methods="wilson")[3:4,])
# modify name of each bin
for(row in 1:nrow(df.results_md_cluster)){
df.results_md_cluster[row,1] = paste0(df.results_md_cluster[row,1], "\nN=", df.results_md_cluster[row,6])
}
# generate data frame to be graphed
df.results_graph = cbind(MD=df.results_md_cluster[,1], CIs[,7:18])
colnames(df.results_graph)[2:5] = c("GHT", "FOST", "MHPA", "UKGTS")
df.results_graph = within(df.results_graph,  MD <- factor(MD, levels=MD))
print(df.results_graph)
# melt
df.melted = melt(df.results_graph[,1:5], variable.name = "criterion", value.name = "Hit.Rate")
# round hit rates to 2 sig figs
df.melted[,"Hit.Rate"] = round(df.melted[,"Hit.Rate"], digits=2)
# add CI columns
df.melted = cbind(df.melted,
lower.CI=c(df.results_graph[,"lower.GHT"], df.results_graph[,"lower.FOST"], df.results_graph[,"lower.MHPA"], df.results_graph[,"lower.UKGTS"]),
upper.CI=c(df.results_graph[,"upper.GHT"], df.results_graph[,"upper.FOST"], df.results_graph[,"upper.MHPA"], df.results_graph[,"upper.UKGTS"]))
print(df.melted)
plot.hist = ggplot(df.melted, aes(x=MD, y=Hit.Rate, fill=criterion)) +
geom_bar(position = position_dodge(), stat = "identity") +
geom_errorbar(position=position_dodge(0.9), width=.5, aes(ymin=lower.CI, ymax=upper.CI)) +
geom_text(aes(label = Hit.Rate, group = criterion), size=6, hjust=0.5, vjust=5, position=position_dodge(0.9)) +
theme_bw(base_size = 22) +
theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
}
return(plot.hist)
}
printClusteredHist()
#' Clustered histogram for MD and criteria results
#'
#' Print histogram where criteria (Foster, MHPA, UKGTS, and GHT) results are clustered within their MD percentiles (10, 5, 2, 1, and 0.5 %)
#' @export
printClusteredHist = function(df.results = df.best_match, x_var = "os", percentage.weight = FALSE)
{
df.results = df.best_match
if(x_var == "os"){
# create data frame to house graph variables
df.results_os_cluster = data.frame("OCT.Score"=1:4, "GHT"=1:4,"FOST"=1:4, "MHPA"=1:4, "UKGTS"=1:4,  "NUM"=1:4)
df.results_os_cluster[,1] = c("0", "4-5", "1-3","6")
# set cell values to 0
for(row in 1:nrow(df.results_os_cluster)){
for(col in 2:ncol(df.results_os_cluster)){
df.results_os_cluster[row,col] = 0
}
}
# record counts of OCT scores in the cells
for(pat in 1:nrow(df.results)){
os = df.results[pat,"OCT.Score"]
#print(pat)
if(os == 0){
row = 1
}
else if(inside.range(os, c(1,3))){
row = 2
}
else if(inside.range(os, c(4,5))){
row = 3
}
else if(os == 6){
row = 4
}
# increment count of OCT bin
df.results_os_cluster[row,"NUM"] = df.results_os_cluster[row,"NUM"] + 1
# increment count of OCT-VFcriterion cell
for(col in c("GHT", "FOST", "UKGTS", "MHPA")){
#print(pat)
if(df.results[pat,col] == T)
df.results_os_cluster[row,col] = df.results_os_cluster[row,col] + 1
}
}
assign("df.results_os_cluster", df.results_os_cluster, envir = .GlobalEnv)
# confidence intervals
CIs = binom.confint(x=df.results_os_cluster[,2:5], n=df.results_os_cluster[,6], methods="wilson")
# modify name of each bin
for(row in 1:nrow(df.results_os_cluster)){
df.results_os_cluster[row,1] = paste0(df.results_os_cluster[row,1], "\nN=", df.results_os_cluster[row,6])
}
# generate data frame to be graphed
df.results_graph = cbind(OCT.Score=df.results_os_cluster[,1], CIs[,7:18])
colnames(df.results_graph)[2:5] = c("GHT", "FOST", "MHPA", "UKGTS")
df.results_graph = within(df.results_graph,  OCT.Score <- factor(OCT.Score, levels=OCT.Score))
print(df.results_graph)
# melt
df.melted = melt(df.results_graph[,1:5], variable.name = "criterion", value.name = "Hit.Rate")
# round hit rates to 2 sig figs
df.melted[,"Hit.Rate"] = round(df.melted[,"Hit.Rate"], digits=2)
# add CI columns
df.melted = cbind(df.melted,
lower.CI=c(df.results_graph[,"lower.GHT"], df.results_graph[,"lower.FOST"], df.results_graph[,"lower.MHPA"], df.results_graph[,"lower.UKGTS"]),
upper.CI=c(df.results_graph[,"upper.GHT"], df.results_graph[,"upper.FOST"], df.results_graph[,"upper.MHPA"], df.results_graph[,"upper.UKGTS"]))
print(df.melted)
plot.hist = ggplot(df.melted, aes(x=OCT.Score, y=Hit.Rate, fill=criterion)) +
geom_bar(position = position_dodge(), stat = "identity") +
scale_fill_manual("criteria", values = c("GHT" = "#bbbcbe", "FOST" = "#ffffb1", "MHPA" = "#ffb1b1", "UKGTS" = "#b1e6fa")) +
geom_errorbar(position=position_dodge(0.9), width=.5, aes(ymin=lower.CI, ymax=upper.CI)) +
geom_text(aes(label = Hit.Rate, group = criterion), size=6, hjust=0.5, vjust=5, position=position_dodge(0.9)) +
theme_bw(base_size = 22) +
theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
}
else if(x_var == "md"){
# create data frame to house graph variables
df.results_md_cluster = data.frame("MD"=1:6, "GHT"=1:6, "FOST"=1:6, "MHPA"=1:6, "UKGTS"=1:6,  "NUM"=1:6)
df.results_md_cluster[,1] = c(">10%", "<10%", "<5%", "<2%", "<1%", "<0.5%")
for(row in 1:nrow(df.results_md_cluster)){
for(col in 2:ncol(df.results_md_cluster)){
df.results_md_cluster[row,col] = 0
}
}
for(pat in 1:nrow(df.results)){
md = df.results[pat,"MD"]
#print(md)
if(is.na(md)){
row = 1
}
else if(md == 0.005){
row = 6
}
else if(md == 0.01){
row = 5
}
else if(md == 0.02){
row = 4
}
else if(md == 0.05){
row = 3
}
else if(md == 0.1){
row = 2
}
df.results_md_cluster[row,6] = df.results_md_cluster[row,6] + 1
for(col in c("GHT", "FOST", "UKGTS", "MHPA")){
#print(pat)
if(df.results[pat,col] == T)
df.results_md_cluster[row,col] = df.results_md_cluster[row,col] + 1
}
}
assign("df.results_md_cluster", df.results_md_cluster, envir = .GlobalEnv)
# confidence intervals
CIs = rbind(binom.confint(x=df.results_md_cluster[1:4,2:5], n=df.results_md_cluster[1:4,6], methods="wilson"),
binom.confint(x=df.results_md_cluster[3:6,2:5], n=df.results_md_cluster[3:6,6], methods="wilson")[3:4,])
# modify name of each bin
for(row in 1:nrow(df.results_md_cluster)){
df.results_md_cluster[row,1] = paste0(df.results_md_cluster[row,1], "\nN=", df.results_md_cluster[row,6])
}
# generate data frame to be graphed
df.results_graph = cbind(MD=df.results_md_cluster[,1], CIs[,7:18])
colnames(df.results_graph)[2:5] = c("GHT", "FOST", "MHPA", "UKGTS")
df.results_graph = within(df.results_graph,  MD <- factor(MD, levels=MD))
print(df.results_graph)
# melt
df.melted = melt(df.results_graph[,1:5], variable.name = "criterion", value.name = "Hit.Rate")
# round hit rates to 2 sig figs
df.melted[,"Hit.Rate"] = round(df.melted[,"Hit.Rate"], digits=2)
# add CI columns
df.melted = cbind(df.melted,
lower.CI=c(df.results_graph[,"lower.GHT"], df.results_graph[,"lower.FOST"], df.results_graph[,"lower.MHPA"], df.results_graph[,"lower.UKGTS"]),
upper.CI=c(df.results_graph[,"upper.GHT"], df.results_graph[,"upper.FOST"], df.results_graph[,"upper.MHPA"], df.results_graph[,"upper.UKGTS"]))
print(df.melted)
plot.hist = ggplot(df.melted, aes(x=MD, y=Hit.Rate, fill=criterion)) +
geom_bar(position = position_dodge(), stat = "identity") +
scale_fill_manual("criteria", values = c("GHT" = "#bbbcbe", "FOST" = "#ffffb1", "MHPA" = "#ffb1b1", "UKGTS" = "#b1e6fa")) +
geom_errorbar(position=position_dodge(0.9), width=.5, aes(ymin=lower.CI, ymax=upper.CI)) +
geom_text(aes(label = Hit.Rate, group = criterion), size=6, hjust=0.5, vjust=5, position=position_dodge(0.9)) +
theme_bw(base_size = 22) +
theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
}
return(plot.hist)
}
printClusteredHist(x_val="md")
printClusteredHist(x_var="md")
?binom.confint
#import libraries
library("tidyverse")
library("dplyr")
library("ggplot2")
library("readxl")
library("devtools")
library("roxygen2")
library("cowplot")
library("UpSetR")
library("venneuler")
library("readxl")
library("reshape2")
library("spatstat.utils")
library("scales")
library("binom")
?binom.confint
#' Clustered histogram for MD and criteria results
#'
#' Print histogram where criteria (Foster, MHPA, UKGTS, and GHT) results are clustered within their MD percentiles (10, 5, 2, 1, and 0.5 %)
#' @export
printClusteredHist = function(df.results = df.best_match, x_var = "os", percentage.weight = FALSE)
{
df.results = df.best_match
if(x_var == "os"){
# create data frame to house graph variables
df.results_os_cluster = data.frame("OCT.Score"=1:4, "GHT"=1:4,"FOST"=1:4, "MHPA"=1:4, "UKGTS"=1:4,  "NUM"=1:4)
df.results_os_cluster[,1] = c("0", "4-5", "1-3","6")
# set cell values to 0
for(row in 1:nrow(df.results_os_cluster)){
for(col in 2:ncol(df.results_os_cluster)){
df.results_os_cluster[row,col] = 0
}
}
# record counts of OCT scores in the cells
for(pat in 1:nrow(df.results)){
os = df.results[pat,"OCT.Score"]
#print(pat)
if(os == 0){
row = 1
}
else if(inside.range(os, c(1,3))){
row = 2
}
else if(inside.range(os, c(4,5))){
row = 3
}
else if(os == 6){
row = 4
}
# increment count of OCT bin
df.results_os_cluster[row,"NUM"] = df.results_os_cluster[row,"NUM"] + 1
# increment count of OCT-VFcriterion cell
for(col in c("GHT", "FOST", "UKGTS", "MHPA")){
#print(pat)
if(df.results[pat,col] == T)
df.results_os_cluster[row,col] = df.results_os_cluster[row,col] + 1
}
}
assign("df.results_os_cluster", df.results_os_cluster, envir = .GlobalEnv)
# confidence intervals
CIs = binom.confint(x=df.results_os_cluster[,2:5], n=df.results_os_cluster[,6], methods="prop.test")
# modify name of each bin
for(row in 1:nrow(df.results_os_cluster)){
df.results_os_cluster[row,1] = paste0(df.results_os_cluster[row,1], "\nN=", df.results_os_cluster[row,6])
}
# generate data frame to be graphed
df.results_graph = cbind(OCT.Score=df.results_os_cluster[,1], CIs[,7:18])
colnames(df.results_graph)[2:5] = c("GHT", "FOST", "MHPA", "UKGTS")
df.results_graph = within(df.results_graph,  OCT.Score <- factor(OCT.Score, levels=OCT.Score))
print(df.results_graph)
# melt
df.melted = melt(df.results_graph[,1:5], variable.name = "criterion", value.name = "Hit.Rate")
# round hit rates to 2 sig figs
df.melted[,"Hit.Rate"] = round(df.melted[,"Hit.Rate"], digits=2)
# add CI columns
df.melted = cbind(df.melted,
lower.CI=c(df.results_graph[,"lower.GHT"], df.results_graph[,"lower.FOST"], df.results_graph[,"lower.MHPA"], df.results_graph[,"lower.UKGTS"]),
upper.CI=c(df.results_graph[,"upper.GHT"], df.results_graph[,"upper.FOST"], df.results_graph[,"upper.MHPA"], df.results_graph[,"upper.UKGTS"]))
print(df.melted)
plot.hist = ggplot(df.melted, aes(x=OCT.Score, y=Hit.Rate, fill=criterion)) +
geom_bar(position = position_dodge(), stat = "identity") +
scale_fill_manual("criteria", values = c("GHT" = "#bbbcbe", "FOST" = "#ffffb1", "MHPA" = "#ffb1b1", "UKGTS" = "#b1e6fa")) +
geom_errorbar(position=position_dodge(0.9), width=.5, aes(ymin=lower.CI, ymax=upper.CI)) +
geom_text(aes(label = Hit.Rate, group = criterion), size=6, hjust=0.5, vjust=5, position=position_dodge(0.9)) +
theme_bw(base_size = 22) +
theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
}
else if(x_var == "md"){
# create data frame to house graph variables
df.results_md_cluster = data.frame("MD"=1:6, "GHT"=1:6, "FOST"=1:6, "MHPA"=1:6, "UKGTS"=1:6,  "NUM"=1:6)
df.results_md_cluster[,1] = c(">10%", "<10%", "<5%", "<2%", "<1%", "<0.5%")
for(row in 1:nrow(df.results_md_cluster)){
for(col in 2:ncol(df.results_md_cluster)){
df.results_md_cluster[row,col] = 0
}
}
for(pat in 1:nrow(df.results)){
md = df.results[pat,"MD"]
#print(md)
if(is.na(md)){
row = 1
}
else if(md == 0.005){
row = 6
}
else if(md == 0.01){
row = 5
}
else if(md == 0.02){
row = 4
}
else if(md == 0.05){
row = 3
}
else if(md == 0.1){
row = 2
}
df.results_md_cluster[row,6] = df.results_md_cluster[row,6] + 1
for(col in c("GHT", "FOST", "UKGTS", "MHPA")){
#print(pat)
if(df.results[pat,col] == T)
df.results_md_cluster[row,col] = df.results_md_cluster[row,col] + 1
}
}
assign("df.results_md_cluster", df.results_md_cluster, envir = .GlobalEnv)
# confidence intervals
CIs = rbind(binom.confint(x=df.results_md_cluster[1:4,2:5], n=df.results_md_cluster[1:4,6], methods="prop.test"),
binom.confint(x=df.results_md_cluster[3:6,2:5], n=df.results_md_cluster[3:6,6], methods="prop.test")[3:4,])
# modify name of each bin
for(row in 1:nrow(df.results_md_cluster)){
df.results_md_cluster[row,1] = paste0(df.results_md_cluster[row,1], "\nN=", df.results_md_cluster[row,6])
}
# generate data frame to be graphed
df.results_graph = cbind(MD=df.results_md_cluster[,1], CIs[,7:18])
colnames(df.results_graph)[2:5] = c("GHT", "FOST", "MHPA", "UKGTS")
df.results_graph = within(df.results_graph,  MD <- factor(MD, levels=MD))
print(df.results_graph)
# melt
df.melted = melt(df.results_graph[,1:5], variable.name = "criterion", value.name = "Hit.Rate")
# round hit rates to 2 sig figs
df.melted[,"Hit.Rate"] = round(df.melted[,"Hit.Rate"], digits=2)
# add CI columns
df.melted = cbind(df.melted,
lower.CI=c(df.results_graph[,"lower.GHT"], df.results_graph[,"lower.FOST"], df.results_graph[,"lower.MHPA"], df.results_graph[,"lower.UKGTS"]),
upper.CI=c(df.results_graph[,"upper.GHT"], df.results_graph[,"upper.FOST"], df.results_graph[,"upper.MHPA"], df.results_graph[,"upper.UKGTS"]))
print(df.melted)
plot.hist = ggplot(df.melted, aes(x=MD, y=Hit.Rate, fill=criterion)) +
geom_bar(position = position_dodge(), stat = "identity") +
scale_fill_manual("criteria", values = c("GHT" = "#bbbcbe", "FOST" = "#ffffb1", "MHPA" = "#ffb1b1", "UKGTS" = "#b1e6fa")) +
geom_errorbar(position=position_dodge(0.9), width=.5, aes(ymin=lower.CI, ymax=upper.CI)) +
geom_text(aes(label = Hit.Rate, group = criterion), size=6, hjust=0.5, vjust=5, position=position_dodge(0.9)) +
theme_bw(base_size = 22) +
theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
}
return(plot.hist)
}
printClusteredHist()
