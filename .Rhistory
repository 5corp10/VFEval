idx = which.max(as.integer(mtx.max[,"rnfl.q"]) + as.integer(mtx.max[,"mrw.q"]) + as.integer(mtx.max[,"gcl.q"]))
vf.idx   = mtx.max[idx,"vf.i"]
rnfl.idx = mtx.max[idx,"rnfl.i"]
mrw.idx  = mtx.max[idx,"mrw.i"]
gcl.idx  = mtx.max[idx,"gcl.i"]
best_match = data.frame(df.criteria_results[vf.idx,"Patient.ID"],
df.criteria_results[vf.idx, "Eye"], df.rnfl_data[rnfl.idx,"Eye"], df.mrw_data[mrw.idx,"Eye"], df.gcl_data[gcl.idx,"Eye"],
as.Date.POSIXct(as.integer(df.criteria_results[vf.idx,"Date.Time"])),
df.rnfl_data[rnfl.idx,"ExamDate"], df.mrw_data[mrw.idx,"ExamDate"], as.Date.POSIXct(df.gcl_data[gcl.idx,"ExamDate"]),
df.rnfl_data[rnfl.idx,"Quality"], df.mrw_data[mrw.idx,"Mean.Quality"], df.gcl_data[gcl.idx,"Quality"],
df.criteria_results[vf.idx, 6:12], df.criteria_results[vf.idx,"MD.db"], df.criteria_results[vf.idx,"MD.pval"],
df.rnfl_data[rnfl.idx, 19:25],
df.mrw_data[mrw.idx, 134:140],
df.gcl_data[gcl.idx, 4:10])
colnames(best_match) = names
df.best_match = rbind(df.best_match, best_match)
#if(a == 4){
#  a = 0
#  break;
#}
#else
#  a = a + 1
}
assign("df.best_match", df.best_match, envir = .GlobalEnv)
}
#' OCT Score
#'
#' Assigns OCT score to patient based on RNFLT, MRW, and GCLT
#' @param df.results formatted results to be used
#' @return none
#' @export
scoreOct = function(df.results = df.best_match)
{
df.oct_scores = data.frame("OCT.Score" = 1:nrow(df.results))
for(pat in 1:nrow(df.results)){
oct.score = 0
rnfl.count = 0
mrw.count = 0
gcl.count = 0
#count score of RNFL
rnfl.range = which(colnames(df.results) == "RNFLClass_G") : (which(colnames(df.results) == "RNFLClass_G") + 6)
for(rnfl_val in df.results[pat,rnfl.range]){
if(rnfl_val == "ONL"){
rnfl.count = rnfl.count + 1
}
}
#count score of MRW
mrw.range = which(colnames(df.results) == "MRW.P.Global") : (which(colnames(df.results) == "MRW.P.Global") + 6)
for(mrw_val in df.results[pat,mrw.range]){
if(as.double(mrw_val) < 0.01){
mrw.count = mrw.count + 1
}
}
#count score of GCL
gcl.range = which(colnames(df.results) == "GCL.ABN.Global") : (which(colnames(df.results) == "GCL.ABN.Global") + 6)
for(gcl_val in df.results[pat,gcl.range]){
if(gcl_val == T){
gcl.count = gcl.count + 1
}
}
if(rnfl.count == 1){
oct.score = oct.score + 1
}
else if(rnfl.count > 2){
oct.score = oct.score + 2
}
if(mrw.count == 1){
oct.score = oct.score + 1
}
else if(mrw.count > 2){
oct.score = oct.score + 2
}
if(gcl.count == 1){
oct.score = oct.score + 1
}
else if(gcl.count > 2){
oct.score = oct.score + 2
}
df.oct_scores[pat,"OCT.Score"] = oct.score
}
assign("df.best_match", data.frame(df.results[,1:21], df.oct_scores, df.results[,22:39]), envir = .GlobalEnv)
}
#' Reproducibility
#'
#' Assigns OCT score to patient based on RNFLT, MRW, and GCLT
#' @param df.results formatted results to be used
#' @return none
#' @export
checkCriteriaReproducibility = function()
{
names_col = c("HAP2", "HAP2.T", "UKGTS", "UKGTS.T", "GHT", "GHT.T", "FOST", "FOST.T",
"LOGTS", "LOGTS.T", "EAGLE", "EAGLE.T", "AGIS", "AGIS.T")
names_row = c(">10%", "2-10%", "0.5-2%", "<0.5%")
df.criteria_reproducibility_md = data.frame(matrix(0, nrow=length(names_row), ncol=length(names_col)))
colnames(df.criteria_reproducibility_md) = names_col
rownames(df.criteria_reproducibility_md) = names_row
df.criteria_reproducibility_md = data.frame("MD"=rownames(df.criteria_reproducibility_md), df.criteria_reproducibility_md)
names_row = c("0", "1-3", "4-5", "6")
df.criteria_reproducibility_os = data.frame(matrix(0, nrow=length(names_row), ncol=length(names_col)))
colnames(df.criteria_reproducibility_os) = names_col
rownames(df.criteria_reproducibility_os) = names_row
df.criteria_reproducibility_os = data.frame("OCT.Score"=rownames(df.criteria_reproducibility_os), df.criteria_reproducibility_os)
for(pat.i in 1:nrow(df.best_match)){
row = row2 = ""
id = df.best_match[pat.i,"Patient.ID"]
eye = df.best_match[pat.i,"Eye.Vf"]
date1 = df.best_match[pat.i,"Date.Vf"]
for(pat.j in which(as.integer(df.criteria_results[,"Patient.ID"]) == id)){
date2 = as.Date.POSIXct(as.double(df.criteria_results[pat.j,"Date.Time"]))
eye2 = df.criteria_results[pat.j,"Eye"]
if((date2 > date1) && (eye2 == eye)){
md = df.best_match[pat.i,"MD.pval"]
if(is.na(md)){
row = ">10%"
}
else if(md == 0.005){
row = "<0.5%"
}
else if(md == 0.01){
row = "0.5-2%"
}
else if(md == 0.02){
row = "0.5-2%"
}
else if(md == 0.05){
row = "2-10%"
}
else if(md == 0.1){
row = "2-10%"
}
else
print("catch")
os = df.best_match[pat.i,"OCT.Score"]
if(os == 0){
row2 = "0"
}
else if(inside.range(os, c(1,3))){
row2 = "1-3"
}
else if(inside.range(os, c(4,5))){
row2 = "4-5"
}
else if(os == 6){
row2 = "6"
}
if(df.best_match[pat.i,"LOGTS"] == T){
df.criteria_reproducibility_md[row,"LOGTS.T"] = df.criteria_reproducibility_md[row,"LOGTS.T"] + 1
df.criteria_reproducibility_os[row2,"LOGTS.T"] = df.criteria_reproducibility_os[row2,"LOGTS.T"] + 1
if(df.criteria_results[pat.j,"LOGTS"] == F){
df.criteria_reproducibility_md[row,"LOGTS"] = df.criteria_reproducibility_md[row,"LOGTS"] + 1
df.criteria_reproducibility_os[row2,"LOGTS"] = df.criteria_reproducibility_os[row2,"LOGTS"] + 1
}
}
if(df.best_match[pat.i,"FOST"] == T){
df.criteria_reproducibility_md[row,"FOST.T"] = df.criteria_reproducibility_md[row,"FOST.T"] + 1
df.criteria_reproducibility_os[row2,"FOST.T"] = df.criteria_reproducibility_os[row2,"FOST.T"] + 1
if(df.criteria_results[pat.j,"FOST"] == F){
df.criteria_reproducibility_md[row,"FOST"] = df.criteria_reproducibility_md[row,"FOST"] + 1
df.criteria_reproducibility_os[row2,"FOST"] = df.criteria_reproducibility_os[row2,"FOST"] + 1
}
}
if(df.best_match[pat.i,"HAP2"] == T){
df.criteria_reproducibility_md[row,"HAP2.T"] = df.criteria_reproducibility_md[row,"HAP2.T"] + 1
df.criteria_reproducibility_os[row2,"HAP2.T"] = df.criteria_reproducibility_os[row2,"HAP2.T"] + 1
if(df.criteria_results[pat.j,"HAP2"] == F){
df.criteria_reproducibility_md[row,"HAP2"] = df.criteria_reproducibility_md[row,"HAP2"] + 1
df.criteria_reproducibility_os[row2,"HAP2"] = df.criteria_reproducibility_os[row2,"HAP2"] + 1
}
}
if(df.best_match[pat.i,"UKGTS"] == T){
df.criteria_reproducibility_md[row,"UKGTS.T"] = df.criteria_reproducibility_md[row,"UKGTS.T"] + 1
df.criteria_reproducibility_os[row2,"UKGTS.T"] = df.criteria_reproducibility_os[row2,"UKGTS.T"] + 1
if(df.criteria_results[pat.j,"UKGTS"] == F){
df.criteria_reproducibility_md[row,"UKGTS"] = df.criteria_reproducibility_md[row,"UKGTS"] + 1
df.criteria_reproducibility_os[row2,"UKGTS"] = df.criteria_reproducibility_os[row2,"UKGTS"] + 1
}
}
if(df.best_match[pat.i,"GHT"] == T){
df.criteria_reproducibility_md[row,"GHT.T"] = df.criteria_reproducibility_md[row,"GHT.T"] + 1
df.criteria_reproducibility_os[row2,"GHT.T"] = df.criteria_reproducibility_os[row2,"GHT.T"] + 1
if(df.criteria_results[pat.j,"GHT"] == F){
df.criteria_reproducibility_md[row,"GHT"] = df.criteria_reproducibility_md[row,"GHT"] + 1
df.criteria_reproducibility_os[row2,"GHT"] = df.criteria_reproducibility_os[row2,"GHT"] + 1
}
}
#if(df.best_match[pat.i,"GHT"] == T){
#  df.criteria_reproducibility_md[row,"GHT.T"] = df.criteria_reproducibility_md[row,"GHT.T"] + 1
#  df.criteria_reproducibility_os[row2,"GHT.T"] = df.criteria_reproducibility_os[row2,"GHT.T"] + 1
#
#  if(df.criteria_results[pat.j,"GHT"] == F){
#    df.criteria_reproducibility_md[row,"GHT"] = df.criteria_reproducibility_md[row,"GHT"] + 1
#    df.criteria_reproducibility_os[row2,"GHT"] = df.criteria_reproducibility_os[row2,"GHT"] + 1
#  }
#}
#
#if(df.best_match[pat.i,"GHT"] == T){
#  df.criteria_reproducibility_md[row,"GHT.T"] = df.criteria_reproducibility_md[row,"GHT.T"] + 1
#  df.criteria_reproducibility_os[row2,"GHT.T"] = df.criteria_reproducibility_os[row2,"GHT.T"] + 1
#
#  if(df.criteria_results[pat.j,"GHT"] == F){
#    df.criteria_reproducibility_md[row,"GHT"] = df.criteria_reproducibility_md[row,"GHT"] + 1
#    df.criteria_reproducibility_os[row2,"GHT"] = df.criteria_reproducibility_os[row2,"GHT"] + 1
#  }
#}
break
}
}
}
assign("df.criteria_reproducibility_md", df.criteria_reproducibility_md, envir = .GlobalEnv)
assign("df.criteria_reproducibility_os", df.criteria_reproducibility_os, envir = .GlobalEnv)
print(df.criteria_reproducibility_md)
print(df.criteria_reproducibility_os)
}
assignVfCriteria()
matchVfToOct()
scoreOct()
View(df.criteria_results)
#' Reproducibility
#'
#' Assigns OCT score to patient based on RNFLT, MRW, and GCLT
#' @param df.results formatted results to be used
#' @return none
#' @export
checkCriteriaReproducibility = function()
{
names_col = c("HAP2", "HAP2.T", "UKGTS", "UKGTS.T", "GHT", "GHT.T", "FOST", "FOST.T",
"LOGTS", "LOGTS.T", "EAGLE", "EAGLE.T", "AGIS", "AGIS.T")
names_row = c(">10%", "2-10%", "0.5-2%", "<0.5%")
df.criteria_reproducibility_md = data.frame(matrix(0, nrow=length(names_row), ncol=length(names_col)))
colnames(df.criteria_reproducibility_md) = names_col
rownames(df.criteria_reproducibility_md) = names_row
df.criteria_reproducibility_md = data.frame("MD"=rownames(df.criteria_reproducibility_md), df.criteria_reproducibility_md)
names_row = c("0", "1-3", "4-5", "6")
df.criteria_reproducibility_os = data.frame(matrix(0, nrow=length(names_row), ncol=length(names_col)))
colnames(df.criteria_reproducibility_os) = names_col
rownames(df.criteria_reproducibility_os) = names_row
df.criteria_reproducibility_os = data.frame("OCT.Score"=rownames(df.criteria_reproducibility_os), df.criteria_reproducibility_os)
for(pat.i in 1:nrow(df.best_match)){
row = row2 = ""
id = df.best_match[pat.i,"Patient.ID"]
eye = df.best_match[pat.i,"Eye.Vf"]
date1 = df.best_match[pat.i,"Date.Vf"]
for(pat.j in which(as.integer(df.criteria_results[,"Patient.ID"]) == id)){
date2 = as.Date.POSIXct(as.double(df.criteria_results[pat.j,"Date.Time"]))
eye2 = df.criteria_results[pat.j,"Eye"]
if((date2 > date1) && (eye2 == eye)){
md = df.best_match[pat.i,"MD.pval"]
if(is.na(md)){
row = ">10%"
}
else if(md == 0.005){
row = "<0.5%"
}
else if(md == 0.01){
row = "0.5-2%"
}
else if(md == 0.02){
row = "0.5-2%"
}
else if(md == 0.05){
row = "2-10%"
}
else if(md == 0.1){
row = "2-10%"
}
else
print("catch")
os = df.best_match[pat.i,"OCT.Score"]
if(os == 0){
row2 = "0"
}
else if(inside.range(os, c(1,3))){
row2 = "1-3"
}
else if(inside.range(os, c(4,5))){
row2 = "4-5"
}
else if(os == 6){
row2 = "6"
}
if(df.best_match[pat.i,"LOGTS"] == T){
df.criteria_reproducibility_md[row,"LOGTS.T"] = df.criteria_reproducibility_md[row,"LOGTS.T"] + 1
df.criteria_reproducibility_os[row2,"LOGTS.T"] = df.criteria_reproducibility_os[row2,"LOGTS.T"] + 1
if(df.criteria_results[pat.j,"LOGTS"] == F){
df.criteria_reproducibility_md[row,"LOGTS"] = df.criteria_reproducibility_md[row,"LOGTS"] + 1
df.criteria_reproducibility_os[row2,"LOGTS"] = df.criteria_reproducibility_os[row2,"LOGTS"] + 1
}
}
if(df.best_match[pat.i,"FOST"] == T){
df.criteria_reproducibility_md[row,"FOST.T"] = df.criteria_reproducibility_md[row,"FOST.T"] + 1
df.criteria_reproducibility_os[row2,"FOST.T"] = df.criteria_reproducibility_os[row2,"FOST.T"] + 1
if(df.criteria_results[pat.j,"FOST"] == F){
df.criteria_reproducibility_md[row,"FOST"] = df.criteria_reproducibility_md[row,"FOST"] + 1
df.criteria_reproducibility_os[row2,"FOST"] = df.criteria_reproducibility_os[row2,"FOST"] + 1
}
}
if(df.best_match[pat.i,"HAP2"] == T){
df.criteria_reproducibility_md[row,"HAP2.T"] = df.criteria_reproducibility_md[row,"HAP2.T"] + 1
df.criteria_reproducibility_os[row2,"HAP2.T"] = df.criteria_reproducibility_os[row2,"HAP2.T"] + 1
if(df.criteria_results[pat.j,"HAP2"] == F){
df.criteria_reproducibility_md[row,"HAP2"] = df.criteria_reproducibility_md[row,"HAP2"] + 1
df.criteria_reproducibility_os[row2,"HAP2"] = df.criteria_reproducibility_os[row2,"HAP2"] + 1
}
}
if(df.best_match[pat.i,"UKGTS"] == T){
df.criteria_reproducibility_md[row,"UKGTS.T"] = df.criteria_reproducibility_md[row,"UKGTS.T"] + 1
df.criteria_reproducibility_os[row2,"UKGTS.T"] = df.criteria_reproducibility_os[row2,"UKGTS.T"] + 1
if(df.criteria_results[pat.j,"UKGTS"] == F){
df.criteria_reproducibility_md[row,"UKGTS"] = df.criteria_reproducibility_md[row,"UKGTS"] + 1
df.criteria_reproducibility_os[row2,"UKGTS"] = df.criteria_reproducibility_os[row2,"UKGTS"] + 1
}
}
if(df.best_match[pat.i,"GHT"] == T){
df.criteria_reproducibility_md[row,"GHT.T"] = df.criteria_reproducibility_md[row,"GHT.T"] + 1
df.criteria_reproducibility_os[row2,"GHT.T"] = df.criteria_reproducibility_os[row2,"GHT.T"] + 1
if(df.criteria_results[pat.j,"GHT"] == F){
df.criteria_reproducibility_md[row,"GHT"] = df.criteria_reproducibility_md[row,"GHT"] + 1
df.criteria_reproducibility_os[row2,"GHT"] = df.criteria_reproducibility_os[row2,"GHT"] + 1
}
}
#if(df.best_match[pat.i,"GHT"] == T){
#  df.criteria_reproducibility_md[row,"GHT.T"] = df.criteria_reproducibility_md[row,"GHT.T"] + 1
#  df.criteria_reproducibility_os[row2,"GHT.T"] = df.criteria_reproducibility_os[row2,"GHT.T"] + 1
#
#  if(df.criteria_results[pat.j,"GHT"] == F){
#    df.criteria_reproducibility_md[row,"GHT"] = df.criteria_reproducibility_md[row,"GHT"] + 1
#    df.criteria_reproducibility_os[row2,"GHT"] = df.criteria_reproducibility_os[row2,"GHT"] + 1
#  }
#}
#
#if(df.best_match[pat.i,"GHT"] == T){
#  df.criteria_reproducibility_md[row,"GHT.T"] = df.criteria_reproducibility_md[row,"GHT.T"] + 1
#  df.criteria_reproducibility_os[row2,"GHT.T"] = df.criteria_reproducibility_os[row2,"GHT.T"] + 1
#
#  if(df.criteria_results[pat.j,"GHT"] == F){
#    df.criteria_reproducibility_md[row,"GHT"] = df.criteria_reproducibility_md[row,"GHT"] + 1
#    df.criteria_reproducibility_os[row2,"GHT"] = df.criteria_reproducibility_os[row2,"GHT"] + 1
#  }
#}
break
}
}
}
assign("df.criteria_reproducibility_md", df.criteria_reproducibility_md, envir = .GlobalEnv)
assign("df.criteria_reproducibility_os", df.criteria_reproducibility_os, envir = .GlobalEnv)
print(df.criteria_reproducibility_md)
print(df.criteria_reproducibility_os)
}
checkCriteriaReproducibility()
#' Reproducibility
#'
#' Assigns OCT score to patient based on RNFLT, MRW, and GCLT
#' @param df.results formatted results to be used
#' @return none
#' @export
checkCriteriaReproducibility = function()
{
names_col = c("HAP2", "HAP2.T", "UKGTS", "UKGTS.T", "GHT", "GHT.T", "FOST", "FOST.T",
"LOGTS", "LOGTS.T", "EAGLE", "EAGLE.T", "AGIS", "AGIS.T")
names_row = c(">10%", "2-10%", "0.5-2%", "<0.5%")
df.criteria_reproducibility_md = data.frame(matrix(0, nrow=length(names_row), ncol=length(names_col)))
colnames(df.criteria_reproducibility_md) = names_col
rownames(df.criteria_reproducibility_md) = names_row
df.criteria_reproducibility_md = data.frame("MD"=rownames(df.criteria_reproducibility_md), df.criteria_reproducibility_md)
names_row = c("0", "1-3", "4-5", "6")
df.criteria_reproducibility_os = data.frame(matrix(0, nrow=length(names_row), ncol=length(names_col)))
colnames(df.criteria_reproducibility_os) = names_col
rownames(df.criteria_reproducibility_os) = names_row
df.criteria_reproducibility_os = data.frame("OCT.Score"=rownames(df.criteria_reproducibility_os), df.criteria_reproducibility_os)
for(pat.i in 1:nrow(df.best_match)){
row = row2 = ""
id = df.best_match[pat.i,"Patient.ID"]
eye = df.best_match[pat.i,"Eye.Vf"]
date1 = df.best_match[pat.i,"Date.Vf"]
for(pat.j in which(as.integer(df.criteria_results[,"Patient.ID"]) == id)){
date2 = as.Date.POSIXct(as.double(df.criteria_results[pat.j,"Date.Time"]))
eye2 = df.criteria_results[pat.j,"Eye"]
if((date2 > date1) && (eye2 == eye)){
md = df.best_match[pat.i,"MD.pval"]
if(is.na(md)){
row = ">10%"
}
else if(md == 0.005){
row = "<0.5%"
}
else if(md == 0.01){
row = "0.5-2%"
}
else if(md == 0.02){
row = "0.5-2%"
}
else if(md == 0.05){
row = "2-10%"
}
else if(md == 0.1){
row = "2-10%"
}
else
print("catch")
os = df.best_match[pat.i,"OCT.Score"]
if(os == 0){
row2 = "0"
}
else if(inside.range(os, c(1,3))){
row2 = "1-3"
}
else if(inside.range(os, c(4,5))){
row2 = "4-5"
}
else if(os == 6){
row2 = "6"
}
if(df.best_match[pat.i,"HAP2"] == T){
df.criteria_reproducibility_md[row,"HAP2.T"] = df.criteria_reproducibility_md[row,"HAP2.T"] + 1
df.criteria_reproducibility_os[row2,"HAP2.T"] = df.criteria_reproducibility_os[row2,"HAP2.T"] + 1
if(df.criteria_results[pat.j,"HAP2"] == F){
df.criteria_reproducibility_md[row,"HAP2"] = df.criteria_reproducibility_md[row,"HAP2"] + 1
df.criteria_reproducibility_os[row2,"HAP2"] = df.criteria_reproducibility_os[row2,"HAP2"] + 1
}
}
if(df.best_match[pat.i,"UKGTS"] == T){
df.criteria_reproducibility_md[row,"UKGTS.T"] = df.criteria_reproducibility_md[row,"UKGTS.T"] + 1
df.criteria_reproducibility_os[row2,"UKGTS.T"] = df.criteria_reproducibility_os[row2,"UKGTS.T"] + 1
if(df.criteria_results[pat.j,"UKGTS"] == F){
df.criteria_reproducibility_md[row,"UKGTS"] = df.criteria_reproducibility_md[row,"UKGTS"] + 1
df.criteria_reproducibility_os[row2,"UKGTS"] = df.criteria_reproducibility_os[row2,"UKGTS"] + 1
}
}
if(df.best_match[pat.i,"GHT"] == T){
df.criteria_reproducibility_md[row,"GHT.T"] = df.criteria_reproducibility_md[row,"GHT.T"] + 1
df.criteria_reproducibility_os[row2,"GHT.T"] = df.criteria_reproducibility_os[row2,"GHT.T"] + 1
if(df.criteria_results[pat.j,"GHT"] == F){
df.criteria_reproducibility_md[row,"GHT"] = df.criteria_reproducibility_md[row,"GHT"] + 1
df.criteria_reproducibility_os[row2,"GHT"] = df.criteria_reproducibility_os[row2,"GHT"] + 1
}
}
if(df.best_match[pat.i,"FOST"] == T){
df.criteria_reproducibility_md[row,"FOST.T"] = df.criteria_reproducibility_md[row,"FOST.T"] + 1
df.criteria_reproducibility_os[row2,"FOST.T"] = df.criteria_reproducibility_os[row2,"FOST.T"] + 1
if(df.criteria_results[pat.j,"FOST"] == F){
df.criteria_reproducibility_md[row,"FOST"] = df.criteria_reproducibility_md[row,"FOST"] + 1
df.criteria_reproducibility_os[row2,"FOST"] = df.criteria_reproducibility_os[row2,"FOST"] + 1
}
}
if(df.best_match[pat.i,"LOGTS"] == T){
df.criteria_reproducibility_md[row,"LOGTS.T"] = df.criteria_reproducibility_md[row,"LOGTS.T"] + 1
df.criteria_reproducibility_os[row2,"LOGTS.T"] = df.criteria_reproducibility_os[row2,"LOGTS.T"] + 1
if(df.criteria_results[pat.j,"LOGTS"] == F){
df.criteria_reproducibility_md[row,"LOGTS"] = df.criteria_reproducibility_md[row,"LOGTS"] + 1
df.criteria_reproducibility_os[row2,"LOGTS"] = df.criteria_reproducibility_os[row2,"LOGTS"] + 1
}
}
#if(df.best_match[pat.i,"GHT"] == T){
#  df.criteria_reproducibility_md[row,"GHT.T"] = df.criteria_reproducibility_md[row,"GHT.T"] + 1
#  df.criteria_reproducibility_os[row2,"GHT.T"] = df.criteria_reproducibility_os[row2,"GHT.T"] + 1
#
#  if(df.criteria_results[pat.j,"GHT"] == F){
#    df.criteria_reproducibility_md[row,"GHT"] = df.criteria_reproducibility_md[row,"GHT"] + 1
#    df.criteria_reproducibility_os[row2,"GHT"] = df.criteria_reproducibility_os[row2,"GHT"] + 1
#  }
#}
#
#if(df.best_match[pat.i,"GHT"] == T){
#  df.criteria_reproducibility_md[row,"GHT.T"] = df.criteria_reproducibility_md[row,"GHT.T"] + 1
#  df.criteria_reproducibility_os[row2,"GHT.T"] = df.criteria_reproducibility_os[row2,"GHT.T"] + 1
#
#  if(df.criteria_results[pat.j,"GHT"] == F){
#    df.criteria_reproducibility_md[row,"GHT"] = df.criteria_reproducibility_md[row,"GHT"] + 1
#    df.criteria_reproducibility_os[row2,"GHT"] = df.criteria_reproducibility_os[row2,"GHT"] + 1
#  }
#}
break
}
}
}
assign("df.criteria_reproducibility_md", df.criteria_reproducibility_md, envir = .GlobalEnv)
assign("df.criteria_reproducibility_os", df.criteria_reproducibility_os, envir = .GlobalEnv)
print(df.criteria_reproducibility_md)
print(df.criteria_reproducibility_os)
}
checkCriteriaReproducibility()
printClusteredHist(x_var = "rmd")
df.criteria_reproducibility_md[,c("HAP2","UKGTS","GHT","FOST","LOGTS")]
df.criteria_reproducibility_md
matchVfToOct2()
scoreOct()
checkCriteriaReproducibility()
printClusteredHist(x_var = "md")
printClusteredHist(x_var = "os")
printClusteredHist(x_var = "ros")
printClusteredHist(x_var = "rmd")
matchVfToOct()
scoreOct()
checkCriteriaReproducibility()
printClusteredHist(x_var="md")
as.POSIXct(df.mrw_data[1,"ExamDate"])
View(df.mrw_data)
matchVfToOct()
View(df.mrw_data)
scoreOct()
checkCriteriaReproducibility()
printClusteredHist(x_var = "md")
printClusteredHist(x_var = "os")
printClusteredHist(x_var = "rmd")
printClusteredHist(x_var = "ros")
printFigure1()
df.interx
printFigure2()
df.interx
rm(df.melted)
rm(mtx.rnfl)
printFigure1()
