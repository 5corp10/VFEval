}
else if(inside.range(os, c(1,3))){
df.results_os_13 = rbind(df.results_os_13, df.results[pat,col_range])
}
else if(inside.range(os, c(4,5))){
df.results_os_45 = rbind(df.results_os_45, df.results[pat,col_range])
}
else if(os == 6){
df.results_os_6 = rbind(df.results_os_6, df.results[pat,col_range])
}
}
ls.results_os = list(df.results_os_6, df.results_os_45, df.results_os_13, df.results_os_0)
par(mfrow=c(2,2), mar=c(0.2,0.2,0.2,0.2))
for(i in 1:length(ls.results_os)){
printEulerDiag(os_subgroups[i], as.data.frame(ls.results_os[i]))
}
p = recordPlot()
dev.off()
h = printClusteredHist(df.results, "os")
plot_grid(p, h, ncol = 1, labels = c("", ""))
}
#' Euler diagram
#'
#' Print euler diagram (i.e. weighted venn diagram) for the overlapping criteria results groups
#' @export
printEulerDiag = function(var_category = "all", df.results = df.best_match)
{
f = m = u = g = f_m = f_u = f_g = m_u = m_g = u_g = f_m_u = f_m_g = f_u_g = m_u_g = f_m_u_g = o = 0
for(pat in 1:nrow(df.results)){
#print(pat)
if((df.results[pat,"FOST"] == T) && (df.results[pat,"MHPA"] == T) && (df.results[pat,"UKGTS"] == T) && (df.results[pat,"GHT"] == T))
f_m_u_g = f_m_u_g + 1
else if ((df.results[pat,"FOST"] == T) && (df.results[pat,"MHPA"] == T) && (df.results[pat,"UKGTS"] == T))
f_m_u = f_m_u + 1
else if ((df.results[pat,"FOST"] == T) && (df.results[pat,"MHPA"] == T) && (df.results[pat,"GHT"] == T))
f_m_g = f_m_g + 1
else if ((df.results[pat,"FOST"] == T) && (df.results[pat,"UKGTS"] == T) && (df.results[pat,"GHT"] == T))
f_u_g = f_u_g + 1
else if ((df.results[pat,"MHPA"] == T) && (df.results[pat,"UKGTS"] == T) && (df.results[pat,"GHT"] == T))
m_u_g = m_u_g + 1
else if ((df.results[pat,"FOST"] == T) && (df.results[pat,"MHPA"] == T))
f_m = f_m + 1
else if ((df.results[pat,"FOST"] == T) && (df.results[pat,"UKGTS"] == T))
f_u = f_u + 1
else if ((df.results[pat,"FOST"] == T) && (df.results[pat,"GHT"] == T))
f_g = f_g + 1
else if ((df.results[pat,"MHPA"] == T) && (df.results[pat,"UKGTS"] == T))
m_u = m_u + 1
else if ((df.results[pat,"MHPA"] == T) && (df.results[pat,"GHT"] == T))
m_g = m_g + 1
else if ((df.results[pat,"UKGTS"] == T) && (df.results[pat,"GHT"] == T))
u_g = u_g + 1
else if ((df.results[pat,"FOST"] == T))
f = f + 1
else if ((df.results[pat,"MHPA"] == T))
m = m + 1
else if ((df.results[pat,"UKGTS"] == T))
u = u + 1
else if ((df.results[pat,"GHT"] == T))
g = g + 1
else
o = o + 1
}
areas = c("FOST"=f, "MHPA"=m, "UKGTS"=u, "GHT"=g,
"FOST&MHPA"=f_m, "FOST&UKGTS"=f_u, "FOST&GHT"=f_g, "MHPA&UKGTS"=m_u, "MHPA&GHT"=m_g, "UKGTS&GHT"=u_g,
"FOST&MHPA&UKGTS"=f_m_u, "FOST&MHPA&GHT"=f_m_g, "FOST&UKGTS&GHT"=f_u_g, "MHPA&UKGTS&GHT"=m_u_g,
"FOST&MHPA&UKGTS&GHT"=f_m_u_g)
#areas = c("F1"=0,"M1"=0,"U1"=0,"G1"=0,"F1&M1"=0,"F1&U1"=0,"F1&G1"=0,"M1&U1"=0,"M1&G1"=0,"U1&G1"=0,"F1&M1&U1"=0,"F1&M1&G1"=0,"F1&U1&G1"=0,"M1&U1&G1"=0,"F1&M1&U1&G1"=0,
#          "F2"=0,"M2"=0,"U2"=0,"G2"=0,"F2&M2"=0,"F2&U2"=0,"F2&G2"=0,"M2&U2"=0,"M2&G2"=0,"U2&G2"=0,"F2&M2&U2"=0,"F2&M2&G2"=0,"F2&U2&G2"=0,"M2&U2&G2"=0,"F2&M2&U2&G2"=0,
#          "F3"=0,"M3"=0,"U3"=0,"G3"=0,"F3&M3"=0,"F3&U3"=0,"F3&G3"=0,"M3&U3"=0,"M3&G3"=0,"U3&G3"=0,"F3&M3&U3"=0,"F3&M3&G3"=0,"F3&U3&G3"=0,"M3&U3&G3"=0,"F3&M3&U3&G3"=0,
#          "F4"=0,"M4"=0,"U4"=0,"G4"=0,"F4&M4"=0,"F4&U4"=0,"F4&G4"=0,"M4&U4"=0,"M4&G4"=0,"U4&G4"=0,"F4&M4&U4"=0,"F4&M4&G4"=0,"F4&U4&G4"=0,"M4&U4&G4"=0,"F4&M4&U4&G4"=0,
#          "F5"=0,"M5"=0,"U5"=0,"G5"=0,"F5&M5"=0,"F5&U5"=0,"F5&G5"=0,"M5&U5"=0,"M5&G5"=0,"U5&G5"=0,"F5&M5&U5"=0,"F5&M5&G5"=0,"F5&U5&G5"=0,"M5&U5&G5"=0,"F5&M5&U5&G5"=0,
#          "F6"=0,"M6"=0,"U6"=0,"G6"=0,"F6&M6"=0,"F6&U6"=0,"F6&G6"=0,"M6&U6"=0,"M6&G6"=0,"U6&G6"=0,"F6&M6&U6"=0,"F6&M6&G6"=0,"F6&U6&G6"=0,"M6&U6&G6"=0,"F6&M6&U6&G6"=0)
df.interx[,var_category] <<- c(f, m, u, g, f_m, f_u, f_g, m_u, m_g, u_g, f_m_u, f_m_g, f_u_g, m_u_g, f_m_u_g, o)
v = venneuler(areas)
v$labels <- c("", "", "", "")
plot(v)
text(.5, 0.1, var_category, cex=2)
#text(.4, 0.9, paste0("F&G&M&U(grey) = ", f_m_u_g), cex=1)
#text(.4, 0.85, paste0("M&U(green) = ", m_u), cex=1)
#text(.6, 0.9, paste0("M(yellow) = ", m), cex=1)
#text(.6, 0.85, paste0("U(blue) = ", u), cex=1)
}
#' Intersetion bar graph
#'
#' Print intersection bar graph to compare overlapping criteria results groups
#' @export
printIntersectionBarGraph = function(df.results = df.best_match)
{
fost = double(1)
mhpa = double(1)
ukgts = double(1)
ght = double(1)
i = 1
j = 1
k = 1
l = 1
for(pat in 1:NUM_PAT){
if(df.results[pat,"FOST"] == T){
fost[i] = pat
i = i + 1
}
if(df.results[pat,"MHPA"] == T){
mhpa[j] = pat
j = j + 1
}
if(df.results[pat,"UKGTS"] == T){
ukgts[k] = pat
k = k + 1
}
if(df.results[pat,"GHT"] == T){
ght[l] = pat
l = l + 1
}
}
list_input = list("FOST" = fost, "MHPA" = mhpa, "UKGTS" = ukgts, "GHT" = ght)
upset(fromList(list_input), sets = c("GHT", "UKGTS", "MHPA", "FOST"), keep.order = T, empty.intersections = T, order.by = "freq", text.scale = 2)
}
printFigure2()
library(VFEval)
View(printClusteredHist)
printFigure1()
#import libraries
library("tidyverse")
library("dplyr")
library("ggplot2")
library("readxl")
library("devtools")
library("roxygen2")
library("cowplot")
library("UpSetR")
library("readxl")
library("venneuler")
library("reshape2")
library("scales")
library("spatstat.utils")
printFigure1()
library("grid", lib.loc="C:/Program Files/R/R-3.5.2/library")
printFigure1()
library("gridExtra", lib.loc="~/R/win-library/3.5")
printFigure1()
library("ggplot2", lib.loc="~/R/win-library/3.5")
printFigure1()
#' Euler diagram
#'
#' Print euler diagram (i.e. weighted venn diagram) for the overlapping criteria results groups
#' @export
printEulerDiag = function(var_category = "all", df.results = df.best_match)
{
f = m = u = g = f_m = f_u = f_g = m_u = m_g = u_g = f_m_u = f_m_g = f_u_g = m_u_g = f_m_u_g = o = 0
for(pat in 1:nrow(df.results)){
#print(pat)
if((df.results[pat,"FOST"] == T) && (df.results[pat,"MHPA"] == T) && (df.results[pat,"UKGTS"] == T) && (df.results[pat,"GHT"] == T))
f_m_u_g = f_m_u_g + 1
else if ((df.results[pat,"FOST"] == T) && (df.results[pat,"MHPA"] == T) && (df.results[pat,"UKGTS"] == T))
f_m_u = f_m_u + 1
else if ((df.results[pat,"FOST"] == T) && (df.results[pat,"MHPA"] == T) && (df.results[pat,"GHT"] == T))
f_m_g = f_m_g + 1
else if ((df.results[pat,"FOST"] == T) && (df.results[pat,"UKGTS"] == T) && (df.results[pat,"GHT"] == T))
f_u_g = f_u_g + 1
else if ((df.results[pat,"MHPA"] == T) && (df.results[pat,"UKGTS"] == T) && (df.results[pat,"GHT"] == T))
m_u_g = m_u_g + 1
else if ((df.results[pat,"FOST"] == T) && (df.results[pat,"MHPA"] == T))
f_m = f_m + 1
else if ((df.results[pat,"FOST"] == T) && (df.results[pat,"UKGTS"] == T))
f_u = f_u + 1
else if ((df.results[pat,"FOST"] == T) && (df.results[pat,"GHT"] == T))
f_g = f_g + 1
else if ((df.results[pat,"MHPA"] == T) && (df.results[pat,"UKGTS"] == T))
m_u = m_u + 1
else if ((df.results[pat,"MHPA"] == T) && (df.results[pat,"GHT"] == T))
m_g = m_g + 1
else if ((df.results[pat,"UKGTS"] == T) && (df.results[pat,"GHT"] == T))
u_g = u_g + 1
else if ((df.results[pat,"FOST"] == T))
f = f + 1
else if ((df.results[pat,"MHPA"] == T))
m = m + 1
else if ((df.results[pat,"UKGTS"] == T))
u = u + 1
else if ((df.results[pat,"GHT"] == T))
g = g + 1
else
o = o + 1
}
areas = c("FOST"=f, "MHPA"=m, "UKGTS"=u, "GHT"=g,
"FOST&MHPA"=f_m, "FOST&UKGTS"=f_u, "FOST&GHT"=f_g, "MHPA&UKGTS"=m_u, "MHPA&GHT"=m_g, "UKGTS&GHT"=u_g,
"FOST&MHPA&UKGTS"=f_m_u, "FOST&MHPA&GHT"=f_m_g, "FOST&UKGTS&GHT"=f_u_g, "MHPA&UKGTS&GHT"=m_u_g,
"FOST&MHPA&UKGTS&GHT"=f_m_u_g)
#areas = c("F1"=0,"M1"=0,"U1"=0,"G1"=0,"F1&M1"=0,"F1&U1"=0,"F1&G1"=0,"M1&U1"=0,"M1&G1"=0,"U1&G1"=0,"F1&M1&U1"=0,"F1&M1&G1"=0,"F1&U1&G1"=0,"M1&U1&G1"=0,"F1&M1&U1&G1"=0,
#          "F2"=0,"M2"=0,"U2"=0,"G2"=0,"F2&M2"=0,"F2&U2"=0,"F2&G2"=0,"M2&U2"=0,"M2&G2"=0,"U2&G2"=0,"F2&M2&U2"=0,"F2&M2&G2"=0,"F2&U2&G2"=0,"M2&U2&G2"=0,"F2&M2&U2&G2"=0,
#          "F3"=0,"M3"=0,"U3"=0,"G3"=0,"F3&M3"=0,"F3&U3"=0,"F3&G3"=0,"M3&U3"=0,"M3&G3"=0,"U3&G3"=0,"F3&M3&U3"=0,"F3&M3&G3"=0,"F3&U3&G3"=0,"M3&U3&G3"=0,"F3&M3&U3&G3"=0,
#          "F4"=0,"M4"=0,"U4"=0,"G4"=0,"F4&M4"=0,"F4&U4"=0,"F4&G4"=0,"M4&U4"=0,"M4&G4"=0,"U4&G4"=0,"F4&M4&U4"=0,"F4&M4&G4"=0,"F4&U4&G4"=0,"M4&U4&G4"=0,"F4&M4&U4&G4"=0,
#          "F5"=0,"M5"=0,"U5"=0,"G5"=0,"F5&M5"=0,"F5&U5"=0,"F5&G5"=0,"M5&U5"=0,"M5&G5"=0,"U5&G5"=0,"F5&M5&U5"=0,"F5&M5&G5"=0,"F5&U5&G5"=0,"M5&U5&G5"=0,"F5&M5&U5&G5"=0,
#          "F6"=0,"M6"=0,"U6"=0,"G6"=0,"F6&M6"=0,"F6&U6"=0,"F6&G6"=0,"M6&U6"=0,"M6&G6"=0,"U6&G6"=0,"F6&M6&U6"=0,"F6&M6&G6"=0,"F6&U6&G6"=0,"M6&U6&G6"=0,"F6&M6&U6&G6"=0)
df.interx[,var_category] <<- c(f, m, u, g, f_m, f_u, f_g, m_u, m_g, u_g, f_m_u, f_m_g, f_u_g, m_u_g, f_m_u_g, o)
v = venneuler(areas)
v$labels <- c("", "", "", "")
plot(v)
text(.5, 0.1, var_category, cex=2)
#text(.4, 0.9, paste0("F&G&M&U(grey) = ", f_m_u_g), cex=1)
#text(.4, 0.85, paste0("M&U(green) = ", m_u), cex=1)
#text(.6, 0.9, paste0("M(yellow) = ", m), cex=1)
#text(.6, 0.85, paste0("U(blue) = ", u), cex=1)
}
#' Clustered histogram for MD and criteria results
#'
#' Print histogram where criteria (Foster, MHPA, UKGTS, and GHT) results are clustered within their MD percentiles (10, 5, 2, 1, and 0.5 %)
#' @export
printClusteredHist = function(df.results = df.best_match, x_var = "os", percentage.weight = FALSE)
{
if(x_var == "os"){
# create data frame to house graph variables
df.results_os_cluster = data.frame("OCT.Score"=1:4, "FOST"=1:4, "MHPA"=1:4, "UKGTS"=1:4, "GHT"=1:4, "NUM"=1:4)
df.results_os_cluster[,1] = c("6", "4-5", "1-3", "0")
for(row in 1:nrow(df.results_os_cluster)){
for(col in 2:ncol(df.results_os_cluster)){
df.results_os_cluster[row,col] = 0
}
}
for(pat in 1:nrow(df.results)){
os = df.results[pat,"OCT.Score"]
#print(os)
if(os == 0){
row = 4
}
else if(inside.range(os, c(1,3))){
row = 3
}
else if(inside.range(os, c(4,5))){
row = 2
}
else if(os == 6){
row = 1
}
df.results_os_cluster[row,6] = df.results_os_cluster[row,6] + 1
for(col in c("FOST", "UKGTS", "MHPA", "GHT")){
#print(pat)
if(df.results[pat,col] == T)
df.results_os_cluster[row,col] = df.results_os_cluster[row,col] + 1
}
}
assign("df.results_os_cluster", df.results_os_cluster, envir = .GlobalEnv)
for(row in 1:nrow(df.results_os_cluster)){
df.results_os_cluster[row,1] = paste0(df.results_os_cluster[row,1], "\nN=", df.results_os_cluster[row,6])
}
df.results_os_cluster = within(df.results_os_cluster,  OCT.Score <- factor(OCT.Score, levels=OCT.Score))
for(row in 1:nrow(df.results_os_cluster)){
for(col in 2:6){
df.results_os_cluster[row,col] = round(df.results_os_cluster[row,col] / df.results_os_cluster[row,6], digits=2)
}
}
melted = melt(df.results_os_cluster[,1:5], variable.name = "criterion", value.name = "fraction")
plot.hist = ggplot(melted, aes(OCT.Score, fraction)) +
geom_bar(aes(fill = criterion, group = criterion), position = "dodge", stat = "identity") +
geom_text(aes(label = fraction, group = criterion), size=4, hjust=0.5, vjust=-0.5, position=position_dodge(width = 1))
}
else if(x_var == "md"){
# create data frame to house graph variables
df.results_md_cluster = data.frame("MD"=1:6, "FOST"=1:6, "MHPA"=1:6, "UKGTS"=1:6, "GHT"=1:6, "NUM"=1:6)
df.results_md_cluster[,1] = c("<0.5%", "<1%", "<2%", "<5%", "<10%", ">10%")
for(row in 1:nrow(df.results_md_cluster)){
for(col in 2:ncol(df.results_md_cluster)){
df.results_md_cluster[row,col] = 0
}
}
for(pat in 1:nrow(df.results)){
md = df.results[pat,"MD"]
#print(md)
if(is.na(md)){
row = 6
}
else if(md == 0.005){
row = 1
}
else if(md == 0.01){
row = 2
}
else if(md == 0.02){
row = 3
}
else if(md == 0.05){
row = 4
}
else if(md == 0.1){
row = 5
}
df.results_md_cluster[row,6] = df.results_md_cluster[row,6] + 1
for(col in c("FOST", "UKGTS", "MHPA", "GHT")){
#print(pat)
if(df.results[pat,col] == T)
df.results_md_cluster[row,col] = df.results_md_cluster[row,col] + 1
}
}
assign("df.results_md_cluster", df.results_md_cluster, envir = .GlobalEnv)
for(row in 1:nrow(df.results_md_cluster)){
df.results_md_cluster[row,1] = paste0(df.results_md_cluster[row,1], "\nN=", df.results_md_cluster[row,6])
}
df.results_md_cluster = within(df.results_md_cluster,  MD <- factor(MD, levels=MD))
for(row in 1:6){
for(col in 2:6){
df.results_md_cluster[row,col] = round(df.results_md_cluster[row,col] / df.results_md_cluster[row,6], digits=2)
}
}
melted = melt(df.results_md_cluster[,1:5], variable.name = "criterion", value.name = "fraction")
plot.hist = ggplot(melted, aes(MD, fraction)) +
geom_bar(aes(fill = criterion, group = criterion), position = "dodge", stat = "identity") +
geom_text(aes(label = fraction, group = criterion), size=4, hjust=0.5, vjust=-0.5, position=position_dodge(width = 1))
}
return(plot.hist)
}
#' Euler & Clustered Histo for MD subgroups
#'
#' Print Euler diagrams and Clustered Histogram for each fo the MD percentiles (10, 5, 2, 1, and 0.5 %)
#' @export
printFigure1 = function(df.results=df.best_match)
{
md_subgroups = c("<0.5%", "<1.0%", "<2.0%", "<5.0%", "<10.0%", ">10.0%")
df.results_md_05 = df.results_md_1 = df.results_md_2 = df.results_md_5 = df.results_md_10 = df.results_md_11 = data.frame(FOST=logical(), MHPA=logical(), UKGTS=logical(), GHT=logical())
df.interx = data.frame(matrix(NA, nrow = 16, ncol = 6))
rownames(df.interx) = c("FOST", "MHPA", "UKGTS", "GHT", "FOST&MHPA", "FOST&UKGTS", "FOST&GHT", "MHPA&UKGTS", "MHPA&GHT", "UKGTS&GHT",
"FOST&MHPA&UKGTS", "FOST&MHPA&GHT", "FOST&UKGTS&GHT", "MHPA&UKGTS&GHT", "FOST&MHPA&UKGTS&GHT", "Neither")
colnames(df.interx) = md_subgroups
assign("df.interx", df.interx, envir = .GlobalEnv)
col_range = which(colnames(df.results)=="FOST"):which(colnames(df.results)=="GHT")
for(pat in 1:nrow(df.results)){
md = df.results[pat,"MD"]
if(is.na(md)){
df.results_md_11 = rbind(df.results_md_11, df.results[pat,col_range])
}
else if(md == 0.005){
df.results_md_05 = rbind(df.results_md_05, df.results[pat,col_range])
}
else if(md == 0.01){
df.results_md_1 = rbind(df.results_md_1, df.results[pat,col_range])
}
else if(md == 0.02){
df.results_md_2 = rbind(df.results_md_2, df.results[pat,col_range])
}
else if(md == 0.05){
df.results_md_5 = rbind(df.results_md_5, df.results[pat,col_range])
}
else if(md == 0.1){
df.results_md_10 = rbind(df.results_md_10, df.results[pat,col_range])
}
}
ls.results_md = list(df.results_md_05, df.results_md_1, df.results_md_2, df.results_md_5, df.results_md_10, df.results_md_11)
par(mfrow=c(2,3), mar=c(0.2,0.2,0.2,0.2))
for(i in 1:length(ls.results_md)){
printEulerDiag(md_subgroups[i], as.data.frame(ls.results_md[i]))
}
p = recordPlot()
dev.off()
h = printClusteredHist(df.results, "md")
plot_grid(p, h, ncol = 1, labels = c("", ""))
}
#' Euler & Clustered Histo for OCT Score subgroups
#'
#' Print Euler diagrams and Clustered Histogram for each fo the OCT scores (0-6)
#' @export
printFigure2 = function(df.results=df.best_match)
{
os_subgroups = c("6", "4-5", "1-3", "0")
df.results_os_0 = df.results_os_13 = df.results_os_45 = df.results_os_6 = data.frame(FOST=logical(), MHPA=logical(), UKGTS=logical(), GHT=logical())
df.interx = data.frame(matrix(NA, nrow = 16, ncol = 6))
rownames(df.interx) = c("FOST", "MHPA", "UKGTS", "GHT", "FOST&MHPA", "FOST&UKGTS", "FOST&GHT", "MHPA&UKGTS", "MHPA&GHT", "UKGTS&GHT",
"FOST&MHPA&UKGTS", "FOST&MHPA&GHT", "FOST&UKGTS&GHT", "MHPA&UKGTS&GHT", "FOST&MHPA&UKGTS&GHT", "Neither")
colnames(df.interx) = os_subgroups
assign("df.interx", df.interx, envir = .GlobalEnv)
col_range = which(colnames(df.results)=="FOST"):which(colnames(df.results)=="GHT")
for(pat in 1:nrow(df.results)){
os = df.results[pat,"OCT.Score"]
if(os == 0){
df.results_os_0 = rbind(df.results_os_0, df.results[pat,col_range])
}
else if(inside.range(os, c(1,3))){
df.results_os_13 = rbind(df.results_os_13, df.results[pat,col_range])
}
else if(inside.range(os, c(4,5))){
df.results_os_45 = rbind(df.results_os_45, df.results[pat,col_range])
}
else if(os == 6){
df.results_os_6 = rbind(df.results_os_6, df.results[pat,col_range])
}
}
ls.results_os = list(df.results_os_6, df.results_os_45, df.results_os_13, df.results_os_0)
par(mfrow=c(2,2), mar=c(0.2,0.2,0.2,0.2))
for(i in 1:length(ls.results_os)){
printEulerDiag(os_subgroups[i], as.data.frame(ls.results_os[i]))
}
p = recordPlot()
dev.off()
h = printClusteredHist(df.results, "os")
plot_grid(p, h, ncol = 1, labels = c("", ""))
}
View(df.results_os_cluster)
printFigure1()
?plot_grid
library("cowplot", lib.loc="~/R/win-library/3.5")
printFigure1()
#' Euler & Clustered Histo for MD subgroups
#'
#' Print Euler diagrams and Clustered Histogram for each fo the MD percentiles (10, 5, 2, 1, and 0.5 %)
#' @export
printFigure1 = function(df.results=df.best_match)
{
md_subgroups = c("<0.5%", "<1.0%", "<2.0%", "<5.0%", "<10.0%", ">10.0%")
df.results_md_05 = df.results_md_1 = df.results_md_2 = df.results_md_5 = df.results_md_10 = df.results_md_11 = data.frame(FOST=logical(), MHPA=logical(), UKGTS=logical(), GHT=logical())
df.interx = data.frame(matrix(NA, nrow = 16, ncol = 6))
rownames(df.interx) = c("FOST", "MHPA", "UKGTS", "GHT", "FOST&MHPA", "FOST&UKGTS", "FOST&GHT", "MHPA&UKGTS", "MHPA&GHT", "UKGTS&GHT",
"FOST&MHPA&UKGTS", "FOST&MHPA&GHT", "FOST&UKGTS&GHT", "MHPA&UKGTS&GHT", "FOST&MHPA&UKGTS&GHT", "Neither")
colnames(df.interx) = md_subgroups
assign("df.interx", df.interx, envir = .GlobalEnv)
col_range = which(colnames(df.results)=="FOST"):which(colnames(df.results)=="GHT")
for(pat in 1:nrow(df.results)){
md = df.results[pat,"MD"]
if(is.na(md)){
df.results_md_11 = rbind(df.results_md_11, df.results[pat,col_range])
}
else if(md == 0.005){
df.results_md_05 = rbind(df.results_md_05, df.results[pat,col_range])
}
else if(md == 0.01){
df.results_md_1 = rbind(df.results_md_1, df.results[pat,col_range])
}
else if(md == 0.02){
df.results_md_2 = rbind(df.results_md_2, df.results[pat,col_range])
}
else if(md == 0.05){
df.results_md_5 = rbind(df.results_md_5, df.results[pat,col_range])
}
else if(md == 0.1){
df.results_md_10 = rbind(df.results_md_10, df.results[pat,col_range])
}
}
ls.results_md = list(df.results_md_05, df.results_md_1, df.results_md_2, df.results_md_5, df.results_md_10, df.results_md_11)
par(mfrow=c(2,3), mar=c(0.2,0.2,0.2,0.2))
for(i in 1:length(ls.results_md)){
printEulerDiag(md_subgroups[i], as.data.frame(ls.results_md[i]))
}
p = recordPlot()
#dev.off()
#h = printClusteredHist(df.results, "md")
#plot_grid(p, h, ncol = 1, labels = c("", ""))
}
printFigure1()
#' Euler & Clustered Histo for MD subgroups
#'
#' Print Euler diagrams and Clustered Histogram for each fo the MD percentiles (10, 5, 2, 1, and 0.5 %)
#' @export
printFigure1 = function(df.results=df.best_match)
{
md_subgroups = c("<0.5%", "<1.0%", "<2.0%", "<5.0%", "<10.0%", ">10.0%")
df.results_md_05 = df.results_md_1 = df.results_md_2 = df.results_md_5 = df.results_md_10 = df.results_md_11 = data.frame(FOST=logical(), MHPA=logical(), UKGTS=logical(), GHT=logical())
df.interx = data.frame(matrix(NA, nrow = 16, ncol = 6))
rownames(df.interx) = c("FOST", "MHPA", "UKGTS", "GHT", "FOST&MHPA", "FOST&UKGTS", "FOST&GHT", "MHPA&UKGTS", "MHPA&GHT", "UKGTS&GHT",
"FOST&MHPA&UKGTS", "FOST&MHPA&GHT", "FOST&UKGTS&GHT", "MHPA&UKGTS&GHT", "FOST&MHPA&UKGTS&GHT", "Neither")
colnames(df.interx) = md_subgroups
assign("df.interx", df.interx, envir = .GlobalEnv)
col_range = which(colnames(df.results)=="FOST"):which(colnames(df.results)=="GHT")
for(pat in 1:nrow(df.results)){
md = df.results[pat,"MD"]
if(is.na(md)){
df.results_md_11 = rbind(df.results_md_11, df.results[pat,col_range])
}
else if(md == 0.005){
df.results_md_05 = rbind(df.results_md_05, df.results[pat,col_range])
}
else if(md == 0.01){
df.results_md_1 = rbind(df.results_md_1, df.results[pat,col_range])
}
else if(md == 0.02){
df.results_md_2 = rbind(df.results_md_2, df.results[pat,col_range])
}
else if(md == 0.05){
df.results_md_5 = rbind(df.results_md_5, df.results[pat,col_range])
}
else if(md == 0.1){
df.results_md_10 = rbind(df.results_md_10, df.results[pat,col_range])
}
}
ls.results_md = list(df.results_md_05, df.results_md_1, df.results_md_2, df.results_md_5, df.results_md_10, df.results_md_11)
par(mfrow=c(2,3), mar=c(0.2,0.2,0.2,0.2))
for(i in 1:length(ls.results_md)){
printEulerDiag(md_subgroups[i], as.data.frame(ls.results_md[i]))
}
p = recordPlot()
dev.off()
h = printClusteredHist(df.results, "md")
plot_grid(p, h, ncol = 1, labels = c("", ""))
}
printFigure1()
View(df.results_md_cluster)
View(df.interx)
printFigure2()
library("spatstat.utils")
install.packages(c("spatstat.utils", "scales"))
library("spatstat.utils")
printFigure2()
library("venneuler")
#import libraries
library("tidyverse")
library("dplyr")
install.packages(c("tidyverse", "dplyr"))
printFigure2()
library("reshape2")
printFigure2()
library("ggplot2")
library("cowplot")
printFigure2()
View(df.interx)
View(df.best_match)
