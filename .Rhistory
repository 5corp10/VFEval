"GCL.ABN.Global", "GCL.ABN.Sup", "GCL.ABN.TS", "GCL.ABN.NS", "GCL.ABN.Inf", "GCL.ABN.NI", "GCL.ABN.TI")
time_bound = 2592000*window
for(vf.v in ls.criteria_results.unique){
mtx.rnfl = matrix(integer(), nrow = 0, ncol = 4)
colnames(mtx.rnfl) = c("vf.i", "i", "eye", "q")
mtx.mrw = matrix(integer(), nrow = 0, ncol = 4)
colnames(mtx.mrw) = c("vf.i", "i", "eye", "q")
mtx.gcl = matrix(integer(), nrow = 0, ncol = 4)
colnames(mtx.gcl) = c("vf.i", "i", "eye", "q")
mtx.max = matrix(integer(), nrow = 0, ncol = 7)
colnames(mtx.max) = c("vf.i", "rnfl.i", "mrw.i", "gcl.i","rnfl.q", "mrw.q", "gcl.q")
for(vf.i in which(df.criteria_results[,"Patient.ID"] == vf.v)){
if(df.criteria_results[vf.i,"Eye"] == "L")
vf.eye = 1
else
vf.eye = 2
vf.epoch = as.integer(df.criteria_results[vf.i,"Date.Time"])
vf.epoch.upper_bound = vf.epoch + time_bound
vf.epoch.lower_bound = vf.epoch - time_bound
for(rnfl.i in which(df.rnfl_data[,"StudyID"] == vf.v)){
rnfl.eye = as.integer(df.rnfl_data[rnfl.i,"Eye"])
rnfl.epoch = as.integer(as.POSIXct(df.rnfl_data[rnfl.i,"ExamDate"]))
if((rnfl.eye == vf.eye) && inside.range(rnfl.epoch, c(vf.epoch.lower_bound, vf.epoch.upper_bound))){
mtx.rnfl = rbind(mtx.rnfl, c(vf.i, rnfl.i, rnfl.eye, df.rnfl_data[rnfl.i,"Quality"]))
}
}
for(mrw.i in which(df.mrw_data[,"StudyID"] == vf.v)){
mrw.eye = as.integer(df.mrw_data[mrw.i,"Eye"])
mrw.epoch = as.integer(as.POSIXct(df.mrw_data[mrw.i,"ExamDate"]))
if((mrw.eye == vf.eye) && inside.range(mrw.epoch, c(vf.epoch.lower_bound, vf.epoch.upper_bound))){
mtx.mrw = rbind(mtx.mrw, c(vf.i, mrw.i, mrw.eye, df.mrw_data[mrw.i,"Mean.Quality"]))
}
}
for(gcl.i in which(df.gcl_data[,"StudyID"] == vf.v)){
gcl.eye = as.integer(df.gcl_data[gcl.i,"Eye"])
gcl.epoch = df.gcl_data[gcl.i,"ExamDate"]
if((gcl.eye == vf.eye) && inside.range(gcl.epoch, c(vf.epoch.lower_bound, vf.epoch.upper_bound))){
mtx.gcl = rbind(mtx.gcl, c(vf.i, gcl.i, gcl.eye, df.gcl_data[gcl.i,"Quality"]))
}
}
}
for(vf.i in unique(mtx.rnfl[,"vf.i"])){
#if(length(which(mtx.mrw[,"vf.i"] == vf.i)) && length(which(mtx.gcl[,"vf.i"] == vf.i))){
rnfl.j = which((mtx.rnfl[,"vf.i"] == vf.i) & (mtx.rnfl[,"eye"] == 1))[which.max(mtx.rnfl[which((mtx.rnfl[,"vf.i"] == vf.i) & (mtx.rnfl[,"eye"] == 1)), "q"])]
mrw.j  = which((mtx.mrw [,"vf.i"] == vf.i) & (mtx.mrw [,"eye"] == 1))[which.max(mtx.mrw [which((mtx.mrw [,"vf.i"] == vf.i) & (mtx.mrw [,"eye"] == 1)), "q"])]
gcl.j  = which((mtx.gcl [,"vf.i"] == vf.i) & (mtx.gcl [,"eye"] == 1))[which.max(mtx.gcl [which((mtx.gcl [,"vf.i"] == vf.i) & (mtx.gcl [,"eye"] == 1)), "q"])]
if(length(rnfl.j) && length(mrw.j) && length(gcl.j))
mtx.max = rbind(mtx.max, c(vf.i, mtx.rnfl[rnfl.j,"i"], mtx.mrw[mrw.j,"i"], mtx.gcl[gcl.j,"i"],
mtx.rnfl[rnfl.j,"q"], mtx.mrw[mrw.j,"q"], mtx.gcl[gcl.j,"q"]))
rnfl.j = which((mtx.rnfl[,"vf.i"] == vf.i) & (mtx.rnfl[,"eye"] == 2))[which.max(mtx.rnfl[which((mtx.rnfl[,"vf.i"] == vf.i) & (mtx.rnfl[,"eye"] == 2)), "q"])]
mrw.j  = which((mtx.mrw [,"vf.i"] == vf.i) & (mtx.mrw [,"eye"] == 2))[which.max(mtx.mrw [which((mtx.mrw [,"vf.i"] == vf.i) & (mtx.mrw [,"eye"] == 2)), "q"])]
gcl.j  = which((mtx.gcl [,"vf.i"] == vf.i) & (mtx.gcl [,"eye"] == 2))[which.max(mtx.gcl [which((mtx.gcl [,"vf.i"] == vf.i) & (mtx.gcl [,"eye"] == 2)), "q"])]
if(length(rnfl.j) && length(mrw.j) && length(gcl.j))
mtx.max = rbind(mtx.max, c(vf.i, mtx.rnfl[rnfl.j,"i"], mtx.mrw[mrw.j,"i"], mtx.gcl[gcl.j,"i"],
mtx.rnfl[rnfl.j,"q"], mtx.mrw[mrw.j,"q"], mtx.gcl[gcl.j,"q"]))
#}
}
idx = which.max(as.integer(mtx.max[,"rnfl.q"]) + as.integer(mtx.max[,"mrw.q"]) + as.integer(mtx.max[,"gcl.q"]))
vf.idx   = mtx.max[idx,"vf.i"]
rnfl.idx = mtx.max[idx,"rnfl.i"]
mrw.idx  = mtx.max[idx,"mrw.i"]
gcl.idx  = mtx.max[idx,"gcl.i"]
best_match = data.frame(df.criteria_results[vf.idx,"Patient.ID"],
df.criteria_results[vf.idx, "Eye"], df.rnfl_data[rnfl.idx,"Eye"], df.mrw_data[mrw.idx,"Eye"], df.gcl_data[gcl.idx,"Eye"],
as.Date.POSIXct(as.integer(df.criteria_results[vf.idx,"Date.Time"])),
df.rnfl_data[rnfl.idx,"ExamDate"], df.mrw_data[mrw.idx,"ExamDate"], as.Date.POSIXct(df.gcl_data[gcl.idx,"ExamDate"]),
df.rnfl_data[rnfl.idx,"Quality"], df.mrw_data[mrw.idx,"Mean.Quality"], df.gcl_data[gcl.idx,"Quality"],
df.criteria_results[vf.idx, 6:9], df.criteria_results[vf.idx,"MD.db"], df.criteria_results[vf.idx,"MD.pval"],
df.rnfl_data[rnfl.idx, 19:25],
df.mrw_data[mrw.idx, 134:140],
df.gcl_data[gcl.idx, 4:10])
colnames(best_match) = c("Patient.ID",
"Eye.Vf", "Eye.RNFL", "Eye.MRW", "Eye.GCL",
"Date.Vf", "Date.RNFL", "Date.MRW", "Date.GCL",
"Quality.RNFL", "Quality.MRW", "Quality.GCL",
"FOST", "MHPA", "UKGTS", "GHT", "MD.db", "MD.pval",
"RNFLClass_G", "RNFLClass_T", "RNFLClass_TS", "RNFLClass_TI", "RNFLClass_N", "RNFLClass_NS", "RNFLClass_NI",
"MRW.P.Global", "MRW.P.Tmp", "MRW.P.TS", "MRW.P.TI", "MRW.P.Nas", "MRW.P.NS", "MRW.P.NI",
"GCL.ABN.Global", "GCL.ABN.Sup", "GCL.ABN.TS", "GCL.ABN.NS", "GCL.ABN.Inf", "GCL.ABN.NI", "GCL.ABN.TI")
df.best_match = rbind(df.best_match, best_match)
#if(a == 4){
#  a = 0
#  break;
#}
#else
#  a = a + 1
}
assign("df.best_match", df.best_match, envir = .GlobalEnv)
}
#' OCT Score
#'
#' Assigns OCT score to patient based on RNFLT, MRW, and GCLT
#' @param df.results formatted results to be used
#' @return none
#' @export
scoreOct = function(df.results = df.best_match)
{
df.oct_scores = data.frame("OCT.Score" = 1:nrow(df.results))
for(pat in 1:nrow(df.results)){
oct.score = 0
rnfl.count = 0
mrw.count = 0
gcl.count = 0
#count score of RNFL
rnfl.range = which(colnames(df.results) == "RNFLClass_G") : (which(colnames(df.results) == "RNFLClass_G") + 6)
for(rnfl_val in df.results[pat,rnfl.range]){
if(rnfl_val == "ONL"){
rnfl.count = rnfl.count + 1
}
}
#count score of MRW
mrw.range = which(colnames(df.results) == "MRW.P.Global") : (which(colnames(df.results) == "MRW.P.Global") + 6)
for(mrw_val in df.results[pat,mrw.range]){
if(as.double(mrw_val) < 0.01){
mrw.count = mrw.count + 1
}
}
#count score of GCL
gcl.range = which(colnames(df.results) == "GCL.ABN.Global") : (which(colnames(df.results) == "GCL.ABN.Global") + 6)
for(gcl_val in df.results[pat,gcl.range]){
if(gcl_val == T){
gcl.count = gcl.count + 1
}
}
if(rnfl.count == 1){
oct.score = oct.score + 1
}
else if(rnfl.count > 2){
oct.score = oct.score + 2
}
if(mrw.count == 1){
oct.score = oct.score + 1
}
else if(mrw.count > 2){
oct.score = oct.score + 2
}
if(gcl.count == 1){
oct.score = oct.score + 1
}
else if(gcl.count > 2){
oct.score = oct.score + 2
}
df.oct_scores[pat,"OCT.Score"] = oct.score
}
assign("df.best_match", data.frame(df.results[,1:18], df.oct_scores, df.results[,19:39]), envir = .GlobalEnv)
}
matchVfToOct()
scoreOct()
View(df.best_match)
median(c(0,1,2))
median(c(0,1,2,3))
#' Clustered histogram for MD and criteria results
#'
#' Print histogram where criteria (Foster, MHPA, UKGTS, and GHT) results are clustered within their MD percentiles (10, 5, 2, 1, and 0.5 %)
#' @export
printClusteredHist = function(df.results = df.best_match, x_var = "os")
{
df.results = df.best_match
if(x_var == "os"){
# create data frame to house graph variables
df.results_os_cluster = data.frame("OCT.Score"=1:4, "GHT"=1:4,"FOST"=1:4, "MHPA"=1:4, "UKGTS"=1:4,  "NUM"=1:4)
df.results_os_cluster[,1] = c("0", "1-3", "4-5","6")
# set cell values to 0
for(row in 1:nrow(df.results_os_cluster)){
for(col in 2:ncol(df.results_os_cluster)){
df.results_os_cluster[row,col] = 0
}
}
# record counts of OCT scores in the cells
for(pat in 1:nrow(df.results)){
os = df.results[pat,"OCT.Score"]
#print(pat)
if(os == 0){
row = 1
}
else if(inside.range(os, c(1,3))){
row = 2
}
else if(inside.range(os, c(4,5))){
row = 3
}
else if(os == 6){
row = 4
}
# increment count of OCT bin
df.results_os_cluster[row,"NUM"] = df.results_os_cluster[row,"NUM"] + 1
# increment count of OCT-VFcriterion cell
for(col in c("GHT", "FOST", "UKGTS", "MHPA")){
#print(pat)
if(df.results[pat,col] == T)
df.results_os_cluster[row,col] = df.results_os_cluster[row,col] + 1
}
}
assign("df.results_os_cluster", df.results_os_cluster, envir = .GlobalEnv)
# confidence intervals
CIs = binom.confint(x=df.results_os_cluster[,2:5], n=df.results_os_cluster[,6], methods="wilson")
# modify name of each bin
for(row in 1:nrow(df.results_os_cluster)){
df.results_os_cluster[row,1] = paste0(df.results_os_cluster[row,1], "\nN=", df.results_os_cluster[row,6])
}
# generate data frame to be graphed
df.results_graph = cbind(OCT.Score=df.results_os_cluster[,1], CIs[,7:18])
colnames(df.results_graph)[2:5] = c("GHT", "FOST", "MHPA", "UKGTS")
df.results_graph = within(df.results_graph,  OCT.Score <- factor(OCT.Score, levels=OCT.Score))
print(df.results_graph)
# melt
df.melted = melt(df.results_graph[,1:5], variable.name = "criterion", value.name = "Hit.Rate")
# round hit rates to 2 sig figs
df.melted[,"Hit.Rate"] = round(df.melted[,"Hit.Rate"], digits=2)
# add CI columns
df.melted = cbind(df.melted,
lower.CI=c(df.results_graph[,"lower.GHT"], df.results_graph[,"lower.FOST"], df.results_graph[,"lower.MHPA"], df.results_graph[,"lower.UKGTS"]),
upper.CI=c(df.results_graph[,"upper.GHT"], df.results_graph[,"upper.FOST"], df.results_graph[,"upper.MHPA"], df.results_graph[,"upper.UKGTS"]))
print(df.melted)
plot.hist = ggplot(df.melted, aes(x=OCT.Score, y=Hit.Rate, fill=criterion)) +
geom_point(position = position_dodge(0.5), stat = "identity", aes(fill = criterion), size = 5, shape = 21, colour = "black", size = 5, stroke = 1) +
scale_fill_manual(values = c(GHT = "#bbbcbe", FOST = "#ffffb1", MHPA = "#ffb1b1", UKGTS = "#b1e6fa")) +
geom_errorbar(position=position_dodge(0.5), width=.4, aes(ymin=lower.CI, ymax=upper.CI)) +
#geom_text(aes(label = Hit.Rate, group = criterion), size=6, hjust=0.5, vjust=3, position=position_dodge(0.9)) +
theme_bw(base_size = 22) #+
#theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
}
else if(x_var == "md"){
# create data frame to house graph variables
df.results_md_cluster = data.frame("MD"=1:4, "GHT"=1:4, "FOST"=1:4, "MHPA"=1:4, "UKGTS"=1:4,  "NUM"=1:4)
df.results_md_cluster[,1] = c(">10%", "2%< MD <10%", "0.5%< MD <2%", "<0.5%")
md.db_10 = md.db_5 = md.db_1 = md.db_05 = vector()
for(row in 1:nrow(df.results_md_cluster)){
for(col in 2:ncol(df.results_md_cluster)){
df.results_md_cluster[row,col] = 0
}
}
for(pat in 1:nrow(df.results)){
md = df.results[pat,"MD.pval"]
#print(md)
if(is.na(md)){
row = 1
md.db_10 = c(md.db_10, df.results[pat,"MD.db"])
}
else if(md == 0.005){
row = 4
md.db_05 = c(md.db_05, df.results[pat,"MD.db"])
}
else if(md == 0.01){
row = 3
md.db_1 = c(md.db_1, df.results[pat,"MD.db"])
}
else if(md == 0.02){
row = 3
md.db_1 = c(md.db_1, df.results[pat,"MD.db"])
}
else if(md == 0.05){
row = 2
md.db_5 = c(md.db_5, df.results[pat,"MD.db"])
}
else if(md == 0.1){
row = 2
md.db_5 = c(md.db_5, df.results[pat,"MD.db"])
}
df.results_md_cluster[row,6] = df.results_md_cluster[row,6] + 1
for(col in c("GHT", "FOST", "UKGTS", "MHPA")){
#print(pat)
if(df.results[pat,col] == T)
df.results_md_cluster[row,col] = df.results_md_cluster[row,col] + 1
}
}
assign("df.results_md_cluster", df.results_md_cluster, envir = .GlobalEnv)
# confidence intervals
#CIs = rbind(binom.confint(x=df.results_md_cluster[1:4,2:5], n=df.results_md_cluster[1:4,6], methods="wilson"),
#            binom.confint(x=df.results_md_cluster[3:6,2:5], n=df.results_md_cluster[3:6,6], methods="wilson")[3:4,])
CIs = binom.confint(x=df.results_md_cluster[,2:5], n=df.results_md_cluster[,6], methods="wilson")
# modify name of each bin
md.db = list(md.db_10, md.db_5, md.db_1, md.db_05)
for(row in 1:nrow(df.results_md_cluster)){
df.results_md_cluster[row,1] = paste0(df.results_md_cluster[row,1], "\nN=", median(md.db[row]), "\nN=",df.results_md_cluster[row,6])
}
# generate data frame to be graphed
df.results_graph = cbind(MD=df.results_md_cluster[,1], CIs[,7:18])
colnames(df.results_graph)[2:5] = c("GHT", "FOST", "MHPA", "UKGTS")
df.results_graph = within(df.results_graph,  MD <- factor(MD, levels=MD))
print(df.results_graph)
# melt
df.melted = melt(df.results_graph[,1:5], variable.name = "criterion", value.name = "Hit.Rate")
# round hit rates to 2 sig figs
df.melted[,"Hit.Rate"] = round(df.melted[,"Hit.Rate"], digits=2)
# add CI columns
df.melted = cbind(df.melted,
lower.CI=c(df.results_graph[,"lower.GHT"], df.results_graph[,"lower.FOST"], df.results_graph[,"lower.MHPA"], df.results_graph[,"lower.UKGTS"]),
upper.CI=c(df.results_graph[,"upper.GHT"], df.results_graph[,"upper.FOST"], df.results_graph[,"upper.MHPA"], df.results_graph[,"upper.UKGTS"]))
print(df.melted)
plot.hist = ggplot(df.melted, aes(x=MD, y=Hit.Rate, fill=criterion)) +
geom_point(position = position_dodge(0.5), stat = "identity", aes(fill = criterion), size = 5, shape = 21, colour = "black", size = 5, stroke = 1) +
scale_fill_manual(values = c(GHT = "#bbbcbe", FOST = "#ffffb1", MHPA = "#ffb1b1", UKGTS = "#b1e6fa")) +
geom_errorbar(position=position_dodge(0.5), width=.4, aes(ymin=lower.CI, ymax=upper.CI)) +
#geom_text(aes(label = Hit.Rate, group = criterion), size=6, hjust=0.5, vjust=3, position=position_dodge(0.9)) +
theme_bw(base_size = 22) #+
#theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
#plot.hist = ggplot(df.melted, aes(x=MD, y=Hit.Rate, fill=criterion)) +
#  geom_bar(position = position_dodge(), stat = "identity") +
#  scale_fill_manual("criteria", values = c("GHT" = "#bbbcbe", "FOST" = "#ffffb1", "MHPA" = "#ffb1b1", "UKGTS" = "#b1e6fa")) +
#  geom_errorbar(position=position_dodge(0.9), width=.5, aes(ymin=lower.CI, ymax=upper.CI)) +
#  geom_text(aes(label = Hit.Rate, group = criterion), size=6, hjust=0.5, vjust=3, position=position_dodge(0.9)) +
#  theme_bw(base_size = 22) +
#  theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
}
return(plot.hist)
}
printClusteredHist(x_var = "md")
a = .ist(c(1,2,3,4,4), c(9,8,7,6,5,5))
a = list(c(1,2,3,4,4), c(9,8,7,6,5,5))
median(a[1])
a[1]
median(a(1))
median(vector(a(1))
)
median(vector(a[1]))
median(c(a[1]))
median(c(a[[1]]))
#' Clustered histogram for MD and criteria results
#'
#' Print histogram where criteria (Foster, MHPA, UKGTS, and GHT) results are clustered within their MD percentiles (10, 5, 2, 1, and 0.5 %)
#' @export
printClusteredHist = function(df.results = df.best_match, x_var = "os")
{
df.results = df.best_match
if(x_var == "os"){
# create data frame to house graph variables
df.results_os_cluster = data.frame("OCT.Score"=1:4, "GHT"=1:4,"FOST"=1:4, "MHPA"=1:4, "UKGTS"=1:4,  "NUM"=1:4)
df.results_os_cluster[,1] = c("0", "1-3", "4-5","6")
# set cell values to 0
for(row in 1:nrow(df.results_os_cluster)){
for(col in 2:ncol(df.results_os_cluster)){
df.results_os_cluster[row,col] = 0
}
}
# record counts of OCT scores in the cells
for(pat in 1:nrow(df.results)){
os = df.results[pat,"OCT.Score"]
#print(pat)
if(os == 0){
row = 1
}
else if(inside.range(os, c(1,3))){
row = 2
}
else if(inside.range(os, c(4,5))){
row = 3
}
else if(os == 6){
row = 4
}
# increment count of OCT bin
df.results_os_cluster[row,"NUM"] = df.results_os_cluster[row,"NUM"] + 1
# increment count of OCT-VFcriterion cell
for(col in c("GHT", "FOST", "UKGTS", "MHPA")){
#print(pat)
if(df.results[pat,col] == T)
df.results_os_cluster[row,col] = df.results_os_cluster[row,col] + 1
}
}
assign("df.results_os_cluster", df.results_os_cluster, envir = .GlobalEnv)
# confidence intervals
CIs = binom.confint(x=df.results_os_cluster[,2:5], n=df.results_os_cluster[,6], methods="wilson")
# modify name of each bin
for(row in 1:nrow(df.results_os_cluster)){
df.results_os_cluster[row,1] = paste0(df.results_os_cluster[row,1], "\nN=", df.results_os_cluster[row,6])
}
# generate data frame to be graphed
df.results_graph = cbind(OCT.Score=df.results_os_cluster[,1], CIs[,7:18])
colnames(df.results_graph)[2:5] = c("GHT", "FOST", "MHPA", "UKGTS")
df.results_graph = within(df.results_graph,  OCT.Score <- factor(OCT.Score, levels=OCT.Score))
print(df.results_graph)
# melt
df.melted = melt(df.results_graph[,1:5], variable.name = "criterion", value.name = "Hit.Rate")
# round hit rates to 2 sig figs
df.melted[,"Hit.Rate"] = round(df.melted[,"Hit.Rate"], digits=2)
# add CI columns
df.melted = cbind(df.melted,
lower.CI=c(df.results_graph[,"lower.GHT"], df.results_graph[,"lower.FOST"], df.results_graph[,"lower.MHPA"], df.results_graph[,"lower.UKGTS"]),
upper.CI=c(df.results_graph[,"upper.GHT"], df.results_graph[,"upper.FOST"], df.results_graph[,"upper.MHPA"], df.results_graph[,"upper.UKGTS"]))
print(df.melted)
plot.hist = ggplot(df.melted, aes(x=OCT.Score, y=Hit.Rate, fill=criterion)) +
geom_point(position = position_dodge(0.5), stat = "identity", aes(fill = criterion), size = 5, shape = 21, colour = "black", size = 5, stroke = 1) +
scale_fill_manual(values = c(GHT = "#bbbcbe", FOST = "#ffffb1", MHPA = "#ffb1b1", UKGTS = "#b1e6fa")) +
geom_errorbar(position=position_dodge(0.5), width=.4, aes(ymin=lower.CI, ymax=upper.CI)) +
#geom_text(aes(label = Hit.Rate, group = criterion), size=6, hjust=0.5, vjust=3, position=position_dodge(0.9)) +
theme_bw(base_size = 22) #+
#theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
}
else if(x_var == "md"){
# create data frame to house graph variables
df.results_md_cluster = data.frame("MD"=1:4, "GHT"=1:4, "FOST"=1:4, "MHPA"=1:4, "UKGTS"=1:4,  "NUM"=1:4)
df.results_md_cluster[,1] = c(">10%", "2%< MD <10%", "0.5%< MD <2%", "<0.5%")
md.db_10 = md.db_5 = md.db_1 = md.db_05 = vector()
for(row in 1:nrow(df.results_md_cluster)){
for(col in 2:ncol(df.results_md_cluster)){
df.results_md_cluster[row,col] = 0
}
}
for(pat in 1:nrow(df.results)){
md = df.results[pat,"MD.pval"]
#print(md)
if(is.na(md)){
row = 1
md.db_10 = c(md.db_10, df.results[pat,"MD.db"])
}
else if(md == 0.005){
row = 4
md.db_05 = c(md.db_05, df.results[pat,"MD.db"])
}
else if(md == 0.01){
row = 3
md.db_1 = c(md.db_1, df.results[pat,"MD.db"])
}
else if(md == 0.02){
row = 3
md.db_1 = c(md.db_1, df.results[pat,"MD.db"])
}
else if(md == 0.05){
row = 2
md.db_5 = c(md.db_5, df.results[pat,"MD.db"])
}
else if(md == 0.1){
row = 2
md.db_5 = c(md.db_5, df.results[pat,"MD.db"])
}
df.results_md_cluster[row,6] = df.results_md_cluster[row,6] + 1
for(col in c("GHT", "FOST", "UKGTS", "MHPA")){
#print(pat)
if(df.results[pat,col] == T)
df.results_md_cluster[row,col] = df.results_md_cluster[row,col] + 1
}
}
assign("df.results_md_cluster", df.results_md_cluster, envir = .GlobalEnv)
# confidence intervals
#CIs = rbind(binom.confint(x=df.results_md_cluster[1:4,2:5], n=df.results_md_cluster[1:4,6], methods="wilson"),
#            binom.confint(x=df.results_md_cluster[3:6,2:5], n=df.results_md_cluster[3:6,6], methods="wilson")[3:4,])
CIs = binom.confint(x=df.results_md_cluster[,2:5], n=df.results_md_cluster[,6], methods="wilson")
# modify name of each bin
md.db = list(md.db_10, md.db_5, md.db_1, md.db_05)
for(row in 1:nrow(df.results_md_cluster)){
df.results_md_cluster[row,1] = paste0(df.results_md_cluster[row,1], "\nN=", median(md.db[[row]]), "\nN=",df.results_md_cluster[row,6])
}
# generate data frame to be graphed
df.results_graph = cbind(MD=df.results_md_cluster[,1], CIs[,7:18])
colnames(df.results_graph)[2:5] = c("GHT", "FOST", "MHPA", "UKGTS")
df.results_graph = within(df.results_graph,  MD <- factor(MD, levels=MD))
print(df.results_graph)
# melt
df.melted = melt(df.results_graph[,1:5], variable.name = "criterion", value.name = "Hit.Rate")
# round hit rates to 2 sig figs
df.melted[,"Hit.Rate"] = round(df.melted[,"Hit.Rate"], digits=2)
# add CI columns
df.melted = cbind(df.melted,
lower.CI=c(df.results_graph[,"lower.GHT"], df.results_graph[,"lower.FOST"], df.results_graph[,"lower.MHPA"], df.results_graph[,"lower.UKGTS"]),
upper.CI=c(df.results_graph[,"upper.GHT"], df.results_graph[,"upper.FOST"], df.results_graph[,"upper.MHPA"], df.results_graph[,"upper.UKGTS"]))
print(df.melted)
plot.hist = ggplot(df.melted, aes(x=MD, y=Hit.Rate, fill=criterion)) +
geom_point(position = position_dodge(0.5), stat = "identity", aes(fill = criterion), size = 5, shape = 21, colour = "black", size = 5, stroke = 1) +
scale_fill_manual(values = c(GHT = "#bbbcbe", FOST = "#ffffb1", MHPA = "#ffb1b1", UKGTS = "#b1e6fa")) +
geom_errorbar(position=position_dodge(0.5), width=.4, aes(ymin=lower.CI, ymax=upper.CI)) +
#geom_text(aes(label = Hit.Rate, group = criterion), size=6, hjust=0.5, vjust=3, position=position_dodge(0.9)) +
theme_bw(base_size = 22) #+
#theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
#plot.hist = ggplot(df.melted, aes(x=MD, y=Hit.Rate, fill=criterion)) +
#  geom_bar(position = position_dodge(), stat = "identity") +
#  scale_fill_manual("criteria", values = c("GHT" = "#bbbcbe", "FOST" = "#ffffb1", "MHPA" = "#ffb1b1", "UKGTS" = "#b1e6fa")) +
#  geom_errorbar(position=position_dodge(0.9), width=.5, aes(ymin=lower.CI, ymax=upper.CI)) +
#  geom_text(aes(label = Hit.Rate, group = criterion), size=6, hjust=0.5, vjust=3, position=position_dodge(0.9)) +
#  theme_bw(base_size = 22) +
#  theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
}
return(plot.hist)
}
median(c(a[[2]]))
a[2]
printClusteredHist(x_var = "md")
#' Intersetion bar graph
#'
#' Print intersection bar graph to compare overlapping criteria results groups
#' @export
printIntersectionBarGraph = function(df.results = df.best_match)
{
fost = double(1)
mhpa = double(1)
ukgts = double(1)
ght = double(1)
i = 1
j = 1
k = 1
l = 1
for(pat in 1:NUM_PAT){
if(df.results[pat,"FOST"] == T){
fost[i] = pat
i = i + 1
}
if(df.results[pat,"MHPA"] == T){
mhpa[j] = pat
j = j + 1
}
if(df.results[pat,"UKGTS"] == T){
ukgts[k] = pat
k = k + 1
}
if(df.results[pat,"GHT"] == T){
ght[l] = pat
l = l + 1
}
}
list_input = list("FOST" = fost, "MHPA" = mhpa, "UKGTS" = ukgts, "GHT" = ght)
upset(fromList(list_input), sets = c("GHT", "UKGTS", "MHPA", "FOST"), keep.order = T, empty.intersections = T, order.by = "freq", text.scale = 2)
}
