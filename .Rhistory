assign("VFI_H_OFST", 50, envir = .GlobalEnv)
assign("MD_H_OFST", 47, envir = .GlobalEnv)
assign("PSD_H_OFST", 49, envir = .GlobalEnv)
# read patient number
assign("NUM_PAT", nrow(df.vf_data) - VF_V_OFST, envir = .GlobalEnv)
}
else if(data_format == 2){
# set indexing constants for excising VF data from df.vf_data
assign("VF_V_OFST", 0, envir = .GlobalEnv)
assign("VF_V_SIZE", 1, envir = .GlobalEnv)
assign("T_H_OFST", 50, envir = .GlobalEnv)
assign("VF_H_SIZE", 76, envir = .GlobalEnv)
assign("TD_H_OFST", T_H_OFST + VF_H_SIZE + 1, envir = .GlobalEnv)
assign("TDP_H_OFST", TD_H_OFST + VF_H_SIZE + 1, envir = .GlobalEnv)
assign("PD_H_OFST", TDP_H_OFST + VF_H_SIZE + 1, envir = .GlobalEnv)
assign("PDP_H_OFST", PD_H_OFST + VF_H_SIZE + 1, envir = .GlobalEnv)
assign("FIXLOSS_H_OFST", 27, envir = .GlobalEnv)
assign("FPOSERR_H_OFST", 30, envir = .GlobalEnv)
assign("FNEGERR_H_OFST", 34, envir = .GlobalEnv)
assign("GHT_H_OFST", 45, envir = .GlobalEnv)
assign("VFI_H_OFST", 44, envir = .GlobalEnv)
assign("MD_H_OFST", 41, envir = .GlobalEnv)
assign("PSD_H_OFST", 43, envir = .GlobalEnv)
# specify excel file and import data
print("Importing and parsing VF data...")
excel.file = file.path("../Initial_March_trimmed/VF2016_ID_24-2.xlsx")
df.Vf_2016 = read_xlsx(excel.file, sheet = 1, range = cell_rows(c(5, NA)), col_names = F)
excel.file = file.path("../Initial_March_trimmed/VF2017_ID_24-2.xlsx")
df.Vf_2017 = read_xlsx(excel.file, sheet = 1, range = cell_rows(c(5, NA)), col_names = F)
excel.file = file.path("../Initial_March_trimmed/VF2018_ID_24-2.xlsx")
df.Vf_2018 = read_xlsx(excel.file, sheet = 1, range = cell_rows(c(5, NA)),col_names = F)
# make one large data frame of all Vf data
assign("df.vf_data", rbind(df.Vf_2016, df.Vf_2017, df.Vf_2018), envir = .GlobalEnv)
# apply exclusion criteria
print("Applying exclusion criteria...")
excel.file = file.path("../ExclusionsClean.csv")
df.exclusions = read.csv(excel.file)
list.excl = vector()
for(excl_i in 1:nrow(df.exclusions)){
#print(excl_i)
for(vf_i in which(df.vf_data[,1] == df.exclusions[excl_i,"StudyID"])){
#print(vf_i)
eye_excl = df.exclusions[excl_i,"ExcludeEyes"]
eye_vf = df.vf_data[vf_i,4]
if(((eye_excl == "OD") && (eye_vf == "R")) || ((eye_excl == "OS") && (eye_vf == "L")) || (eye_excl == "OU")){
list.excl = c(list.excl,vf_i)
}
}
}
df.vf_data = df.vf_data[-list.excl, ]
# read patient number
assign("NUM_PAT", nrow(df.vf_data) - VF_V_OFST, envir = .GlobalEnv)
#add extra columns at the end because they are not imported since they are blank
assign("df.vf_data", cbind(df.vf_data, data.frame(matrix(NA, nrow = NUM_PAT, ncol = 5))), envir = .GlobalEnv)
# import rnfl, mrw and gcl data
print("Importing rnfl, mrw and gcl data...")
excel.file = file.path("../Initial_March_trimmed/RNFL_Q15_mm1_D3436.csv")
assign("df.rnfl_data", read.csv(excel.file), envir = .GlobalEnv)
excel.file = file.path("../Initial_March_trimmed/MRW_Q15_Disp.csv")
assign("df.mrw_data", read.csv(excel.file), envir = .GlobalEnv)
excel.file = file.path("../Initial_March_trimmed/Macula_Q15_GCL.csv")
assign("df.gcl_data", read.csv(excel.file), envir = .GlobalEnv)
#format GCL data - assumed it is ordered
df.gcl = data.frame(matrix(NA, nrow = 0, ncol = 11))
for(pat in seq(1,nrow(df.gcl_data),7)){
df.gcl = rbind(df.gcl, c(df.gcl_data[pat,"StudyID"], df.gcl_data[pat,"Eye"],
as.integer(as.POSIXct(df.gcl_data[pat,"ExamDate"])), df.gcl_data[pat,"Quality"],
df.gcl_data[pat,"abnormalSector"], df.gcl_data[(pat + 4),"abnormalSector"],
df.gcl_data[(pat + 6),"abnormalSector"], df.gcl_data[(pat + 3),"abnormalSector"],
df.gcl_data[(pat + 1),"abnormalSector"], df.gcl_data[(pat + 5),"abnormalSector"],
df.gcl_data[(pat + 2),"abnormalSector"]))
}
colnames(df.gcl) = c("StudyID", "Eye", "ExamDate", "Quality",
"GCL.ABN.Global", "GCL.ABN.Sup", "GCL.ABN.TS", "GCL.ABN.NS",
"GCL.ABN.Inf", "GCL.ABN.NI", "GCL.ABN.TI")
assign("df.gcl_data", df.gcl, envir = .GlobalEnv)
# import helper tables
print("Importing helper tables...")
excel.file = file.path("helper_tables.xlsx")
assign("df.coord", data.frame(read_xlsx(excel.file, sheet = 1, col_names = T)), envir = .GlobalEnv)
assign("df.pt_mapping", data.frame(read_xlsx(excel.file, sheet = 2, col_names = T)), envir = .GlobalEnv)
print("Init complete.")
}
}
library("gridGraphics")
printFigure1()
printFigure2()
#' Clustered histogram for MD and criteria results
#'
#' Print histogram where criteria (Foster, MHPA, UKGTS, and GHT) results are clustered within their MD percentiles (10, 5, 2, 1, and 0.5 %)
#' @export
printClusteredHist = function(df.results = df.best_match, x_var = "os", percentage.weight = FALSE)
{
df.results = df.best_match
if(x_var == "os"){
# create data frame to house graph variables
df.results_os_cluster = data.frame("OCT.Score"=1:4, "GHT"=1:4,"FOST"=1:4, "MHPA"=1:4, "UKGTS"=1:4,  "NUM"=1:4)
df.results_os_cluster[,1] = c("0", "4-5", "1-3","6")
# set cell values to 0
for(row in 1:nrow(df.results_os_cluster)){
for(col in 2:ncol(df.results_os_cluster)){
df.results_os_cluster[row,col] = 0
}
}
# record counts of OCT scores in the cells
for(pat in 1:nrow(df.results)){
os = df.results[pat,"OCT.Score"]
#print(pat)
if(os == 0){
row = 1
}
else if(inside.range(os, c(1,3))){
row = 2
}
else if(inside.range(os, c(4,5))){
row = 3
}
else if(os == 6){
row = 4
}
# increment count of OCT bin
df.results_os_cluster[row,"NUM"] = df.results_os_cluster[row,"NUM"] + 1
# increment count of OCT-VFcriterion cell
for(col in c("GHT", "FOST", "UKGTS", "MHPA")){
#print(pat)
if(df.results[pat,col] == T)
df.results_os_cluster[row,col] = df.results_os_cluster[row,col] + 1
}
}
assign("df.results_os_cluster", df.results_os_cluster, envir = .GlobalEnv)
# confidence intervals
CIs = binom.confint(x=df.results_os_cluster[,2:5], n=df.results_os_cluster[,6], methods="wilson")
# modify name of each bin
for(row in 1:nrow(df.results_os_cluster)){
df.results_os_cluster[row,1] = paste0(df.results_os_cluster[row,1], "\nN=", df.results_os_cluster[row,6])
}
# generate data frame to be graphed
df.results_graph = cbind(OCT.Score=df.results_os_cluster[,1], CIs[,7:18])
colnames(df.results_graph)[2:5] = c("GHT", "FOST", "MHPA", "UKGTS")
df.results_graph = within(df.results_graph,  OCT.Score <- factor(OCT.Score, levels=OCT.Score))
print(df.results_graph)
# melt
df.melted = melt(df.results_graph[,1:5], variable.name = "criterion", value.name = "Hit.Rate")
# round hit rates to 2 sig figs
df.melted[,"Hit.Rate"] = round(df.melted[,"Hit.Rate"], digits=2)
# add CI columns
df.melted = cbind(df.melted,
lower.CI=c(df.results_graph[,"lower.GHT"], df.results_graph[,"lower.FOST"], df.results_graph[,"lower.MHPA"], df.results_graph[,"lower.UKGTS"]),
upper.CI=c(df.results_graph[,"upper.GHT"], df.results_graph[,"upper.FOST"], df.results_graph[,"upper.MHPA"], df.results_graph[,"upper.UKGTS"]))
print(df.melted)
plot.hist = ggplot(df.melted, aes(x=OCT.Score, y=Hit.Rate, fill=criterion)) +
geom_bar(position = position_dodge(), stat = "identity") +
scale_fill_manual("criteria", values = c("GHT" = "#bbbcbe", "FOST" = "#ffffb1", "MHPA" = "#ffb1b1", "UKGTS" = "#b1e6fa")) +
geom_errorbar(position=position_dodge(0.9), width=.5, aes(ymin=lower.CI, ymax=upper.CI)) +
geom_text(aes(label = Hit.Rate, group = criterion), size=6, hjust=0.5, vjust=2, position=position_dodge(0.9)) +
theme_bw(base_size = 22) +
theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
}
else if(x_var == "md"){
# create data frame to house graph variables
df.results_md_cluster = data.frame("MD"=1:6, "GHT"=1:6, "FOST"=1:6, "MHPA"=1:6, "UKGTS"=1:6,  "NUM"=1:6)
df.results_md_cluster[,1] = c(">10%", "<10%", "<5%", "<2%", "<1%", "<0.5%")
for(row in 1:nrow(df.results_md_cluster)){
for(col in 2:ncol(df.results_md_cluster)){
df.results_md_cluster[row,col] = 0
}
}
for(pat in 1:nrow(df.results)){
md = df.results[pat,"MD"]
#print(md)
if(is.na(md)){
row = 1
}
else if(md == 0.005){
row = 6
}
else if(md == 0.01){
row = 5
}
else if(md == 0.02){
row = 4
}
else if(md == 0.05){
row = 3
}
else if(md == 0.1){
row = 2
}
df.results_md_cluster[row,6] = df.results_md_cluster[row,6] + 1
for(col in c("GHT", "FOST", "UKGTS", "MHPA")){
#print(pat)
if(df.results[pat,col] == T)
df.results_md_cluster[row,col] = df.results_md_cluster[row,col] + 1
}
}
assign("df.results_md_cluster", df.results_md_cluster, envir = .GlobalEnv)
# confidence intervals
CIs = rbind(binom.confint(x=df.results_md_cluster[1:4,2:5], n=df.results_md_cluster[1:4,6], methods="wilson"),
binom.confint(x=df.results_md_cluster[3:6,2:5], n=df.results_md_cluster[3:6,6], methods="wilson")[3:4,])
# modify name of each bin
for(row in 1:nrow(df.results_md_cluster)){
df.results_md_cluster[row,1] = paste0(df.results_md_cluster[row,1], "\nN=", df.results_md_cluster[row,6])
}
# generate data frame to be graphed
df.results_graph = cbind(MD=df.results_md_cluster[,1], CIs[,7:18])
colnames(df.results_graph)[2:5] = c("GHT", "FOST", "MHPA", "UKGTS")
df.results_graph = within(df.results_graph,  MD <- factor(MD, levels=MD))
print(df.results_graph)
# melt
df.melted = melt(df.results_graph[,1:5], variable.name = "criterion", value.name = "Hit.Rate")
# round hit rates to 2 sig figs
df.melted[,"Hit.Rate"] = round(df.melted[,"Hit.Rate"], digits=2)
# add CI columns
df.melted = cbind(df.melted,
lower.CI=c(df.results_graph[,"lower.GHT"], df.results_graph[,"lower.FOST"], df.results_graph[,"lower.MHPA"], df.results_graph[,"lower.UKGTS"]),
upper.CI=c(df.results_graph[,"upper.GHT"], df.results_graph[,"upper.FOST"], df.results_graph[,"upper.MHPA"], df.results_graph[,"upper.UKGTS"]))
print(df.melted)
plot.hist = ggplot(df.melted, aes(x=MD, y=Hit.Rate, fill=criterion)) +
geom_bar(position = position_dodge(), stat = "identity") +
scale_fill_manual("criteria", values = c("GHT" = "#bbbcbe", "FOST" = "#ffffb1", "MHPA" = "#ffb1b1", "UKGTS" = "#b1e6fa")) +
geom_errorbar(position=position_dodge(0.9), width=.5, aes(ymin=lower.CI, ymax=upper.CI)) +
geom_text(aes(label = Hit.Rate, group = criterion), size=6, hjust=0.5, vjust=2, position=position_dodge(0.9)) +
theme_bw(base_size = 22) +
theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
}
return(plot.hist)
}
printFigure1()
#' Clustered histogram for MD and criteria results
#'
#' Print histogram where criteria (Foster, MHPA, UKGTS, and GHT) results are clustered within their MD percentiles (10, 5, 2, 1, and 0.5 %)
#' @export
printClusteredHist = function(df.results = df.best_match, x_var = "os", percentage.weight = FALSE)
{
df.results = df.best_match
if(x_var == "os"){
# create data frame to house graph variables
df.results_os_cluster = data.frame("OCT.Score"=1:4, "GHT"=1:4,"FOST"=1:4, "MHPA"=1:4, "UKGTS"=1:4,  "NUM"=1:4)
df.results_os_cluster[,1] = c("0", "4-5", "1-3","6")
# set cell values to 0
for(row in 1:nrow(df.results_os_cluster)){
for(col in 2:ncol(df.results_os_cluster)){
df.results_os_cluster[row,col] = 0
}
}
# record counts of OCT scores in the cells
for(pat in 1:nrow(df.results)){
os = df.results[pat,"OCT.Score"]
#print(pat)
if(os == 0){
row = 1
}
else if(inside.range(os, c(1,3))){
row = 2
}
else if(inside.range(os, c(4,5))){
row = 3
}
else if(os == 6){
row = 4
}
# increment count of OCT bin
df.results_os_cluster[row,"NUM"] = df.results_os_cluster[row,"NUM"] + 1
# increment count of OCT-VFcriterion cell
for(col in c("GHT", "FOST", "UKGTS", "MHPA")){
#print(pat)
if(df.results[pat,col] == T)
df.results_os_cluster[row,col] = df.results_os_cluster[row,col] + 1
}
}
assign("df.results_os_cluster", df.results_os_cluster, envir = .GlobalEnv)
# confidence intervals
CIs = binom.confint(x=df.results_os_cluster[,2:5], n=df.results_os_cluster[,6], methods="wilson")
# modify name of each bin
for(row in 1:nrow(df.results_os_cluster)){
df.results_os_cluster[row,1] = paste0(df.results_os_cluster[row,1], "\nN=", df.results_os_cluster[row,6])
}
# generate data frame to be graphed
df.results_graph = cbind(OCT.Score=df.results_os_cluster[,1], CIs[,7:18])
colnames(df.results_graph)[2:5] = c("GHT", "FOST", "MHPA", "UKGTS")
df.results_graph = within(df.results_graph,  OCT.Score <- factor(OCT.Score, levels=OCT.Score))
print(df.results_graph)
# melt
df.melted = melt(df.results_graph[,1:5], variable.name = "criterion", value.name = "Hit.Rate")
# round hit rates to 2 sig figs
df.melted[,"Hit.Rate"] = round(df.melted[,"Hit.Rate"], digits=2)
# add CI columns
df.melted = cbind(df.melted,
lower.CI=c(df.results_graph[,"lower.GHT"], df.results_graph[,"lower.FOST"], df.results_graph[,"lower.MHPA"], df.results_graph[,"lower.UKGTS"]),
upper.CI=c(df.results_graph[,"upper.GHT"], df.results_graph[,"upper.FOST"], df.results_graph[,"upper.MHPA"], df.results_graph[,"upper.UKGTS"]))
print(df.melted)
plot.hist = ggplot(df.melted, aes(x=OCT.Score, y=Hit.Rate, fill=criterion)) +
geom_bar(position = position_dodge(), stat = "identity") +
scale_fill_manual("criteria", values = c("GHT" = "#bbbcbe", "FOST" = "#ffffb1", "MHPA" = "#ffb1b1", "UKGTS" = "#b1e6fa")) +
geom_errorbar(position=position_dodge(0.9), width=.5, aes(ymin=lower.CI, ymax=upper.CI)) +
geom_text(aes(label = Hit.Rate, group = criterion), size=6, hjust=0.5, vjust=3, position=position_dodge(0.9)) +
theme_bw(base_size = 22) +
theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
}
else if(x_var == "md"){
# create data frame to house graph variables
df.results_md_cluster = data.frame("MD"=1:6, "GHT"=1:6, "FOST"=1:6, "MHPA"=1:6, "UKGTS"=1:6,  "NUM"=1:6)
df.results_md_cluster[,1] = c(">10%", "<10%", "<5%", "<2%", "<1%", "<0.5%")
for(row in 1:nrow(df.results_md_cluster)){
for(col in 2:ncol(df.results_md_cluster)){
df.results_md_cluster[row,col] = 0
}
}
for(pat in 1:nrow(df.results)){
md = df.results[pat,"MD"]
#print(md)
if(is.na(md)){
row = 1
}
else if(md == 0.005){
row = 6
}
else if(md == 0.01){
row = 5
}
else if(md == 0.02){
row = 4
}
else if(md == 0.05){
row = 3
}
else if(md == 0.1){
row = 2
}
df.results_md_cluster[row,6] = df.results_md_cluster[row,6] + 1
for(col in c("GHT", "FOST", "UKGTS", "MHPA")){
#print(pat)
if(df.results[pat,col] == T)
df.results_md_cluster[row,col] = df.results_md_cluster[row,col] + 1
}
}
assign("df.results_md_cluster", df.results_md_cluster, envir = .GlobalEnv)
# confidence intervals
CIs = rbind(binom.confint(x=df.results_md_cluster[1:4,2:5], n=df.results_md_cluster[1:4,6], methods="wilson"),
binom.confint(x=df.results_md_cluster[3:6,2:5], n=df.results_md_cluster[3:6,6], methods="wilson")[3:4,])
# modify name of each bin
for(row in 1:nrow(df.results_md_cluster)){
df.results_md_cluster[row,1] = paste0(df.results_md_cluster[row,1], "\nN=", df.results_md_cluster[row,6])
}
# generate data frame to be graphed
df.results_graph = cbind(MD=df.results_md_cluster[,1], CIs[,7:18])
colnames(df.results_graph)[2:5] = c("GHT", "FOST", "MHPA", "UKGTS")
df.results_graph = within(df.results_graph,  MD <- factor(MD, levels=MD))
print(df.results_graph)
# melt
df.melted = melt(df.results_graph[,1:5], variable.name = "criterion", value.name = "Hit.Rate")
# round hit rates to 2 sig figs
df.melted[,"Hit.Rate"] = round(df.melted[,"Hit.Rate"], digits=2)
# add CI columns
df.melted = cbind(df.melted,
lower.CI=c(df.results_graph[,"lower.GHT"], df.results_graph[,"lower.FOST"], df.results_graph[,"lower.MHPA"], df.results_graph[,"lower.UKGTS"]),
upper.CI=c(df.results_graph[,"upper.GHT"], df.results_graph[,"upper.FOST"], df.results_graph[,"upper.MHPA"], df.results_graph[,"upper.UKGTS"]))
print(df.melted)
plot.hist = ggplot(df.melted, aes(x=MD, y=Hit.Rate, fill=criterion)) +
geom_bar(position = position_dodge(), stat = "identity") +
scale_fill_manual("criteria", values = c("GHT" = "#bbbcbe", "FOST" = "#ffffb1", "MHPA" = "#ffb1b1", "UKGTS" = "#b1e6fa")) +
geom_errorbar(position=position_dodge(0.9), width=.5, aes(ymin=lower.CI, ymax=upper.CI)) +
geom_text(aes(label = Hit.Rate, group = criterion), size=6, hjust=0.5, vjust=3, position=position_dodge(0.9)) +
theme_bw(base_size = 22) +
theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
}
return(plot.hist)
}
printFigure1()
View(df.interx)
printFigure2()
#' Clustered histogram for MD and criteria results
#'
#' Print histogram where criteria (Foster, MHPA, UKGTS, and GHT) results are clustered within their MD percentiles (10, 5, 2, 1, and 0.5 %)
#' @export
printClusteredHist = function(df.results = df.best_match, x_var = "os", percentage.weight = FALSE)
{
df.results = df.best_match
if(x_var == "os"){
# create data frame to house graph variables
df.results_os_cluster = data.frame("OCT.Score"=1:4, "GHT"=1:4,"FOST"=1:4, "MHPA"=1:4, "UKGTS"=1:4,  "NUM"=1:4)
df.results_os_cluster[,1] = c("0", "1-3", "4-5","6")
# set cell values to 0
for(row in 1:nrow(df.results_os_cluster)){
for(col in 2:ncol(df.results_os_cluster)){
df.results_os_cluster[row,col] = 0
}
}
# record counts of OCT scores in the cells
for(pat in 1:nrow(df.results)){
os = df.results[pat,"OCT.Score"]
#print(pat)
if(os == 0){
row = 1
}
else if(inside.range(os, c(1,3))){
row = 2
}
else if(inside.range(os, c(4,5))){
row = 3
}
else if(os == 6){
row = 4
}
# increment count of OCT bin
df.results_os_cluster[row,"NUM"] = df.results_os_cluster[row,"NUM"] + 1
# increment count of OCT-VFcriterion cell
for(col in c("GHT", "FOST", "UKGTS", "MHPA")){
#print(pat)
if(df.results[pat,col] == T)
df.results_os_cluster[row,col] = df.results_os_cluster[row,col] + 1
}
}
assign("df.results_os_cluster", df.results_os_cluster, envir = .GlobalEnv)
# confidence intervals
CIs = binom.confint(x=df.results_os_cluster[,2:5], n=df.results_os_cluster[,6], methods="wilson")
# modify name of each bin
for(row in 1:nrow(df.results_os_cluster)){
df.results_os_cluster[row,1] = paste0(df.results_os_cluster[row,1], "\nN=", df.results_os_cluster[row,6])
}
# generate data frame to be graphed
df.results_graph = cbind(OCT.Score=df.results_os_cluster[,1], CIs[,7:18])
colnames(df.results_graph)[2:5] = c("GHT", "FOST", "MHPA", "UKGTS")
df.results_graph = within(df.results_graph,  OCT.Score <- factor(OCT.Score, levels=OCT.Score))
print(df.results_graph)
# melt
df.melted = melt(df.results_graph[,1:5], variable.name = "criterion", value.name = "Hit.Rate")
# round hit rates to 2 sig figs
df.melted[,"Hit.Rate"] = round(df.melted[,"Hit.Rate"], digits=2)
# add CI columns
df.melted = cbind(df.melted,
lower.CI=c(df.results_graph[,"lower.GHT"], df.results_graph[,"lower.FOST"], df.results_graph[,"lower.MHPA"], df.results_graph[,"lower.UKGTS"]),
upper.CI=c(df.results_graph[,"upper.GHT"], df.results_graph[,"upper.FOST"], df.results_graph[,"upper.MHPA"], df.results_graph[,"upper.UKGTS"]))
print(df.melted)
plot.hist = ggplot(df.melted, aes(x=OCT.Score, y=Hit.Rate, fill=criterion)) +
geom_bar(position = position_dodge(), stat = "identity") +
scale_fill_manual("criteria", values = c("GHT" = "#bbbcbe", "FOST" = "#ffffb1", "MHPA" = "#ffb1b1", "UKGTS" = "#b1e6fa")) +
geom_errorbar(position=position_dodge(0.9), width=.5, aes(ymin=lower.CI, ymax=upper.CI)) +
geom_text(aes(label = Hit.Rate, group = criterion), size=6, hjust=0.5, vjust=3, position=position_dodge(0.9)) +
theme_bw(base_size = 22) +
theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
}
else if(x_var == "md"){
# create data frame to house graph variables
df.results_md_cluster = data.frame("MD"=1:6, "GHT"=1:6, "FOST"=1:6, "MHPA"=1:6, "UKGTS"=1:6,  "NUM"=1:6)
df.results_md_cluster[,1] = c(">10%", "<10%", "<5%", "<2%", "<1%", "<0.5%")
for(row in 1:nrow(df.results_md_cluster)){
for(col in 2:ncol(df.results_md_cluster)){
df.results_md_cluster[row,col] = 0
}
}
for(pat in 1:nrow(df.results)){
md = df.results[pat,"MD"]
#print(md)
if(is.na(md)){
row = 1
}
else if(md == 0.005){
row = 6
}
else if(md == 0.01){
row = 5
}
else if(md == 0.02){
row = 4
}
else if(md == 0.05){
row = 3
}
else if(md == 0.1){
row = 2
}
df.results_md_cluster[row,6] = df.results_md_cluster[row,6] + 1
for(col in c("GHT", "FOST", "UKGTS", "MHPA")){
#print(pat)
if(df.results[pat,col] == T)
df.results_md_cluster[row,col] = df.results_md_cluster[row,col] + 1
}
}
assign("df.results_md_cluster", df.results_md_cluster, envir = .GlobalEnv)
# confidence intervals
CIs = rbind(binom.confint(x=df.results_md_cluster[1:4,2:5], n=df.results_md_cluster[1:4,6], methods="wilson"),
binom.confint(x=df.results_md_cluster[3:6,2:5], n=df.results_md_cluster[3:6,6], methods="wilson")[3:4,])
# modify name of each bin
for(row in 1:nrow(df.results_md_cluster)){
df.results_md_cluster[row,1] = paste0(df.results_md_cluster[row,1], "\nN=", df.results_md_cluster[row,6])
}
# generate data frame to be graphed
df.results_graph = cbind(MD=df.results_md_cluster[,1], CIs[,7:18])
colnames(df.results_graph)[2:5] = c("GHT", "FOST", "MHPA", "UKGTS")
df.results_graph = within(df.results_graph,  MD <- factor(MD, levels=MD))
print(df.results_graph)
# melt
df.melted = melt(df.results_graph[,1:5], variable.name = "criterion", value.name = "Hit.Rate")
# round hit rates to 2 sig figs
df.melted[,"Hit.Rate"] = round(df.melted[,"Hit.Rate"], digits=2)
# add CI columns
df.melted = cbind(df.melted,
lower.CI=c(df.results_graph[,"lower.GHT"], df.results_graph[,"lower.FOST"], df.results_graph[,"lower.MHPA"], df.results_graph[,"lower.UKGTS"]),
upper.CI=c(df.results_graph[,"upper.GHT"], df.results_graph[,"upper.FOST"], df.results_graph[,"upper.MHPA"], df.results_graph[,"upper.UKGTS"]))
print(df.melted)
plot.hist = ggplot(df.melted, aes(x=MD, y=Hit.Rate, fill=criterion)) +
geom_bar(position = position_dodge(), stat = "identity") +
scale_fill_manual("criteria", values = c("GHT" = "#bbbcbe", "FOST" = "#ffffb1", "MHPA" = "#ffb1b1", "UKGTS" = "#b1e6fa")) +
geom_errorbar(position=position_dodge(0.9), width=.5, aes(ymin=lower.CI, ymax=upper.CI)) +
geom_text(aes(label = Hit.Rate, group = criterion), size=6, hjust=0.5, vjust=3, position=position_dodge(0.9)) +
theme_bw(base_size = 22) +
theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
}
return(plot.hist)
}
printFigure2()
