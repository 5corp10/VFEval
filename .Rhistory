else if(x_var == "rmd"){
# confidence intervals
CI = binom.confint(x=df.criteria_reproducibility_md[,c("HAP2","UKGTS","GHT","FOST","LOGTS")],
n=df.criteria_reproducibility_md[,c("HAP2.T","UKGTS.T","GHT.T","FOST.T","LOGTS.T")], methods="wilson")
# modify name of each bin
x_names=c("","","","")
for(row in 1:nrow(df.results_md_cluster)){
x_names[row] = paste0(df.results_md_cluster[row,1], "\n",
df.criteria_reproducibility_md[row,"HAP2.T"], "|",
df.criteria_reproducibility_md[row,"UKGTS.T"], "|",
df.criteria_reproducibility_md[row,"GHT.T"], "|",
df.criteria_reproducibility_md[row,"FOST.T"], "|",
df.criteria_reproducibility_md[row,"LOGTS.T"])
}
# generate data frame to be graphed
df.results_graph = cbind(MD=x_names, CI[,12:16])
colnames(df.results_graph)[2:6] = names_col[1:5]
df.results_graph = within(df.results_graph,  MD <- factor(MD, levels=MD))
print(df.results_graph)
# melt
df.melted = melt(df.results_graph, variable.name = "criterion", value.name = "Repeat.Error.Rate")
# round hit rates to 2 sig figs
df.melted[,"Repeat.Error.Rate"] = round(df.melted[,"Repeat.Error.Rate"], digits=2)
# add CI columns
df.melted = cbind(df.melted,
lower.CI=c(CI[,"lower.HAP2"], CI[,"lower.UKGTS"], CI[,"lower.GHT"], CI[,"lower.FOST"], CI[,"lower.LOGTS"]),
upper.CI=c(CI[,"upper.HAP2"], CI[,"upper.UKGTS"], CI[,"upper.GHT"], CI[,"upper.FOST"], CI[,"upper.LOGTS"]))
print(df.melted)
plot.hist = ggplot(df.melted, aes(x=MD, y=Repeat.Error.Rate, fill=criterion)) +
geom_linerange(position=position_dodge(0.5), aes(ymin=lower.CI, ymax=upper.CI), size=0.8) +
geom_point(position = position_dodge(0.5), stat = "identity", aes(fill = criterion), size = 5, shape = 21, colour = "black", size = 5, stroke = 1.3) +
scale_fill_manual(values = c(GHT = "#bbbcbe", FOST = "#ffffb1", HAP2 = "#ffb1b1", UKGTS = "#b1e6fa", LOGTS = "white")) +
#geom_text(aes(label = Repeat.Error.Rate, group = criterion), size=6, hjust=0.5, vjust=3, position=position_dodge(0.9)) +
theme_bw(base_size = 22) +
ylim(0,1)
}
else if(x_var == "ros"){
# confidence intervals
CI = binom.confint(x=df.criteria_reproducibility_os[,c("HAP2","UKGTS","GHT","FOST","LOGTS")],
n=df.criteria_reproducibility_os[,c("HAP2.T","UKGTS.T","GHT.T","FOST.T","LOGTS.T")], methods="wilson")
x_names=c("","","","")
for(row in 1:nrow(df.results_md_cluster)){
x_names[row] = paste0(df.results_md_cluster[row,1], "\n",
df.criteria_reproducibility_os[row,"HAP2.T"], "|",
df.criteria_reproducibility_os[row,"UKGTS.T"], "|",
df.criteria_reproducibility_os[row,"GHT.T"], "|",
df.criteria_reproducibility_os[row,"FOST.T"], "|",
df.criteria_reproducibility_os[row,"LOGTS.T"])
}
# generate data frame to be graphed
df.results_graph = cbind(OCT.Score=x_names, CI[,12:16])
colnames(df.results_graph)[2:6] = names_col[1:5]
df.results_graph = within(df.results_graph,  OCT.Score <- factor(OCT.Score, levels=OCT.Score))
print(df.results_graph)
# melt
df.melted = melt(df.results_graph, variable.name = "criterion", value.name = "Repeat.Error.Rate")
# round hit rates to 2 sig figs
df.melted[,"Repeat.Error.Rate"] = round(df.melted[,"Repeat.Error.Rate"], digits=2)
# add CI columns
df.melted = cbind(df.melted,
lower.CI=c(CI[,"lower.HAP2"], CI[,"lower.UKGTS"], CI[,"lower.GHT"], CI[,"lower.FOST"], CI[,"lower.LOGTS"]),
upper.CI=c(CI[,"upper.HAP2"], CI[,"upper.UKGTS"], CI[,"upper.GHT"], CI[,"upper.FOST"], CI[,"upper.LOGTS"]))
print(df.melted)
plot.hist = ggplot(df.melted, aes(x=OCT.Score, y=Repeat.Error.Rate, fill=criterion)) +
geom_linerange(position=position_dodge(0.5), aes(ymin=lower.CI, ymax=upper.CI), size=0.8) +
geom_point(position = position_dodge(0.5), stat = "identity", aes(fill = criterion), size = 5, shape = 21, colour = "black", size = 5, stroke = 1.3) +
scale_fill_manual(values = c(GHT = "#bbbcbe", FOST = "#ffffb1", HAP2 = "#ffb1b1", UKGTS = "#b1e6fa", LOGTS = "white")) +
#geom_text(aes(label = Repeat.Error.Rate, group = criterion), size=6, hjust=0.5, vjust=3, position=position_dodge(0.9)) +
theme_bw(base_size = 22) +
ylim(0,1)
}
return(plot.hist)
}
printClusteredHist(x_var = "ros")
#import libraries
library("tidyverse")
library("dplyr")
library("ggplot2")
library("readxl")
library("devtools")
library("roxygen2")
library("cowplot")
library("UpSetR")
library("venneuler")
library("scales")
library("reshape2")
library("spatstat.utils")
library("readxl")
library("binom")
library("gridGraphics")
printClusteredHist(x_var = "ros")
#' Clustered histogram for MD and criteria results
#'
#' Print histogram where criteria (Foster, HAP2, UKGTS, and GHT) results are clustered within their MD percentiles (10, 5, 2, 1, and 0.5 %)
#' @export
printClusteredHist = function(df.results = df.best_match, x_var = "os")
{
df.results = df.best_match
names_col = c("HAP2", "UKGTS", "GHT","FOST", "LOGTS", "EAGLE", "AGIS")
if(x_var == "os"){
# create data frame to house graph variables
df.results_os_cluster = data.frame(matrix(0, nrow=4, ncol=length(names_col)+2))
colnames(df.results_os_cluster) = c("OCT.Score", names_col, "Total")
df.results_os_cluster[,1] = c("0", "1-3", "4-5","6")
md.db_0 = md.db_13 = md.db_45 = md.db_6 = double()
# record counts of OCT scores in the cells
for(pat in 1:nrow(df.results)){
os = df.results[pat,"OCT.Score"]
#print(pat)
if(os == 0){
row = 1
md.db_0 = c(md.db_0, round(as.double(as.character(df.results[pat,"MD.db"])), 2))
}
else if(inside.range(os, c(1,3))){
row = 2
md.db_13 = c(md.db_13, round(as.double(as.character(df.results[pat,"MD.db"])), 2))
}
else if(inside.range(os, c(4,5))){
row = 3
md.db_45 = c(md.db_45, round(as.double(as.character(df.results[pat,"MD.db"])), 2))
}
else if(os == 6){
row = 4
md.db_6 = c(md.db_6, round(as.double(as.character(df.results[pat,"MD.db"])), 2))
}
# increment count of OCT bin
df.results_os_cluster[row,"Total"] = df.results_os_cluster[row,"Total"] + 1
# increment count of OCT-VFcriterion cell
for(col in names_col){
#print(pat)
if(df.results[pat,col] == T)
df.results_os_cluster[row,col] = df.results_os_cluster[row,col] + 1
}
}
assign("df.results_os_cluster", df.results_os_cluster, envir = .GlobalEnv)
# confidence intervals
CI1 = binom.confint(x=df.results_os_cluster[,2:5], n=df.results_os_cluster[,"Total"], methods="wilson")
CI2 = binom.confint(x=df.results_os_cluster[,6], n=df.results_os_cluster[,"Total"], methods="wilson")
# modify name of each bin
md.db = list(md.db_0, md.db_13, md.db_45, md.db_6)
for(row in 1:nrow(df.results_os_cluster)){
df.results_os_cluster[row,1] = paste0(df.results_os_cluster[row,1], "\nmed=", round(median(md.db[[row]]),1), "dB", "\nN=", df.results_os_cluster[row,"Total"])
}
# generate data frame to be graphed
df.results_graph = cbind(OCT.Score=df.results_os_cluster[,1], CI1[7:10], CI2[,4])
colnames(df.results_graph)[2:6] = names_col[1:5]
df.results_graph = within(df.results_graph,  OCT.Score <- factor(OCT.Score, levels=OCT.Score))
print(df.results_graph)
# melt
df.melted = melt(df.results_graph, variable.name = "criterion", value.name = "Hit.Rate")
# round hit rates to 2 sig figs
df.melted[,"Hit.Rate"] = round(df.melted[,"Hit.Rate"], digits=2)
# add CI columns
df.melted = cbind(df.melted,
lower.CI=c(CI1[,"lower.HAP2"], CI1[,"lower.UKGTS"], CI1[,"lower.GHT"], CI1[,"lower.FOST"], CI2[,"lower"]),
upper.CI=c(CI1[,"upper.HAP2"], CI1[,"upper.UKGTS"], CI1[,"upper.GHT"], CI1[,"upper.FOST"], CI2[,"upper"]))
print(df.melted)
plot.hist = ggplot(df.melted, aes(x=OCT.Score, y=Hit.Rate, fill=criterion)) +
geom_linerange(position=position_dodge(0.5), aes(ymin=lower.CI, ymax=upper.CI), size=0.8) +
geom_point(position = position_dodge(0.5), stat = "identity", aes(fill = criterion), size = 5, shape = 21, colour = "black", size = 5, stroke = 1.3) +
scale_fill_manual(values = c(GHT = "#bbbcbe", FOST = "#ffffb1", HAP2 = "#ffb1b1", UKGTS = "#b1e6fa", LOGTS = "white")) +
#geom_text(aes(label = Repeat.Error.Rate, group = criterion), size=6, hjust=0.5, vjust=3, position=position_dodge(0.9)) +
theme_bw(base_size = 22) +
ylim(0,1)
#theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
}
else if(x_var == "md"){
# create data frame to house graph variables
df.results_md_cluster = data.frame(matrix(0, nrow=4, ncol=length(names_col)+2))
colnames(df.results_md_cluster) = c("MD", names_col, "Total")
df.results_md_cluster[,1] = c(">10%", "2-10%", "0.5-2%", "<0.5%")
md.db_10 = md.db_5 = md.db_1 = md.db_05 = double()
for(pat in 1:nrow(df.results)){
md = df.results[pat,"MD.pval"]
#print(md)
if(is.na(md)){
row = 1
md.db_10 = c(md.db_10, round(as.double(as.character(df.results[pat,"MD.db"])), 2))
}
else if(md == 0.005){
row = 4
md.db_05 = c(md.db_05, round(as.double(as.character(df.results[pat,"MD.db"])), 2))
}
else if(md == 0.01){
row = 3
md.db_1 = c(md.db_1, round(as.double(as.character(df.results[pat,"MD.db"])), 2))
}
else if(md == 0.02){
row = 3
md.db_1 = c(md.db_1, round(as.double(as.character(df.results[pat,"MD.db"])), 2))
}
else if(md == 0.05){
row = 2
md.db_5 = c(md.db_5, round(as.double(as.character(df.results[pat,"MD.db"])), 2))
}
else if(md == 0.1){
row = 2
md.db_5 = c(md.db_5, round(as.double(as.character(df.results[pat,"MD.db"])), 2))
}
df.results_md_cluster[row,"Total"] = df.results_md_cluster[row,"Total"] + 1
for(col in names_col){
#print(pat)
if(df.results[pat,col] == T)
df.results_md_cluster[row,col] = df.results_md_cluster[row,col] + 1
}
}
assign("df.results_md_cluster", df.results_md_cluster, envir = .GlobalEnv)
# confidence intervals
CI1 = binom.confint(x=df.results_md_cluster[,2:5], n=df.results_md_cluster[,"Total"], methods="wilson")
CI2 = binom.confint(x=df.results_md_cluster[,6], n=df.results_md_cluster[,"Total"], methods="wilson")
# modify name of each bin
md.db = list(md.db_10, md.db_5, md.db_1, md.db_05)
for(row in 1:nrow(df.results_md_cluster)){
df.results_md_cluster[row,1] = paste0(df.results_md_cluster[row,1], "\nmed=", round(median(md.db[[row]]),1), "dB", "\nN=",df.results_md_cluster[row,"Total"])
}
# generate data frame to be graphed
df.results_graph = cbind(MD=df.results_md_cluster[,1], CI1[,7:10], CI2[,4])
colnames(df.results_graph)[2:6] = names_col[1:5]
df.results_graph = within(df.results_graph,  MD <- factor(MD, levels=MD))
print(df.results_graph)
# melt
df.melted = melt(df.results_graph, variable.name = "criterion", value.name = "Hit.Rate")
# round hit rates to 2 sig figs
df.melted[,"Hit.Rate"] = round(df.melted[,"Hit.Rate"], digits=2)
# add CI columns
df.melted = cbind(df.melted,
lower.CI=c(CI1[,"lower.HAP2"], CI1[,"lower.UKGTS"], CI1[,"lower.GHT"], CI1[,"lower.FOST"], CI2[,"lower"]),
upper.CI=c(CI1[,"upper.HAP2"], CI1[,"upper.UKGTS"], CI1[,"upper.GHT"], CI1[,"upper.FOST"], CI2[,"upper"]))
print(df.melted)
plot.hist = ggplot(df.melted, aes(x=MD, y=Hit.Rate, fill=criterion)) +
geom_linerange(position=position_dodge(0.5), aes(ymin=lower.CI, ymax=upper.CI), size=0.8) +
geom_point(position = position_dodge(0.5), stat = "identity", aes(fill = criterion), size = 5, shape = 21, colour = "black", size = 5, stroke = 1.3) +
scale_fill_manual(values = c(GHT = "#bbbcbe", FOST = "#ffffb1", HAP2 = "#ffb1b1", UKGTS = "#b1e6fa", LOGTS = "white")) +
#geom_text(aes(label = Repeat.Error.Rate, group = criterion), size=6, hjust=0.5, vjust=3, position=position_dodge(0.9)) +
theme_bw(base_size = 22) +
ylim(0,1)
#theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
#plot.hist = ggplot(df.melted, aes(x=MD, y=Hit.Rate, fill=criterion)) +
#  geom_bar(position = position_dodge(), stat = "identity") +
#  scale_fill_manual("criteria", values = c("GHT" = "#bbbcbe", "FOST" = "#ffffb1", "HAP2" = "#ffb1b1", "UKGTS" = "#b1e6fa")) +
#  geom_errorbar(position=position_dodge(0.9), width=.5, aes(ymin=lower.CI, ymax=upper.CI)) +
#  geom_text(aes(label = Hit.Rate, group = criterion), size=6, hjust=0.5, vjust=3, position=position_dodge(0.9)) +
#  theme_bw(base_size = 22) +
#  theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
}
else if(x_var == "rmd"){
# confidence intervals
CI = binom.confint(x=df.criteria_reproducibility_md[,c("HAP2","UKGTS","GHT","FOST","LOGTS")],
n=df.criteria_reproducibility_md[,c("HAP2.T","UKGTS.T","GHT.T","FOST.T","LOGTS.T")], methods="wilson")
# modify name of each bin
x_names=c("","","","")
for(row in 1:nrow(df.results_md_cluster)){
x_names[row] = paste0(df.results_md_cluster[row,1], "\n",
df.criteria_reproducibility_md[row,"HAP2.T"], "|",
df.criteria_reproducibility_md[row,"UKGTS.T"], "|",
df.criteria_reproducibility_md[row,"GHT.T"], "|",
df.criteria_reproducibility_md[row,"FOST.T"], "|",
df.criteria_reproducibility_md[row,"LOGTS.T"])
}
# generate data frame to be graphed
df.results_graph = cbind(MD=x_names, CI[,12:16])
colnames(df.results_graph)[2:6] = names_col[1:5]
df.results_graph = within(df.results_graph,  MD <- factor(MD, levels=MD))
print(df.results_graph)
# melt
df.melted = melt(df.results_graph, variable.name = "criterion", value.name = "Repeat.Error.Rate")
# round hit rates to 2 sig figs
df.melted[,"Repeat.Error.Rate"] = round(df.melted[,"Repeat.Error.Rate"], digits=2)
# add CI columns
df.melted = cbind(df.melted,
lower.CI=c(CI[,"lower.HAP2"], CI[,"lower.UKGTS"], CI[,"lower.GHT"], CI[,"lower.FOST"], CI[,"lower.LOGTS"]),
upper.CI=c(CI[,"upper.HAP2"], CI[,"upper.UKGTS"], CI[,"upper.GHT"], CI[,"upper.FOST"], CI[,"upper.LOGTS"]))
print(df.melted)
plot.hist = ggplot(df.melted, aes(x=MD, y=Repeat.Error.Rate, fill=criterion)) +
geom_linerange(position=position_dodge(0.5), aes(ymin=lower.CI, ymax=upper.CI), size=0.8) +
geom_point(position = position_dodge(0.5), stat = "identity", aes(fill = criterion), size = 5, shape = 21, colour = "black", size = 5, stroke = 1.3) +
scale_fill_manual(values = c(GHT = "#bbbcbe", FOST = "#ffffb1", HAP2 = "#ffb1b1", UKGTS = "#b1e6fa", LOGTS = "white")) +
#geom_text(aes(label = Repeat.Error.Rate, group = criterion), size=6, hjust=0.5, vjust=3, position=position_dodge(0.9)) +
theme_bw(base_size = 22) +
ylim(0,1)
}
else if(x_var == "ros"){
# confidence intervals
CI = binom.confint(x=df.criteria_reproducibility_os[,c("HAP2","UKGTS","GHT","FOST","LOGTS")],
n=df.criteria_reproducibility_os[,c("HAP2.T","UKGTS.T","GHT.T","FOST.T","LOGTS.T")], methods="wilson")
x_names=c("","","","")
for(row in 1:nrow(df.results_md_cluster)){
x_names[row] = paste0(df.results_os_cluster[row,1], "\n",
df.criteria_reproducibility_os[row,"HAP2.T"], "|",
df.criteria_reproducibility_os[row,"UKGTS.T"], "|",
df.criteria_reproducibility_os[row,"GHT.T"], "|",
df.criteria_reproducibility_os[row,"FOST.T"], "|",
df.criteria_reproducibility_os[row,"LOGTS.T"])
}
# generate data frame to be graphed
df.results_graph = cbind(OCT.Score=x_names, CI[,12:16])
colnames(df.results_graph)[2:6] = names_col[1:5]
df.results_graph = within(df.results_graph,  OCT.Score <- factor(OCT.Score, levels=OCT.Score))
print(df.results_graph)
# melt
df.melted = melt(df.results_graph, variable.name = "criterion", value.name = "Repeat.Error.Rate")
# round hit rates to 2 sig figs
df.melted[,"Repeat.Error.Rate"] = round(df.melted[,"Repeat.Error.Rate"], digits=2)
# add CI columns
df.melted = cbind(df.melted,
lower.CI=c(CI[,"lower.HAP2"], CI[,"lower.UKGTS"], CI[,"lower.GHT"], CI[,"lower.FOST"], CI[,"lower.LOGTS"]),
upper.CI=c(CI[,"upper.HAP2"], CI[,"upper.UKGTS"], CI[,"upper.GHT"], CI[,"upper.FOST"], CI[,"upper.LOGTS"]))
print(df.melted)
plot.hist = ggplot(df.melted, aes(x=OCT.Score, y=Repeat.Error.Rate, fill=criterion)) +
geom_linerange(position=position_dodge(0.5), aes(ymin=lower.CI, ymax=upper.CI), size=0.8) +
geom_point(position = position_dodge(0.5), stat = "identity", aes(fill = criterion), size = 5, shape = 21, colour = "black", size = 5, stroke = 1.3) +
scale_fill_manual(values = c(GHT = "#bbbcbe", FOST = "#ffffb1", HAP2 = "#ffb1b1", UKGTS = "#b1e6fa", LOGTS = "white")) +
#geom_text(aes(label = Repeat.Error.Rate, group = criterion), size=6, hjust=0.5, vjust=3, position=position_dodge(0.9)) +
theme_bw(base_size = 22) +
ylim(0,1)
}
return(plot.hist)
}
printClusteredHist(x_var = "ros")
printClusteredHist(x_var = "rmd")
printClusteredHist(x_var = "md")
printClusteredHist(x_var = "os")
View(df.best_match)
View(df.vf_data)
#' VF criteria application
#'
#' Apply Foster, HAP2, UKGTS criteria to all patients from a properly-formatted excel spreadsheet
#' @export
assignVfCriteria = function()
{
assign("df.criteria_results", data.frame("Patient.ID"=integer(), "Sex"=integer(), "Eye"=integer(), "Date.Time"=integer(),
"MD.db"=double(), "MD.pval"=double(),
"GHT"=integer(), "FOST"=integer(), "HAP2"=integer(),
"LOGTS"=integer(), "UKGTS"=integer(), "EAGLE"=integer(), "AGIS"=integer()),
envir = .GlobalEnv)
for(pat in 1:NUM_PAT)
{
df.criteria_results[pat,] <<- c(df.vf_data[(pat+VF_V_OFST),1], df.vf_data[(pat+VF_V_OFST),4],
df.vf_data[(pat+VF_V_OFST),3], df.vf_data[(pat+VF_V_OFST),MD_H_OFST-1],
df.vf_data[(pat+VF_V_OFST),MD_H_OFST],
checkGhtCriteria(pat), checkFostCriteria(pat), checkMhpaCriteria(pat),
checkLogtsCriteria(pat), checkUkgtsCriteria(pat), checkEagleCriteria(pat), checkAgisCriteria(pat))
}
}
assignVfCriteria()
#' VF criteria application
#'
#' Apply Foster, HAP2, UKGTS criteria to all patients from a properly-formatted excel spreadsheet
#' @export
assignVfCriteria = function()
{
assign("df.criteria_results", data.frame("Patient.ID"=integer(), "Eye"=integer(), "Date.Time"=integer(),
"MD.db"=double(), "MD.pval"=double(),
"GHT"=integer(), "FOST"=integer(), "HAP2"=integer(),
"LOGTS"=integer(), "UKGTS"=integer(), "EAGLE"=integer(), "AGIS"=integer()),
envir = .GlobalEnv)
for(pat in 1:NUM_PAT)
{
df.criteria_results[pat,] <<- c(df.vf_data[(pat+VF_V_OFST),1], df.vf_data[(pat+VF_V_OFST),4],
df.vf_data[(pat+VF_V_OFST),3], df.vf_data[(pat+VF_V_OFST),MD_H_OFST-1],
df.vf_data[(pat+VF_V_OFST),MD_H_OFST],
checkGhtCriteria(pat), checkFostCriteria(pat), checkMhpaCriteria(pat),
checkLogtsCriteria(pat), checkUkgtsCriteria(pat), checkEagleCriteria(pat), checkAgisCriteria(pat))
}
}
a = filter(df.best_match, grepl("R", Eye.Vf))
a
nrow(a)/nrow(df.best_match)
mean(df.best_match$MD.db)
mean(df.best_match[,MD.db])
mean(df.best_match[,"MD.db"])
mean(as.double(df.best_match[,"MD.db"])
)
mean(as.double(df.best_match$MD.db)
)
max(as.double(df.best_match$MD.db))
as.double(df.best_match[1,MD.db])
as.double(df.best_match[1,"MD.db"])
max(as.double(as.character(df.best_match$MD.db)))
mean(as.double(as.character(df.best_match$MD.db)))
sd(as.double(as.character(df.best_match$MD.db)))
qplot(as.double(as.character(df.best_match$MD.db)))
View(df.mrw_data)
a = inner_join(df.best_match, df.mrw_data[,c("Gender","Age")]), by = "Patient.ID")
a = inner_join(df.best_match, df.mrw_data[,c("Gender","Age")], by = "Patient.ID")
rownames(df.mrw_data)[1="Patient.ID"
rownames(df.mrw_data)
colnames(df.mrw_data)
colnames(df.mrw_data)[1]="Patient.ID"
a = inner_join(df.best_match, df.mrw_data[,c("Gender","Age")], by = "Patient.ID")
a = inner_join(df.best_match, df.mrw_data[,c("Gender","Age")], by = "Patient.ID")
a = inner_join(df.best_match, df.mrw_data[,c("Patient.ID","Gender","Age")], by = "Patient.ID")
typeof(df.mrw_data$Patient.ID)
typeof(df.best_match$Patient.ID)
typeof(df.best_match[1,"Patient.ID"])
typeof(df.mrw_data[1,"Patient.ID"])
a = inner_join(df.best_match[,"Patient.ID"], df.mrw_data[,c("Patient.ID","Gender","Age")], by = "Patient.ID")
sapply(df.best_match,class)
sapply(df.mrw_data,class)
as.numeric(levels(df.best_match$Patient.ID))[df.best_match$Patient.ID]
sapply(df.best_match,class)
as.numeric(levels(df.mrw_data$Patient.ID))[df.mrw_data$Patient.ID]
sapply(df.mrw_data,class)
as.numeric(levels(df.best_match$Patient.ID))[,Patient.ID]
as.numeric(levels(df.best_match$Patient.ID))[,"Patient.ID"]
df.best_match$Patient.ID = as.numeric(levels(df.best_match$Patient.ID))[df.best_match$Patient.ID]
sapply(df.best_match,class)
a = inner_join(df.best_match[,"Patient.ID"], df.mrw_data[,c("Patient.ID","Gender","Age")], by = "Patient.ID")
df.mrw_data$Patient.ID = as.numeric(df.mrw_data$Patient.ID)
a = inner_join(df.best_match[,"Patient.ID"], df.mrw_data[,c("Patient.ID","Gender","Age")], by = "Patient.ID")
sapply(df.mrw_data,class)
df.mrw_data$Patient.ID = as.integer(df.mrw_data$Patient.ID)
df.best_match$Patient.ID = as.integer(df.best_match$Patient.ID)
sapply(df.best_match,class)
a = inner_join(df.best_match[,"Patient.ID"], df.mrw_data[,c("Patient.ID","Gender","Age")], by = "Patient.ID")
a = inner_join(df.best_match[,"Patient.ID"], df.mrw_data[,"Patient.ID"], by = "Patient.ID")
a = inner_join(df.best_match$Patient.ID, df.mrw_data$Patient.ID, by = "Patient.ID")
for(id in df.best_match$Patient.ID){}
for(id in df.best_match$Patient.ID){}
for(id in df.best_match$Patient.ID){
age = vector()
gender = vector()
for(id in df.best_match$Patient.ID){
for(j in df.mrw_data$Patient.ID){
if(id == df.mrw_data[j,"Patient.ID"]){
age = c(age,df.mrw_data[j,"Age"])
gender = c(gender,df.mrw_data[j,"Gender"])
}
}
}
age
age = vector()
gender = vector()
for(id in df.best_match$Patient.ID){
for(j in df.mrw_data$Patient.ID){
if(id == df.mrw_data[j,"Patient.ID"]){
age = c(age,df.mrw_data[j,"Age"])
gender = c(gender,df.mrw_data[j,"Gender"])
}
}
}
for(id in df.best_match[,"Patient.ID"]){
for(j in df.mrw_data$Patient.ID){
if(id == df.mrw_data[j,"Patient.ID"]){
age = c(age,df.mrw_data[j,"Age"])
gender = c(gender,df.mrw_data[j,"Gender"])
}
}
}
for(i in df.best_match[,"Patient.ID"]){
for(j in df.mrw_data$Patient.ID){
if(df.best_match[i,"Patient.ID"] == df.mrw_data[j,"Patient.ID"]){
age = c(age,df.mrw_data[j,"Age"])
gender = c(gender,df.mrw_data[j,"Gender"])
}
}
}
for(i in df.best_match[,"Patient.ID"]){
for(j in df.mrw_data$Patient.ID){
if(!is.na(df.best_match[i,"Patient.ID"] && !is.na(df.mrw_data[j,"Patient.ID"]))){
if(df.best_match[i,"Patient.ID"] == df.mrw_data[j,"Patient.ID"]){
age = c(age,df.mrw_data[j,"Age"])
gender = c(gender,df.mrw_data[j,"Gender"])
}
}
}
}
i in df.best_match[,"Patient.ID"]
for(i in df.best_match[,"Patient.ID"]){print(i)}
for(id in df.best_match$Patient.ID){
for(j in 1:nrow(df.mrw_data$Patient.ID)){
if(id == df.mrw_data[j,"Patient.ID"]){
age = c(age,df.mrw_data[j,"Age"])
gender = c(gender,df.mrw_data[j,"Gender"])
}
}
}
nrow(df.mrw_data$Patient.ID)
nrow(df.mrw_data[,"Patient.ID"])
View(df.mrw_data)
nrow(df.mrw_data)
for(id in df.best_match$Patient.ID){
for(j in 1:nrow(df.mrw_data)){
if(id == df.mrw_data[j,"Patient.ID"]){
age = c(age,df.mrw_data[j,"Age"])
gender = c(gender,df.mrw_data[j,"Gender"])
}
}
}
age
gender
age = vector()
gender = vector()
for(id in df.best_match$Patient.ID){
for(j in 1:nrow(df.mrw_data)){
if(id == df.mrw_data[j,"Patient.ID"]){
age = c(age,df.mrw_data[j,"Age"])
gender = c(gender,df.mrw_data[j,"Gender"])
break
}
}
}
age
length(age)
length(gender)
mean(age)
sd(age)
count(1, gender)
table(gender)
598/1230
table(df.best_match$Eye.Vf)
640/1230
