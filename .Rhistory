<<<<<<< HEAD
=======
CIs = binom.confint(x=df.results_os_cluster[1:4,2:5], n=df.results_os_cluster[1:4,6], methods="wilson")
# modify name of each bin
for(row in 1:nrow(df.results_os_cluster)){
df.results_os_cluster[row,1] = paste0(df.results_os_cluster[row,1], "\nN=", df.results_os_cluster[row,6])
}
# generate data frame to be graphed
df.results_graph = cbind(OCT.Score=df.results_os_cluster[,1], CIs[,7:18])
colnames(df.results_graph)[2:5] = c("GHT", "FOST", "MHPA", "UKGTS")
df.results_graph = within(df.results_graph,  OCT.Score <- factor(OCT.Score, levels=OCT.Score))
print(df.results_graph)
# melt
df.melted = melt(df.results_graph[,1:5], variable.name = "criterion", value.name = "Hit.Rate")
# round hit rates to 2 sig figs
df.melted[,"Hit.Rate"] = round(df.melted[,"Hit.Rate"], digits=2)
# add CI columns
df.melted = cbind(df.melted,
lower.CI=c(df.results_graph[,"lower.GHT"], df.results_graph[,"lower.FOST"], df.results_graph[,"lower.MHPA"], df.results_graph[,"lower.UKGTS"]),
upper.CI=c(df.results_graph[,"upper.GHT"], df.results_graph[,"upper.FOST"], df.results_graph[,"upper.MHPA"], df.results_graph[,"upper.UKGTS"]))
print(df.melted)
plot.hist = ggplot(df.melted, aes(x=OCT.Score, y=Hit.Rate, fill=criterion)) +
geom_point(position = position_dodge(0.5), stat = "identity", aes(fill = criterion), size = 5, shape = 21, colour = "black", size = 5, stroke = 1) +
scale_fill_manual(values = c(GHT = "#bbbcbe", FOST = "#ffffb1", MHPA = "#ffb1b1", UKGTS = "#b1e6fa")) +
geom_errorbar(position=position_dodge(0.5), width=.4, aes(ymin=lower.CI, ymax=upper.CI)) +
#geom_text(aes(label = Hit.Rate, group = criterion), size=6, hjust=0.5, vjust=3, position=position_dodge(0.9)) +
theme_bw(base_size = 22) #+
#theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
}
else if(x_var == "md"){
# create data frame to house graph variables
df.results_md_cluster = data.frame("MD"=1:4, "GHT"=1:4, "FOST"=1:4, "MHPA"=1:4, "UKGTS"=1:4,  "NUM"=1:4)
df.results_md_cluster[,1] = c(">10%", "2-10%", "0.5-2%", "<0.5%")
md.db_10 = md.db_5 = md.db_1 = md.db_05 = double()
for(row in 1:nrow(df.results_md_cluster)){
for(col in 2:ncol(df.results_md_cluster)){
df.results_md_cluster[row,col] = 0
}
}
for(pat in 1:nrow(df.results)){
md = df.results[pat,"MD.pval"]
#print(md)
if(is.na(md)){
row = 1
md.db_10 = c(md.db_10, round(as.double(as.character(df.results[pat,"MD.db"])), 2))
}
else if(md == 0.005){
row = 4
md.db_05 = c(md.db_05, round(as.double(as.character(df.results[pat,"MD.db"])), 2))
}
else if(md == 0.01){
row = 3
md.db_1 = c(md.db_1, round(as.double(as.character(df.results[pat,"MD.db"])), 2))
}
else if(md == 0.02){
row = 3
md.db_1 = c(md.db_1, round(as.double(as.character(df.results[pat,"MD.db"])), 2))
}
else if(md == 0.05){
row = 2
md.db_5 = c(md.db_5, round(as.double(as.character(df.results[pat,"MD.db"])), 2))
}
else if(md == 0.1){
row = 2
md.db_5 = c(md.db_5, round(as.double(as.character(df.results[pat,"MD.db"])), 2))
}
df.results_md_cluster[row,6] = df.results_md_cluster[row,6] + 1
for(col in c("GHT", "FOST", "UKGTS", "MHPA")){
#print(pat)
if(df.results[pat,col] == T)
df.results_md_cluster[row,col] = df.results_md_cluster[row,col] + 1
}
}
assign("df.results_md_cluster", df.results_md_cluster, envir = .GlobalEnv)
# confidence intervals
#CIs = rbind(binom.confint(x=df.results_md_cluster[1:4,2:5], n=df.results_md_cluster[1:4,6], methods="wilson"),
#            binom.confint(x=df.results_md_cluster[3:6,2:5], n=df.results_md_cluster[3:6,6], methods="wilson")[3:4,])
CIs = binom.confint(x=df.results_md_cluster[,2:5], n=df.results_md_cluster[,6], methods="wilson")
# modify name of each bin
md.db = list(md.db_10, md.db_5, md.db_1, md.db_05)
for(row in 1:nrow(df.results_md_cluster)){
df.results_md_cluster[row,1] = paste0(df.results_md_cluster[row,1], "\nmed=", median(md.db[[row]]), "dB", "\nN=",df.results_md_cluster[row,6])
}
# generate data frame to be graphed
df.results_graph = cbind(MD=df.results_md_cluster[,1], CIs[,7:18])
colnames(df.results_graph)[2:5] = c("GHT", "FOST", "MHPA", "UKGTS")
df.results_graph = within(df.results_graph,  MD <- factor(MD, levels=MD))
print(df.results_graph)
# melt
df.melted = melt(df.results_graph[,1:5], variable.name = "criterion", value.name = "Hit.Rate")
# round hit rates to 2 sig figs
df.melted[,"Hit.Rate"] = round(df.melted[,"Hit.Rate"], digits=2)
# add CI columns
df.melted = cbind(df.melted,
lower.CI=c(df.results_graph[,"lower.GHT"], df.results_graph[,"lower.FOST"], df.results_graph[,"lower.MHPA"], df.results_graph[,"lower.UKGTS"]),
upper.CI=c(df.results_graph[,"upper.GHT"], df.results_graph[,"upper.FOST"], df.results_graph[,"upper.MHPA"], df.results_graph[,"upper.UKGTS"]))
print(df.melted)
plot.hist = ggplot(df.melted, aes(x=MD, y=Hit.Rate, fill=criterion)) +
geom_point(position = position_dodge(0.5), stat = "identity", aes(fill = criterion), size = 5, shape = 21, colour = "black", size = 5, stroke = 1) +
scale_fill_manual(values = c(GHT = "#bbbcbe", FOST = "#ffffb1", MHPA = "#ffb1b1", UKGTS = "#b1e6fa")) +
geom_errorbar(position=position_dodge(0.5), width=.4, aes(ymin=lower.CI, ymax=upper.CI)) +
#geom_text(aes(label = Hit.Rate, group = criterion), size=6, hjust=0.5, vjust=3, position=position_dodge(0.9)) +
theme_bw(base_size = 22) #+
#theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
#plot.hist = ggplot(df.melted, aes(x=MD, y=Hit.Rate, fill=criterion)) +
#  geom_bar(position = position_dodge(), stat = "identity") +
#  scale_fill_manual("criteria", values = c("GHT" = "#bbbcbe", "FOST" = "#ffffb1", "MHPA" = "#ffb1b1", "UKGTS" = "#b1e6fa")) +
#  geom_errorbar(position=position_dodge(0.9), width=.5, aes(ymin=lower.CI, ymax=upper.CI)) +
#  geom_text(aes(label = Hit.Rate, group = criterion), size=6, hjust=0.5, vjust=3, position=position_dodge(0.9)) +
#  theme_bw(base_size = 22) +
#  theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
}
else if(x_var == "rev"){
# confidence intervals
#CIs = rbind(binom.confint(x=df.results_md_cluster[1:4,2:5], n=df.results_md_cluster[1:4,6], methods="wilson"),
#            binom.confint(x=df.results_md_cluster[3:6,2:5], n=df.results_md_cluster[3:6,6], methods="wilson")[3:4,])
CIs = binom.confint(x=df.criteria_consistency[1:4,2:5], n=df.criteria_consistency[1:4, "Total"], methods="wilson")
# modify name of each bin
x_names = paste0(df.criteria_consistency[1:4,1], "\nN=", df.criteria_consistency[1:4, "Total"])
# generate data frame to be graphed
df.results_graph = cbind(MD=x_names, CIs[,7:18])
colnames(df.results_graph)[2:5] = c("GHT", "FOST", "MHPA", "UKGTS")
df.results_graph = within(df.results_graph,  MD <- factor(MD, levels=MD))
print(df.results_graph)
# melt
df.melted = melt(df.results_graph[,1:5], variable.name = "criterion", value.name = "Repeat.Error.Rate")
# round hit rates to 2 sig figs
>>>>>>> cb2e6bb2fe39cf0846a2dbb2a5dbbf732d063fcc
df.melted[,"Repeat.Error.Rate"] = round(df.melted[,"Repeat.Error.Rate"], digits=2)
# add CI columns
df.melted = cbind(df.melted,
lower.CI=c(CI1[,"lower.MHPA"], CI1[,"lower.UKGTS"], CI1[,"lower.GHT"], CI1[,"lower.FOST"], CI2[,"lower"]),
upper.CI=c(CI1[,"upper.MHPA"], CI1[,"upper.UKGTS"], CI1[,"upper.GHT"], CI1[,"upper.FOST"], CI2[,"upper"]))
print(df.melted)
plot.hist = ggplot(df.melted, aes(x=OCT.Score, y=Repeat.Error.Rate, fill=criterion)) +
geom_point(position = position_dodge(0.5), stat = "identity", aes(fill = criterion), size = 5, shape = 21, colour = "black", size = 5, stroke = 1) +
scale_fill_manual(values = c(GHT = "#bbbcbe", FOST = "#ffffb1", MHPA = "#ffb1b1", UKGTS = "#b1e6fa", LOGTS = "white")) +
geom_errorbar(position=position_dodge(0.5), width=.4, aes(ymin=lower.CI, ymax=upper.CI)) +
#geom_text(aes(label = Repeat.Error.Rate, group = criterion), size=6, hjust=0.5, vjust=3, position=position_dodge(0.9)) +
theme_bw(base_size = 22)
}
return(plot.hist)
}
printClusteredHist(x_var = "os")
#' Clustered histogram for MD and criteria results
#'
#' Print histogram where criteria (Foster, MHPA, UKGTS, and GHT) results are clustered within their MD percentiles (10, 5, 2, 1, and 0.5 %)
#' @export
printClusteredHist = function(df.results = df.best_match, x_var = "os")
{
df.results = df.best_match
names_col = c("MHPA", "UKGTS", "GHT","FOST", "LOGTS", "EAGLE", "AGIS")
if(x_var == "os"){
# create data frame to house graph variables
df.results_os_cluster = data.frame(matrix(0, nrow=4, ncol=length(names_col)+2))
colnames(df.results_os_cluster) = c("OCT.Score", names_col, "Total")
df.results_os_cluster[,1] = c("0", "1-3", "4-5","6")
# record counts of OCT scores in the cells
for(pat in 1:nrow(df.results)){
os = df.results[pat,"OCT.Score"]
#print(pat)
if(os == 0){
row = 1
}
else if(inside.range(os, c(1,3))){
row = 2
}
else if(inside.range(os, c(4,5))){
row = 3
}
else if(os == 6){
row = 4
}
# increment count of OCT bin
df.results_os_cluster[row,"Total"] = df.results_os_cluster[row,"Total"] + 1
# increment count of OCT-VFcriterion cell
for(col in names_col){
#print(pat)
if(df.results[pat,col] == T)
df.results_os_cluster[row,col] = df.results_os_cluster[row,col] + 1
}
}
assign("df.results_os_cluster", df.results_os_cluster, envir = .GlobalEnv)
# confidence intervals
CI1 = binom.confint(x=df.results_os_cluster[,2:5], n=df.results_os_cluster[,"Total"], methods="wilson")
CI2 = binom.confint(x=df.results_os_cluster[,6], n=df.results_os_cluster[,"Total"], methods="wilson")
# modify name of each bin
for(row in 1:nrow(df.results_os_cluster)){
df.results_os_cluster[row,1] = paste0(df.results_os_cluster[row,1], "\nN=", df.results_os_cluster[row,"Total"])
}
# generate data frame to be graphed
df.results_graph = cbind(OCT.Score=df.results_os_cluster[,1], CI1[7:10], CI2[,4])
colnames(df.results_graph)[2:6] = names_col[1:5]
df.results_graph = within(df.results_graph,  OCT.Score <- factor(OCT.Score, levels=OCT.Score))
print(df.results_graph)
# melt
df.melted = melt(df.results_graph, variable.name = "criterion", value.name = "Hit.Rate")
# round hit rates to 2 sig figs
df.melted[,"Hit.Rate"] = round(df.melted[,"Hit.Rate"], digits=2)
# add CI columns
df.melted = cbind(df.melted,
lower.CI=c(CI1[,"lower.MHPA"], CI1[,"lower.UKGTS"], CI1[,"lower.GHT"], CI1[,"lower.FOST"], CI2[,"lower"]),
upper.CI=c(CI1[,"upper.MHPA"], CI1[,"upper.UKGTS"], CI1[,"upper.GHT"], CI1[,"upper.FOST"], CI2[,"upper"]))
print(df.melted)
plot.hist = ggplot(df.melted, aes(x=OCT.Score, y=Hit.Rate, fill=criterion)) +
geom_point(position = position_dodge(0.5), stat = "identity", aes(fill = criterion), size = 5, shape = 21, colour = "black", size = 5, stroke = 1) +
scale_fill_manual(values = c(MHPA = "#ffb1b1", UKGTS = "#b1e6fa", GHT = "#bbbcbe", FOST = "#ffffb1", LOGTS = "white")) +
geom_errorbar(position=position_dodge(0.5), width=.4, aes(ymin=lower.CI, ymax=upper.CI)) +
#geom_text(aes(label = Hit.Rate, group = criterion), size=6, hjust=0.5, vjust=3, position=position_dodge(0.9)) +
theme_bw(base_size = 22) #+
#theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
}
else if(x_var == "md"){
# create data frame to house graph variables
df.results_md_cluster = data.frame(matrix(0, nrow=4, ncol=length(names_col)+2))
colnames(df.results_md_cluster) = c("MD", names_col, "Total")
df.results_md_cluster[,1] = c(">10%", "2-10%", "0.5-2%", "<0.5%")
md.db_10 = md.db_5 = md.db_1 = md.db_05 = double()
for(pat in 1:nrow(df.results)){
md = df.results[pat,"MD.pval"]
#print(md)
if(is.na(md)){
row = 1
md.db_10 = c(md.db_10, round(as.double(as.character(df.results[pat,"MD.db"])), 2))
}
else if(md == 0.005){
row = 4
md.db_05 = c(md.db_05, round(as.double(as.character(df.results[pat,"MD.db"])), 2))
}
else if(md == 0.01){
row = 3
md.db_1 = c(md.db_1, round(as.double(as.character(df.results[pat,"MD.db"])), 2))
}
else if(md == 0.02){
row = 3
md.db_1 = c(md.db_1, round(as.double(as.character(df.results[pat,"MD.db"])), 2))
}
else if(md == 0.05){
row = 2
md.db_5 = c(md.db_5, round(as.double(as.character(df.results[pat,"MD.db"])), 2))
}
else if(md == 0.1){
row = 2
md.db_5 = c(md.db_5, round(as.double(as.character(df.results[pat,"MD.db"])), 2))
}
df.results_md_cluster[row,"Total"] = df.results_md_cluster[row,"Total"] + 1
for(col in names_col){
#print(pat)
if(df.results[pat,col] == T)
df.results_md_cluster[row,col] = df.results_md_cluster[row,col] + 1
}
}
assign("df.results_md_cluster", df.results_md_cluster, envir = .GlobalEnv)
# confidence intervals
CI1 = binom.confint(x=df.results_md_cluster[,2:5], n=df.results_md_cluster[,"Total"], methods="wilson")
CI2 = binom.confint(x=df.results_md_cluster[,6], n=df.results_md_cluster[,"Total"], methods="wilson")
# modify name of each bin
md.db = list(md.db_10, md.db_5, md.db_1, md.db_05)
for(row in 1:nrow(df.results_md_cluster)){
df.results_md_cluster[row,1] = paste0(df.results_md_cluster[row,1], "\nmed=", median(md.db[[row]]), "dB", "\nN=",df.results_md_cluster[row,6])
}
# generate data frame to be graphed
df.results_graph = cbind(MD=df.results_md_cluster[,1], CI1[,7:10], CI2[,4])
colnames(df.results_graph)[2:6] = names_col[1:5]
df.results_graph = within(df.results_graph,  MD <- factor(MD, levels=MD))
print(df.results_graph)
# melt
df.melted = melt(df.results_graph, variable.name = "criterion", value.name = "Hit.Rate")
# round hit rates to 2 sig figs
df.melted[,"Hit.Rate"] = round(df.melted[,"Hit.Rate"], digits=2)
# add CI columns
df.melted = cbind(df.melted,
lower.CI=c(CI1[,"lower.MHPA"], CI1[,"lower.UKGTS"], CI1[,"lower.GHT"], CI1[,"lower.FOST"], CI2[,"lower"]),
upper.CI=c(CI1[,"upper.MHPA"], CI1[,"upper.UKGTS"], CI1[,"upper.GHT"], CI1[,"upper.FOST"], CI2[,"upper"]))
print(df.melted)
plot.hist = ggplot(df.melted, aes(x=MD, y=Hit.Rate, fill=criterion)) +
geom_point(position = position_dodge(0.5), stat = "identity", aes(fill = criterion), size = 5, shape = 21, colour = "black", size = 5, stroke = 1) +
scale_fill_manual(values = c(GHT = "#bbbcbe", FOST = "#ffffb1", MHPA = "#ffb1b1", UKGTS = "#b1e6fa", LOGTS = "white")) +
geom_errorbar(position=position_dodge(0.5), width=.4, aes(ymin=lower.CI, ymax=upper.CI)) +
#geom_text(aes(label = Hit.Rate, group = criterion), size=6, hjust=0.5, vjust=3, position=position_dodge(0.9)) +
theme_bw(base_size = 22) #+
#theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
#plot.hist = ggplot(df.melted, aes(x=MD, y=Hit.Rate, fill=criterion)) +
#  geom_bar(position = position_dodge(), stat = "identity") +
#  scale_fill_manual("criteria", values = c("GHT" = "#bbbcbe", "FOST" = "#ffffb1", "MHPA" = "#ffb1b1", "UKGTS" = "#b1e6fa")) +
#  geom_errorbar(position=position_dodge(0.9), width=.5, aes(ymin=lower.CI, ymax=upper.CI)) +
#  geom_text(aes(label = Hit.Rate, group = criterion), size=6, hjust=0.5, vjust=3, position=position_dodge(0.9)) +
#  theme_bw(base_size = 22) +
#  theme(panel.border = element_blank(), panel.grid.major = element_blank(), panel.grid.minor = element_blank(), axis.line = element_line(colour = "black"))
}
else if(x_var == "rmd"){
# confidence intervals
CI1 = binom.confint(x=df.criteria_reproducibility_md[1:4,2:5], n=df.criteria_reproducibility_md[1:4,"Num"], methods="wilson")
CI2 = binom.confint(x=df.criteria_reproducibility_md[1:4,6], n=df.criteria_reproducibility_md[1:4,"Num"], methods="wilson")
# modify name of each bin
x_names = paste0(df.criteria_reproducibility_md[1:4,1], "\nN=", df.criteria_reproducibility_md[1:4, "Num"])
# generate data frame to be graphed
df.results_graph = cbind(MD=x_names, CI1[,7:10], CI2[,4])
colnames(df.results_graph)[2:6] = names_col[1:5]
df.results_graph = within(df.results_graph,  MD <- factor(MD, levels=MD))
print(df.results_graph)
# melt
df.melted = melt(df.results_graph, variable.name = "criterion", value.name = "Repeat.Error.Rate")
# round hit rates to 2 sig figs
df.melted[,"Repeat.Error.Rate"] = round(df.melted[,"Repeat.Error.Rate"], digits=2)
# add CI columns
df.melted = cbind(df.melted,
lower.CI=c(CI1[,"lower.MHPA"], CI1[,"lower.UKGTS"], CI1[,"lower.GHT"], CI1[,"lower.FOST"], CI2[,"lower"]),
upper.CI=c(CI1[,"upper.MHPA"], CI1[,"upper.UKGTS"], CI1[,"upper.GHT"], CI1[,"upper.FOST"], CI2[,"upper"]))
print(df.melted)
plot.hist = ggplot(df.melted, aes(x=MD, y=Repeat.Error.Rate, fill=criterion)) +
geom_point(position = position_dodge(0.5), stat = "identity", aes(fill = criterion), size = 5, shape = 21, colour = "black", size = 5, stroke = 1) +
scale_fill_manual(values = c(GHT = "#bbbcbe", FOST = "#ffffb1", MHPA = "#ffb1b1", UKGTS = "#b1e6fa", LOGTS = "white")) +
geom_errorbar(position=position_dodge(0.5), width=.4, aes(ymin=lower.CI, ymax=upper.CI)) +
#geom_text(aes(label = Repeat.Error.Rate, group = criterion), size=6, hjust=0.5, vjust=3, position=position_dodge(0.9)) +
theme_bw(base_size = 22)
}
else if(x_var == "ros"){
# confidence intervals
CI1 = binom.confint(x=df.criteria_reproducibility_os[1:4,2:5], n=df.criteria_reproducibility_os[1:4,"Num"], methods="wilson")
CI2 = binom.confint(x=df.criteria_reproducibility_os[1:4,6], n=df.criteria_reproducibility_os[1:4,"Num"], methods="wilson")
# modify name of each bin
x_names = paste0(df.criteria_reproducibility_os[1:4,1], "\nN=", df.criteria_reproducibility_os[1:4, "Num"])
# generate data frame to be graphed
df.results_graph = cbind(OCT.Score=x_names, CI1[,7:10], CI2[,4])
colnames(df.results_graph)[2:6] = names_col[1:5]
df.results_graph = within(df.results_graph,  OCT.Score <- factor(OCT.Score, levels=OCT.Score))
print(df.results_graph)
# melt
df.melted = melt(df.results_graph, variable.name = "criterion", value.name = "Repeat.Error.Rate")
# round hit rates to 2 sig figs
df.melted[,"Repeat.Error.Rate"] = round(df.melted[,"Repeat.Error.Rate"], digits=2)
# add CI columns
df.melted = cbind(df.melted,
lower.CI=c(CI1[,"lower.MHPA"], CI1[,"lower.UKGTS"], CI1[,"lower.GHT"], CI1[,"lower.FOST"], CI2[,"lower"]),
upper.CI=c(CI1[,"upper.MHPA"], CI1[,"upper.UKGTS"], CI1[,"upper.GHT"], CI1[,"upper.FOST"], CI2[,"upper"]))
print(df.melted)
plot.hist = ggplot(df.melted, aes(x=OCT.Score, y=Repeat.Error.Rate, fill=criterion)) +
geom_point(position = position_dodge(0.5), stat = "identity", aes(fill = criterion), size = 5, shape = 21, colour = "black", size = 5, stroke = 1) +
scale_fill_manual(values = c(GHT = "#bbbcbe", FOST = "#ffffb1", MHPA = "#ffb1b1", UKGTS = "#b1e6fa", LOGTS = "white")) +
geom_errorbar(position=position_dodge(0.5), width=.4, aes(ymin=lower.CI, ymax=upper.CI)) +
#geom_text(aes(label = Repeat.Error.Rate, group = criterion), size=6, hjust=0.5, vjust=3, position=position_dodge(0.9)) +
theme_bw(base_size = 22)
}
return(plot.hist)
}
printClusteredHist(x_var = "os")
printClusteredHist(x_var = "ros")
View(df.criteria_reproducibility_md)
#' OCT Score
#'
#' Assigns OCT score to patient based on RNFLT, MRW, and GCLT
#' @param df.results formatted results to be used
#' @return none
#' @export
checkCriteriaConsistency = function()
{
df.criteria_consistency = data.frame(matrix(0, nrow=6, ncol=4))
colnames(df.criteria_consistency) = c("GHT", "FOST", "MHPA", "UKGTS")
rownames(df.criteria_consistency) = c(">10%", "2-10%", "0.5-2%", "<0.5%", "Reversals", "Total unique VF pairs")
df.criteria_consistency = data.frame("MD"=rownames(df.criteria_consistency), df.criteria_consistency)
for(pat.i in 1:nrow(df.best_match)){
id = df.best_match[pat.i,"Patient.ID"]
date1 = df.best_match[pat.i,"Date.Vf"]
for(pat.j in which(as.integer(df.criteria_results[,"Patient.ID"]) == id)){
date2 = as.Date.POSIXct(as.double(df.criteria_results[pat.j,"Date.Time"]))
if(date2 > date1){
if(df.best_match[pat.i,"GHT"] == T){
df.criteria_consistency["Total unique VF pairs","GHT"] = df.criteria_consistency["Total unique VF pairs","GHT"] + 1
if(df.criteria_results[pat.j,"GHT"] == F){
md = df.best_match[pat.i,"MD.pval"]
if(is.na(md)){
row = ">10%"
}
else if(md == 0.005){
row = "<0.5%"
}
else if(md == 0.01){
row = "0.5-2%"
}
else if(md == 0.02){
row = "0.5-2%"
}
else if(md == 0.05){
row = "2-10%"
}
else if(md == 0.1){
row = "2-10%"
}
df.criteria_consistency[row,"GHT"] = df.criteria_consistency[row,"GHT"] + 1
df.criteria_consistency["Reversals","GHT"] = df.criteria_consistency["Reversals","GHT"] + 1
break
}
}
}
}
for(pat.j in which(as.integer(df.criteria_results[,"Patient.ID"]) == id)){
date2 = as.Date.POSIXct(as.double(df.criteria_results[pat.j,"Date.Time"]))
if(date2 > date1){
if(df.best_match[pat.i,"FOST"] == T){
df.criteria_consistency["Total unique VF pairs","FOST"] = df.criteria_consistency["Total unique VF pairs","FOST"] + 1
if(df.criteria_results[pat.j,"FOST"] == F){
md = df.best_match[pat.i,"MD.pval"]
if(is.na(md)){
row = ">10%"
}
else if(md == 0.005){
row = "<0.5%"
}
else if(md == 0.01){
row = "0.5-2%"
}
else if(md == 0.02){
row = "0.5-2%"
}
else if(md == 0.05){
row = "2-10%"
}
else if(md == 0.1){
row = "2-10%"
}
df.criteria_consistency[row,"FOST"] = df.criteria_consistency[row,"FOST"] + 1
df.criteria_consistency["Reversals","FOST"] = df.criteria_consistency["Reversals","FOST"] + 1
break
}
}
}
}
for(pat.j in which(as.integer(df.criteria_results[,"Patient.ID"]) == id)){
date2 = as.Date.POSIXct(as.double(df.criteria_results[pat.j,"Date.Time"]))
if(date2 > date1){
if(df.best_match[pat.i,"MHPA"] == T){
df.criteria_consistency["Total unique VF pairs","MHPA"] = df.criteria_consistency["Total unique VF pairs","MHPA"] + 1
if(df.criteria_results[pat.j,"MHPA"] == F){
md = df.best_match[pat.i,"MD.pval"]
if(is.na(md)){
row = ">10%"
}
else if(md == 0.005){
row = "<0.5%"
}
else if(md == 0.01){
row = "0.5-2%"
}
else if(md == 0.02){
row = "0.5-2%"
}
else if(md == 0.05){
row = "2-10%"
}
else if(md == 0.1){
row = "2-10%"
}
df.criteria_consistency[row,"MHPA"] = df.criteria_consistency[row,"MHPA"] + 1
df.criteria_consistency["Reversals","MHPA"] = df.criteria_consistency["Reversals","MHPA"] + 1
break
}
}
}
}
for(pat.j in which(as.integer(df.criteria_results[,"Patient.ID"]) == id)){
date2 = as.Date.POSIXct(as.double(df.criteria_results[pat.j,"Date.Time"]))
if(date2 > date1){
if(df.best_match[pat.i,"UKGTS"] == T){
df.criteria_consistency["Total unique VF pairs","UKGTS"] = df.criteria_consistency["Total unique VF pairs","UKGTS"] + 1
if(df.criteria_results[pat.j,"UKGTS"] == F){
md = df.best_match[pat.i,"MD.pval"]
if(is.na(md)){
row = ">10%"
}
else if(md == 0.005){
row = "<0.5%"
}
<<<<<<< HEAD
else if(md == 0.01){
row = "0.5-2%"
}
else if(md == 0.02){
row = "0.5-2%"
}
else if(md == 0.05){
row = "2-10%"
}
else if(md == 0.1){
row = "2-10%"
}
df.criteria_consistency[row,"UKGTS"] = df.criteria_consistency[row,"UKGTS"] + 1
df.criteria_consistency["Reversals","UKGTS"] = df.criteria_consistency["Reversals","UKGTS"] + 1
break
}
}
}
}
}
df.criteria_consistency = data.frame(df.criteria_consistency, Total=c(sum(df.criteria_consistency[1,2:5]), sum(df.criteria_consistency[2,2:5]), sum(df.criteria_consistency[3,2:5]), sum(df.criteria_consistency[4,2:5]), 0, 0))
assign("df.criteria_consistency", df.criteria_consistency, envir = .GlobalEnv)
print(df.criteria_consistency)
}
checkCriteriaConsistency()
#' Reproducibility
#'
#' Assigns OCT score to patient based on RNFLT, MRW, and GCLT
#' @param df.results formatted results to be used
#' @return none
#' @export
checkCriteriaReproducibility = function()
{
names_col = c("MHPA", "UKGTS", "GHT","FOST", "LOGTS", "EAGLE", "AGIS", "Num")
names_row = c(">10%", "2-10%", "0.5-2%", "<0.5%", "Total")
df.criteria_reproducibility_md = data.frame(matrix(0, nrow=length(names_row), ncol=length(names_col)))
colnames(df.criteria_reproducibility_md) = names_col
rownames(df.criteria_reproducibility_md) = names_row
df.criteria_reproducibility_md = data.frame("MD"=rownames(df.criteria_reproducibility_md), df.criteria_reproducibility_md)
names_row = c("6", "4-5", "1-3", "0", "Total")
df.criteria_reproducibility_os = data.frame(matrix(0, nrow=length(names_row), ncol=length(names_col)))
colnames(df.criteria_reproducibility_os) = names_col
rownames(df.criteria_reproducibility_os) = names_row
df.criteria_reproducibility_os = data.frame("OCT.Score"=rownames(df.criteria_reproducibility_os), df.criteria_reproducibility_os)
for(pat.i in 1:nrow(df.best_match)){
ght = fost = mhpa = logts = ukgts = eagle = agis = F
row = row2 = ""
id = df.best_match[pat.i,"Patient.ID"]
date1 = df.best_match[pat.i,"Date.Vf"]
for(pat.j in which(as.integer(df.criteria_results[,"Patient.ID"]) == id)){
date2 = as.Date.POSIXct(as.double(df.criteria_results[pat.j,"Date.Time"]))
if(date2 > date1){
md = df.best_match[pat.i,"MD.pval"]
if(is.na(md)){
row = ">10%"
}
else if(md == 0.005){
row = "<0.5%"
}
else if(md == 0.01){
row = "0.5-2%"
}
else if(md == 0.02){
row = "0.5-2%"
}
else if(md == 0.05){
row = "2-10%"
}
else if(md == 0.1){
row = "2-10%"
}
os = df.best_match[pat.i,"OCT.Score"]
if(os == 0){
row2 = "0"
}
else if(inside.range(os, c(1,3))){
row2 = "1-3"
}
else if(inside.range(os, c(4,5))){
row2 = "4-5"
}
else if(os == 6){
row2 = "6"
}
if((ght == F) && (fost == F) && (mhpa == F) && (ukgts == F)){
if((df.best_match[pat.i,"GHT"] == T) || (df.best_match[pat.i,"FOST"] == T) || (df.best_match[pat.i,"MHPA"] == T) || (df.best_match[pat.i,"UKGTS"] == T))
df.criteria_reproducibility_md[row,"Num"] = df.criteria_reproducibility_md[row,"Num"] + 1
df.criteria_reproducibility_os[row2,"Num"] = df.criteria_reproducibility_os[row2,"Num"] + 1
}
if((ght == F) && (df.best_match[pat.i,"GHT"] == T)){
df.criteria_reproducibility_md["Total","GHT"] = df.criteria_reproducibility_md["Total","GHT"] + 1
df.criteria_reproducibility_os["Total","GHT"] = df.criteria_reproducibility_os["Total","GHT"] + 1
if(df.criteria_results[pat.j,"GHT"] == F){
ght = T
df.criteria_reproducibility_md[row,"GHT"] = df.criteria_reproducibility_md[row,"GHT"] + 1
df.criteria_reproducibility_os[row2,"GHT"] = df.criteria_reproducibility_os[row2,"GHT"] + 1
}
}
if((fost == F) && (df.best_match[pat.i,"FOST"] == T)){
df.criteria_reproducibility_md["Total","FOST"] = df.criteria_reproducibility_md["Total","FOST"] + 1
df.criteria_reproducibility_os["Total","FOST"] = df.criteria_reproducibility_os["Total","FOST"] + 1
if(df.criteria_results[pat.j,"FOST"] == F){
fost = T
df.criteria_reproducibility_md[row,"FOST"] = df.criteria_reproducibility_md[row,"FOST"] + 1
df.criteria_reproducibility_os[row2,"FOST"] = df.criteria_reproducibility_os[row2,"FOST"] + 1
}
}
if((mhpa == F) && (df.best_match[pat.i,"MHPA"] == T)){
df.criteria_reproducibility_md["Total","MHPA"] = df.criteria_reproducibility_md["Total","MHPA"] + 1
df.criteria_reproducibility_os["Total","MHPA"] = df.criteria_reproducibility_os["Total","MHPA"] + 1
if(df.criteria_results[pat.j,"MHPA"] == F){
mhpa = T
df.criteria_reproducibility_md[row,"MHPA"] = df.criteria_reproducibility_md[row,"MHPA"] + 1
df.criteria_reproducibility_os[row2,"MHPA"] = df.criteria_reproducibility_os[row2,"MHPA"] + 1
}
}
if((logts == F) && (df.best_match[pat.i,"LOGTS"] == T)){
df.criteria_reproducibility_md["Total","LOGTS"] = df.criteria_reproducibility_md["Total","LOGTS"] + 1
df.criteria_reproducibility_os["Total","LOGTS"] = df.criteria_reproducibility_os["Total","LOGTS"] + 1
if(df.criteria_results[pat.j,"LOGTS"] == F){
logts = T
df.criteria_reproducibility_md[row,"LOGTS"] = df.criteria_reproducibility_md[row,"LOGTS"] + 1
df.criteria_reproducibility_os[row2,"LOGTS"] = df.criteria_reproducibility_os[row2,"LOGTS"] + 1
}
}
if((ukgts == F) && (df.best_match[pat.i,"UKGTS"] == T)){
df.criteria_reproducibility_md["Total","UKGTS"] = df.criteria_reproducibility_md["Total","UKGTS"] + 1
df.criteria_reproducibility_os["Total","UKGTS"] = df.criteria_reproducibility_os["Total","UKGTS"] + 1
if(df.criteria_results[pat.j,"UKGTS"] == F){
ukgts = T
df.criteria_reproducibility_md[row,"UKGTS"] = df.criteria_reproducibility_md[row,"UKGTS"] + 1
df.criteria_reproducibility_os[row2,"UKGTS"] = df.criteria_reproducibility_os[row2,"UKGTS"] + 1
}
}
if((eagle == F) && (df.best_match[pat.i,"EAGLE"] == T)){
df.criteria_reproducibility_md["Total","EAGLE"] = df.criteria_reproducibility_md["Total","EAGLE"] + 1
df.criteria_reproducibility_os["Total","EAGLE"] = df.criteria_reproducibility_os["Total","EAGLE"] + 1
if(df.criteria_results[pat.j,"EAGLE"] == F){
eagle = T
df.criteria_reproducibility_md[row,"EAGLE"] = df.criteria_reproducibility_md[row,"EAGLE"] + 1
df.criteria_reproducibility_os[row2,"EAGLE"] = df.criteria_reproducibility_os[row2,"EAGLE"] + 1
}
}
if((agis == F) && (df.best_match[pat.i,"AGIS"] == T)){
df.criteria_reproducibility_md["Total","AGIS"] = df.criteria_reproducibility_md["Total","AGIS"] + 1
df.criteria_reproducibility_os["Total","AGIS"] = df.criteria_reproducibility_os["Total","AGIS"] + 1
if(df.criteria_results[pat.j,"AGIS"] == F){
agis = T
df.criteria_reproducibility_md[row,"AGIS"] = df.criteria_reproducibility_md[row,"AGIS"] + 1
df.criteria_reproducibility_os[row2,"AGIS"] = df.criteria_reproducibility_os[row2,"AGIS"] + 1
}
}
}
}
}
assign("df.criteria_reproducibility_md", df.criteria_reproducibility_md, envir = .GlobalEnv)
assign("df.criteria_reproducibility_os", df.criteria_reproducibility_os, envir = .GlobalEnv)
print(df.criteria_reproducibility_md)
print(df.criteria_reproducibility_os)
}
checkCriteriaReproducibility()
rm(CI1, CI2, CIs)
rm(plot.hist, md.db)
rm(col)
rm(row, md.db_05, md.db_1)
rm(md.db_10)
rm(md.db_5)
=======
printClusteredHist(x_var = "rev")
install.packages(c("binom", "gridGraphics"))
>>>>>>> cb2e6bb2fe39cf0846a2dbb2a5dbbf732d063fcc
