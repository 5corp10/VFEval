else
o = o + 1
}
areas = c("FOST"=f, "MHPA"=m, "UKGTS"=u, "GHT"=g,
"FOST&MHPA"=f_m, "FOST&UKGTS"=f_u, "FOST&GHT"=f_g, "MHPA&UKGTS"=m_u, "MHPA&GHT"=m_g, "UKGTS&GHT"=u_g,
"FOST&MHPA&UKGTS"=f_m_u, "FOST&MHPA&GHT"=f_m_g, "FOST&UKGTS&GHT"=f_u_g, "MHPA&UKGTS&GHT"=m_u_g,
"FOST&MHPA&UKGTS&GHT"=f_m_u_g)
#areas = c("F1"=0,"M1"=0,"U1"=0,"G1"=0,"F1&M1"=0,"F1&U1"=0,"F1&G1"=0,"M1&U1"=0,"M1&G1"=0,"U1&G1"=0,"F1&M1&U1"=0,"F1&M1&G1"=0,"F1&U1&G1"=0,"M1&U1&G1"=0,"F1&M1&U1&G1"=0,
#          "F2"=0,"M2"=0,"U2"=0,"G2"=0,"F2&M2"=0,"F2&U2"=0,"F2&G2"=0,"M2&U2"=0,"M2&G2"=0,"U2&G2"=0,"F2&M2&U2"=0,"F2&M2&G2"=0,"F2&U2&G2"=0,"M2&U2&G2"=0,"F2&M2&U2&G2"=0,
#          "F3"=0,"M3"=0,"U3"=0,"G3"=0,"F3&M3"=0,"F3&U3"=0,"F3&G3"=0,"M3&U3"=0,"M3&G3"=0,"U3&G3"=0,"F3&M3&U3"=0,"F3&M3&G3"=0,"F3&U3&G3"=0,"M3&U3&G3"=0,"F3&M3&U3&G3"=0,
#          "F4"=0,"M4"=0,"U4"=0,"G4"=0,"F4&M4"=0,"F4&U4"=0,"F4&G4"=0,"M4&U4"=0,"M4&G4"=0,"U4&G4"=0,"F4&M4&U4"=0,"F4&M4&G4"=0,"F4&U4&G4"=0,"M4&U4&G4"=0,"F4&M4&U4&G4"=0,
#          "F5"=0,"M5"=0,"U5"=0,"G5"=0,"F5&M5"=0,"F5&U5"=0,"F5&G5"=0,"M5&U5"=0,"M5&G5"=0,"U5&G5"=0,"F5&M5&U5"=0,"F5&M5&G5"=0,"F5&U5&G5"=0,"M5&U5&G5"=0,"F5&M5&U5&G5"=0,
#          "F6"=0,"M6"=0,"U6"=0,"G6"=0,"F6&M6"=0,"F6&U6"=0,"F6&G6"=0,"M6&U6"=0,"M6&G6"=0,"U6&G6"=0,"F6&M6&U6"=0,"F6&M6&G6"=0,"F6&U6&G6"=0,"M6&U6&G6"=0,"F6&M6&U6&G6"=0)
df.interx[,var_category] <<- c(f, m, u, g, f_m, f_u, f_g, m_u, m_g, u_g, f_m_u, f_m_g, f_u_g, m_u_g, f_m_u_g, o)
v = venneuler(areas)
v$labels <- c("", "", "", "")
plot(v)
text(.5, 0.1, var_category, cex=2)
#text(.4, 0.9, paste0("F&G&M&U(grey) = ", f_m_u_g), cex=1)
#text(.4, 0.85, paste0("M&U(green) = ", m_u), cex=1)
#text(.6, 0.9, paste0("M(yellow) = ", m), cex=1)
#text(.6, 0.85, paste0("U(blue) = ", u), cex=1)
}
View(df.best_match)
#' Euler & Clustered Histo for MD subgroups
#'
#' Print Euler diagrams and Clustered Histogram for each fo the MD percentiles (10, 5, 2, 1, and 0.5 %)
#' @export
printFigure1 = function(df.results=df.best_match)
{
names = c("FOST", "MHPA", "UKGTS", "GHT", "LOGTS",
"FOST&MHPA", "FOST&UKGTS", "FOST&GHT", "FOST&LOGTS", "MHPA&UKGTS",
"MHPA&GHT", "MHPA&LOGTS", "UKGTS&GHT", "UKGTS&LOGTS", "GHT&LOGTS",
"FOST&MHPA&UKGTS", "FOST&MHPA&GHT", "FOST&MHPA&LOGTS", "FOST&UKGTS&GHT", "FOST&UKGTS&LOGTS",
"FOST&GHT&LOGTS", "MHPA&UKGTS&GHT", "MHPA&GHT&LOGTS", "MHPA&UKGTS&LOGTS", "UKGTS&GHT&LOGTS",
"FOST&MHPA&UKGTS&GHT", "FOST&MHPA&UKGTS&LOGTS", "FOST&MHPA&GHT&LOGTS", "FOST&UKGTS&GHT&LOGTS", "MHPA&UKGTS&GHT&LOGTS",
"FOST&MHPA&UKGTS&GHT&LOGTS", "Neither")
md_subgroups = c("<0.5%", "0.5-2%", "2-10%", ">10.0%")
df.results_md_05 = df.results_md_2 = df.results_md_10 = df.results_md_11 = data.frame(FOST=logical(), MHPA=logical(), UKGTS=logical(), GHT=logical(), LOGTS=logical())
df.interx = data.frame(matrix(NA, nrow = length(names), ncol = length(md_subgroups)))
rownames(df.interx) = names
colnames(df.interx) = md_subgroups
assign("df.interx", df.interx, envir = .GlobalEnv)
col_range = which(colnames(df.results)=="GHT"):which(colnames(df.results)=="UKGTS")
for(pat in 1:nrow(df.results)){
md = df.results[pat,"MD.pval"]
if(is.na(md)){
df.results_md_11 = rbind(df.results_md_11, df.results[pat,col_range])
}
else if(md == 0.005){
df.results_md_05 = rbind(df.results_md_05, df.results[pat,col_range])
}
else if(md == 0.01){
df.results_md_2 = rbind(df.results_md_2, df.results[pat,col_range])
}
else if(md == 0.02){
df.results_md_2 = rbind(df.results_md_2, df.results[pat,col_range])
}
else if(md == 0.05){
df.results_md_10 = rbind(df.results_md_10, df.results[pat,col_range])
}
else if(md == 0.1){
df.results_md_10 = rbind(df.results_md_10, df.results[pat,col_range])
}
}
ls.results_md = list(df.results_md_05, df.results_md_2, df.results_md_10, df.results_md_11)
par(mfrow=c(2,2), mar=c(0.2,0.2,0.2,0.2))
for(i in 1:length(ls.results_md)){
printEulerDiag(md_subgroups[i], as.data.frame(ls.results_md[i]))
}
p = recordPlot()
dev.off()
h = printClusteredHist(df.results, "md")
plot_grid(p, h, ncol = 1, labels = c("", ""))
}
#' Euler diagram
#'
#' Print euler diagram (i.e. weighted venn diagram) for the overlapping criteria results groups
#' @export
printEulerDiag = function(var_category = "all", df.results = df.best_match)
{
o = 0
f = m = u = g = l = 0
f_m = f_u = f_g = f_l = m_u = m_g = m_l = u_g = u_l = g_l = 0
f_m_u = f_m_g = f_m_l = f_u_g = f_u_l = f_g_l = m_u_g = m_u_l = m_g_l = u_g_l = 0
f_m_u_g = f_m_u_l = f_m_g_l = f_u_g_l = m_u_g_l = 0
f_m_u_g_l = 0
for(pat in 1:nrow(df.results)){
#print(pat)
fost = df.results[pat,"FOST"]
mhpa = df.results[pat,"MHPA"]
ukgts = df.results[pat,"UKGTS"]
ght = df.results[pat,"GHT"]
logts = df.results[pat,"LOGTS"]
if((fost == T) && (mhpa == T) && (ukgts == T) && (ght == T) && (logts == T))
f_m_u_g_l = f_m_u_g_l + 1
else if((fost == T) && (mhpa == T) && (ukgts == T) && (ght == T))
f_m_u_g = f_m_u_g + 1
else if((fost == T) && (mhpa == T) && (ukgts == T) && (logts == T))
f_m_u_l = f_m_u_l + 1
else if((fost == T) && (mhpa == T) && (ght == T) && (logts == T))
f_m_g_l = f_m_g_l + 1
else if((fost == T) && (ukgts == T) && (ght == T) && (logts == T))
f_u_g_l = f_u_g_l + 1
else if((mhpa == T) && (ukgts == T) && (ght == T) && (logts == T))
m_u_g_l = m_u_g_l + 1
else if ((fost == T) && (mhpa == T) && (ukgts == T))
f_m_u = f_m_u + 1
else if ((fost == T) && (mhpa == T) && (ght == T))
f_m_g = f_m_g + 1
else if ((fost == T) && (mhpa == T) && (logts == T))
f_m_l = f_m_l + 1
else if ((fost == T) && (ukgts == T) && (ght == T))
f_u_g = f_u_g + 1
else if ((fost == T) && (ukgts == T) && (logts == T))
f_u_l = f_u_l + 1
else if ((fost == T) && (ght == T) && (logts == T))
f_g_l = f_g_l + 1
else if ((mhpa == T) && (ukgts == T) && (ght == T))
m_u_g = m_u_g + 1
else if ((mhpa == T) && (ukgts == T) && (logts == T))
m_u_l = m_u_l + 1
else if ((mhpa == T) && (ght == T) && (logts == T))
m_g_l = m_g_l + 1
else if ((ukgts == T) && (ght == T) && (logts == T))
u_g_l = u_g_l + 1
f_m = f_u = f_g = f_l = m_u = m_g = m_l = u_g = u_l = g_l = 0
else if ((fost == T) && (mhpa == T))
f_m = f_m + 1
else if ((fost == T) && (ukgts == T))
f_u = f_u + 1
else if ((fost == T) && (ght == T))
f_g = f_g + 1
else if ((fost == T) && (logts == T))
f_l = f_l + 1
else if ((mhpa == T) && (ukgts == T))
m_u = m_u + 1
else if ((mhpa == T) && (ght == T))
m_g = m_g + 1
else if ((mhpa == T) && (logts == T))
m_l = m_l + 1
else if ((ukgts == T) && (ght == T))
u_g = u_g + 1
else if ((ukgts == T) && (logts == T))
u_l = u_l + 1
else if ((ght == T) && (logts == T))
g_l = g_l + 1
else if ((fost == T))
f = f + 1
else if ((mhpa == T))
m = m + 1
else if ((ukgts == T))
u = u + 1
else if ((ght == T))
g = g + 1
else if ((logts == T))
l = l + 1
else
o = o + 1
}
areas = c("FOST"=f, "MHPA"=m, "UKGTS"=u, "GHT"=g, "LOGTS"=l,
"FOST&MHPA"=f_m, "FOST&UKGTS"=f_u, "FOST&GHT"=f_g, "FOST&LOGTS"=f_l, "MHPA&UKGTS"=m_u,
"MHPA&GHT"=m_g, "MHPA&LOGTS"=m_l, "UKGTS&GHT"=u_g, "UKGTS&LOGTS"=u_l, "GHT&LOGTS"=g_l,
"FOST&MHPA&UKGTS"=f_m_u, "FOST&MHPA&GHT"=f_m_g, "FOST&MHPA&LOGTS"=f_m_l, "FOST&UKGTS&GHT"=f_u_g, "FOST&UKGTS&LOGTS"=f_u_l,
"FOST&GHT&LOGTS"=f_g_l, "MHPA&UKGTS&GHT"=m_u_g, "MHPA&GHT&LOGTS"=m_g_l, "MHPA&UKGTS&LOGTS"=m_u_l, "UKGTS&GHT&LOGTS"=u_g_l,
"FOST&MHPA&UKGTS&GHT"=f_m_u_g, "FOST&MHPA&UKGTS&LOGTS"=f_m_u_l, "FOST&MHPA&GHT&LOGTS"=f_m_g_l, "FOST&UKGTS&GHT&LOGTS"=f_u_g_l, "MHPA&UKGTS&GHT&LOGTS"=m_u_g_l,
"FOST&MHPA&UKGTS&GHT&LOGTS"=f_m_u_g_l)
#areas = c("F1"=0,"M1"=0,"U1"=0,"G1"=0,"F1&M1"=0,"F1&U1"=0,"F1&G1"=0,"M1&U1"=0,"M1&G1"=0,"U1&G1"=0,"F1&M1&U1"=0,"F1&M1&G1"=0,"F1&U1&G1"=0,"M1&U1&G1"=0,"F1&M1&U1&G1"=0,
#          "F2"=0,"M2"=0,"U2"=0,"G2"=0,"F2&M2"=0,"F2&U2"=0,"F2&G2"=0,"M2&U2"=0,"M2&G2"=0,"U2&G2"=0,"F2&M2&U2"=0,"F2&M2&G2"=0,"F2&U2&G2"=0,"M2&U2&G2"=0,"F2&M2&U2&G2"=0,
#          "F3"=0,"M3"=0,"U3"=0,"G3"=0,"F3&M3"=0,"F3&U3"=0,"F3&G3"=0,"M3&U3"=0,"M3&G3"=0,"U3&G3"=0,"F3&M3&U3"=0,"F3&M3&G3"=0,"F3&U3&G3"=0,"M3&U3&G3"=0,"F3&M3&U3&G3"=0,
#          "F4"=0,"M4"=0,"U4"=0,"G4"=0,"F4&M4"=0,"F4&U4"=0,"F4&G4"=0,"M4&U4"=0,"M4&G4"=0,"U4&G4"=0,"F4&M4&U4"=0,"F4&M4&G4"=0,"F4&U4&G4"=0,"M4&U4&G4"=0,"F4&M4&U4&G4"=0,
#          "F5"=0,"M5"=0,"U5"=0,"G5"=0,"F5&M5"=0,"F5&U5"=0,"F5&G5"=0,"M5&U5"=0,"M5&G5"=0,"U5&G5"=0,"F5&M5&U5"=0,"F5&M5&G5"=0,"F5&U5&G5"=0,"M5&U5&G5"=0,"F5&M5&U5&G5"=0,
#          "F6"=0,"M6"=0,"U6"=0,"G6"=0,"F6&M6"=0,"F6&U6"=0,"F6&G6"=0,"M6&U6"=0,"M6&G6"=0,"U6&G6"=0,"F6&M6&U6"=0,"F6&M6&G6"=0,"F6&U6&G6"=0,"M6&U6&G6"=0,"F6&M6&U6&G6"=0)
df.interx[,var_category] <<- c(f, m, u, g, l,
f_m, f_u, f_g, f_l, m_u, m_g, m_l, u_g, u_l, g_l,
f_m_u, f_m_g, f_m_l, f_u_g, f_u_l, f_g_l, m_u_g, m_u_l, m_g_l, u_g_l,
f_m_u_g, f_m_u_l, f_m_g_l, f_u_g_l, m_u_g_l,
f_m_u_g_l,
o)
v = venneuler(areas)
v$labels <- c("", "", "", "")
plot(v)
text(.5, 0.1, var_category, cex=2)
#text(.4, 0.9, paste0("F&G&M&U(grey) = ", f_m_u_g), cex=1)
#text(.4, 0.85, paste0("M&U(green) = ", m_u), cex=1)
#text(.6, 0.9, paste0("M(yellow) = ", m), cex=1)
#text(.6, 0.85, paste0("U(blue) = ", u), cex=1)
}
#' Euler diagram
#'
#' Print euler diagram (i.e. weighted venn diagram) for the overlapping criteria results groups
#' @export
printEulerDiag = function(var_category = "all", df.results = df.best_match)
{
o = 0
f = m = u = g = l = 0
f_m = f_u = f_g = f_l = m_u = m_g = m_l = u_g = u_l = g_l = 0
f_m_u = f_m_g = f_m_l = f_u_g = f_u_l = f_g_l = m_u_g = m_u_l = m_g_l = u_g_l = 0
f_m_u_g = f_m_u_l = f_m_g_l = f_u_g_l = m_u_g_l = 0
f_m_u_g_l = 0
for(pat in 1:nrow(df.results)){
#print(pat)
fost = df.results[pat,"FOST"]
mhpa = df.results[pat,"MHPA"]
ukgts = df.results[pat,"UKGTS"]
ght = df.results[pat,"GHT"]
logts = df.results[pat,"LOGTS"]
if((fost == T) && (mhpa == T) && (ukgts == T) && (ght == T) && (logts == T))
f_m_u_g_l = f_m_u_g_l + 1
else if((fost == T) && (mhpa == T) && (ukgts == T) && (ght == T))
f_m_u_g = f_m_u_g + 1
else if((fost == T) && (mhpa == T) && (ukgts == T) && (logts == T))
f_m_u_l = f_m_u_l + 1
else if((fost == T) && (mhpa == T) && (ght == T) && (logts == T))
f_m_g_l = f_m_g_l + 1
else if((fost == T) && (ukgts == T) && (ght == T) && (logts == T))
f_u_g_l = f_u_g_l + 1
else if((mhpa == T) && (ukgts == T) && (ght == T) && (logts == T))
m_u_g_l = m_u_g_l + 1
else if ((fost == T) && (mhpa == T) && (ukgts == T))
f_m_u = f_m_u + 1
else if ((fost == T) && (mhpa == T) && (ght == T))
f_m_g = f_m_g + 1
else if ((fost == T) && (mhpa == T) && (logts == T))
f_m_l = f_m_l + 1
else if ((fost == T) && (ukgts == T) && (ght == T))
f_u_g = f_u_g + 1
else if ((fost == T) && (ukgts == T) && (logts == T))
f_u_l = f_u_l + 1
else if ((fost == T) && (ght == T) && (logts == T))
f_g_l = f_g_l + 1
else if ((mhpa == T) && (ukgts == T) && (ght == T))
m_u_g = m_u_g + 1
else if ((mhpa == T) && (ukgts == T) && (logts == T))
m_u_l = m_u_l + 1
else if ((mhpa == T) && (ght == T) && (logts == T))
m_g_l = m_g_l + 1
else if ((ukgts == T) && (ght == T) && (logts == T))
u_g_l = u_g_l + 1
else if ((fost == T) && (mhpa == T))
f_m = f_m + 1
else if ((fost == T) && (ukgts == T))
f_u = f_u + 1
else if ((fost == T) && (ght == T))
f_g = f_g + 1
else if ((fost == T) && (logts == T))
f_l = f_l + 1
else if ((mhpa == T) && (ukgts == T))
m_u = m_u + 1
else if ((mhpa == T) && (ght == T))
m_g = m_g + 1
else if ((mhpa == T) && (logts == T))
m_l = m_l + 1
else if ((ukgts == T) && (ght == T))
u_g = u_g + 1
else if ((ukgts == T) && (logts == T))
u_l = u_l + 1
else if ((ght == T) && (logts == T))
g_l = g_l + 1
else if ((fost == T))
f = f + 1
else if ((mhpa == T))
m = m + 1
else if ((ukgts == T))
u = u + 1
else if ((ght == T))
g = g + 1
else if ((logts == T))
l = l + 1
else
o = o + 1
}
areas = c("FOST"=f, "MHPA"=m, "UKGTS"=u, "GHT"=g, "LOGTS"=l,
"FOST&MHPA"=f_m, "FOST&UKGTS"=f_u, "FOST&GHT"=f_g, "FOST&LOGTS"=f_l, "MHPA&UKGTS"=m_u,
"MHPA&GHT"=m_g, "MHPA&LOGTS"=m_l, "UKGTS&GHT"=u_g, "UKGTS&LOGTS"=u_l, "GHT&LOGTS"=g_l,
"FOST&MHPA&UKGTS"=f_m_u, "FOST&MHPA&GHT"=f_m_g, "FOST&MHPA&LOGTS"=f_m_l, "FOST&UKGTS&GHT"=f_u_g, "FOST&UKGTS&LOGTS"=f_u_l,
"FOST&GHT&LOGTS"=f_g_l, "MHPA&UKGTS&GHT"=m_u_g, "MHPA&GHT&LOGTS"=m_g_l, "MHPA&UKGTS&LOGTS"=m_u_l, "UKGTS&GHT&LOGTS"=u_g_l,
"FOST&MHPA&UKGTS&GHT"=f_m_u_g, "FOST&MHPA&UKGTS&LOGTS"=f_m_u_l, "FOST&MHPA&GHT&LOGTS"=f_m_g_l, "FOST&UKGTS&GHT&LOGTS"=f_u_g_l, "MHPA&UKGTS&GHT&LOGTS"=m_u_g_l,
"FOST&MHPA&UKGTS&GHT&LOGTS"=f_m_u_g_l)
#areas = c("F1"=0,"M1"=0,"U1"=0,"G1"=0,"F1&M1"=0,"F1&U1"=0,"F1&G1"=0,"M1&U1"=0,"M1&G1"=0,"U1&G1"=0,"F1&M1&U1"=0,"F1&M1&G1"=0,"F1&U1&G1"=0,"M1&U1&G1"=0,"F1&M1&U1&G1"=0,
#          "F2"=0,"M2"=0,"U2"=0,"G2"=0,"F2&M2"=0,"F2&U2"=0,"F2&G2"=0,"M2&U2"=0,"M2&G2"=0,"U2&G2"=0,"F2&M2&U2"=0,"F2&M2&G2"=0,"F2&U2&G2"=0,"M2&U2&G2"=0,"F2&M2&U2&G2"=0,
#          "F3"=0,"M3"=0,"U3"=0,"G3"=0,"F3&M3"=0,"F3&U3"=0,"F3&G3"=0,"M3&U3"=0,"M3&G3"=0,"U3&G3"=0,"F3&M3&U3"=0,"F3&M3&G3"=0,"F3&U3&G3"=0,"M3&U3&G3"=0,"F3&M3&U3&G3"=0,
#          "F4"=0,"M4"=0,"U4"=0,"G4"=0,"F4&M4"=0,"F4&U4"=0,"F4&G4"=0,"M4&U4"=0,"M4&G4"=0,"U4&G4"=0,"F4&M4&U4"=0,"F4&M4&G4"=0,"F4&U4&G4"=0,"M4&U4&G4"=0,"F4&M4&U4&G4"=0,
#          "F5"=0,"M5"=0,"U5"=0,"G5"=0,"F5&M5"=0,"F5&U5"=0,"F5&G5"=0,"M5&U5"=0,"M5&G5"=0,"U5&G5"=0,"F5&M5&U5"=0,"F5&M5&G5"=0,"F5&U5&G5"=0,"M5&U5&G5"=0,"F5&M5&U5&G5"=0,
#          "F6"=0,"M6"=0,"U6"=0,"G6"=0,"F6&M6"=0,"F6&U6"=0,"F6&G6"=0,"M6&U6"=0,"M6&G6"=0,"U6&G6"=0,"F6&M6&U6"=0,"F6&M6&G6"=0,"F6&U6&G6"=0,"M6&U6&G6"=0,"F6&M6&U6&G6"=0)
df.interx[,var_category] <<- c(f, m, u, g, l,
f_m, f_u, f_g, f_l, m_u, m_g, m_l, u_g, u_l, g_l,
f_m_u, f_m_g, f_m_l, f_u_g, f_u_l, f_g_l, m_u_g, m_u_l, m_g_l, u_g_l,
f_m_u_g, f_m_u_l, f_m_g_l, f_u_g_l, m_u_g_l,
f_m_u_g_l,
o)
v = venneuler(areas)
v$labels <- c("", "", "", "")
plot(v)
text(.5, 0.1, var_category, cex=2)
#text(.4, 0.9, paste0("F&G&M&U(grey) = ", f_m_u_g), cex=1)
#text(.4, 0.85, paste0("M&U(green) = ", m_u), cex=1)
#text(.6, 0.9, paste0("M(yellow) = ", m), cex=1)
#text(.6, 0.85, paste0("U(blue) = ", u), cex=1)
}
printFigure1()
View(df.interx)
print(df.interx)
#' Euler & Clustered Histo for OCT Score subgroups
#'
#' Print Euler diagrams and Clustered Histogram for each fo the OCT scores (0-6)
#' @export
printFigure2 = function(df.results=df.best_match)
{
names = c("FOST", "MHPA", "UKGTS", "GHT", "LOGTS",
"FOST&MHPA", "FOST&UKGTS", "FOST&GHT", "FOST&LOGTS", "MHPA&UKGTS",
"MHPA&GHT", "MHPA&LOGTS", "UKGTS&GHT", "UKGTS&LOGTS", "GHT&LOGTS",
"FOST&MHPA&UKGTS", "FOST&MHPA&GHT", "FOST&MHPA&LOGTS", "FOST&UKGTS&GHT", "FOST&UKGTS&LOGTS",
"FOST&GHT&LOGTS", "MHPA&UKGTS&GHT", "MHPA&GHT&LOGTS", "MHPA&UKGTS&LOGTS", "UKGTS&GHT&LOGTS",
"FOST&MHPA&UKGTS&GHT", "FOST&MHPA&UKGTS&LOGTS", "FOST&MHPA&GHT&LOGTS", "FOST&UKGTS&GHT&LOGTS", "MHPA&UKGTS&GHT&LOGTS",
"FOST&MHPA&UKGTS&GHT&LOGTS", "Neither")
os_subgroups = c("6", "4-5", "1-3", "0")
df.results_os_0 = df.results_os_13 = df.results_os_45 = df.results_os_6 = data.frame(FOST=logical(), GHT=logical(), MHPA=logical(), LOGTS=logical(), UKGTS=logical())
df.interx = data.frame(matrix(NA, nrow = length(names), ncol = length(md_subgroups)))
rownames(df.interx) = names
colnames(df.interx) = os_subgroups
assign("df.interx", df.interx, envir = .GlobalEnv)
col_range = which(colnames(df.results)=="FOST"):which(colnames(df.results)=="GHT")
for(pat in 1:nrow(df.results)){
os = df.results[pat,"OCT.Score"]
if(os == 0){
df.results_os_0 = rbind(df.results_os_0, df.results[pat,col_range])
}
else if(inside.range(os, c(1,3))){
df.results_os_13 = rbind(df.results_os_13, df.results[pat,col_range])
}
else if(inside.range(os, c(4,5))){
df.results_os_45 = rbind(df.results_os_45, df.results[pat,col_range])
}
else if(os == 6){
df.results_os_6 = rbind(df.results_os_6, df.results[pat,col_range])
}
}
ls.results_os = list(df.results_os_6, df.results_os_45, df.results_os_13, df.results_os_0)
par(mfrow=c(2,2), mar=c(0.2,0.2,0.2,0.2))
for(i in 1:length(ls.results_os)){
printEulerDiag(os_subgroups[i], as.data.frame(ls.results_os[i]))
}
p = recordPlot()
dev.off()
h = printClusteredHist(df.results, "os")
plot_grid(p, h, ncol = 1, labels = c("", ""))
}
#' Euler & Clustered Histo for MD subgroups
#'
#' Print Euler diagrams and Clustered Histogram for each fo the MD percentiles (10, 5, 2, 1, and 0.5 %)
#' @export
printFigure1 = function(df.results=df.best_match)
{
names = c("FOST", "MHPA", "UKGTS", "GHT", "LOGTS",
"FOST&MHPA", "FOST&UKGTS", "FOST&GHT", "FOST&LOGTS", "MHPA&UKGTS",
"MHPA&GHT", "MHPA&LOGTS", "UKGTS&GHT", "UKGTS&LOGTS", "GHT&LOGTS",
"FOST&MHPA&UKGTS", "FOST&MHPA&GHT", "FOST&MHPA&LOGTS", "FOST&UKGTS&GHT", "FOST&UKGTS&LOGTS",
"FOST&GHT&LOGTS", "MHPA&UKGTS&GHT", "MHPA&GHT&LOGTS", "MHPA&UKGTS&LOGTS", "UKGTS&GHT&LOGTS",
"FOST&MHPA&UKGTS&GHT", "FOST&MHPA&UKGTS&LOGTS", "FOST&MHPA&GHT&LOGTS", "FOST&UKGTS&GHT&LOGTS", "MHPA&UKGTS&GHT&LOGTS",
"FOST&MHPA&UKGTS&GHT&LOGTS", "Neither")
md_subgroups = c("<0.5%", "0.5-2%", "2-10%", ">10.0%")
df.results_md_05 = df.results_md_2 = df.results_md_10 = df.results_md_11 = data.frame(FOST=logical(), GHT=logical(), MHPA=logical(), LOGTS=logical(), UKGTS=logical())
df.interx = data.frame(matrix(NA, nrow = length(names), ncol = length(md_subgroups)))
rownames(df.interx) = names
colnames(df.interx) = md_subgroups
assign("df.interx", df.interx, envir = .GlobalEnv)
col_range = which(colnames(df.results)=="GHT"):which(colnames(df.results)=="UKGTS")
for(pat in 1:nrow(df.results)){
md = df.results[pat,"MD.pval"]
if(is.na(md)){
df.results_md_11 = rbind(df.results_md_11, df.results[pat,col_range])
}
else if(md == 0.005){
df.results_md_05 = rbind(df.results_md_05, df.results[pat,col_range])
}
else if(md == 0.01){
df.results_md_2 = rbind(df.results_md_2, df.results[pat,col_range])
}
else if(md == 0.02){
df.results_md_2 = rbind(df.results_md_2, df.results[pat,col_range])
}
else if(md == 0.05){
df.results_md_10 = rbind(df.results_md_10, df.results[pat,col_range])
}
else if(md == 0.1){
df.results_md_10 = rbind(df.results_md_10, df.results[pat,col_range])
}
}
ls.results_md = list(df.results_md_05, df.results_md_2, df.results_md_10, df.results_md_11)
par(mfrow=c(2,2), mar=c(0.2,0.2,0.2,0.2))
for(i in 1:length(ls.results_md)){
printEulerDiag(md_subgroups[i], as.data.frame(ls.results_md[i]))
}
p = recordPlot()
dev.off()
h = printClusteredHist(df.results, "md")
plot_grid(p, h, ncol = 1, labels = c("", ""))
}
printFigure1()
print(df.interx)
printFigure2()
#' Euler & Clustered Histo for OCT Score subgroups
#'
#' Print Euler diagrams and Clustered Histogram for each fo the OCT scores (0-6)
#' @export
printFigure2 = function(df.results=df.best_match)
{
names = c("FOST", "MHPA", "UKGTS", "GHT", "LOGTS",
"FOST&MHPA", "FOST&UKGTS", "FOST&GHT", "FOST&LOGTS", "MHPA&UKGTS",
"MHPA&GHT", "MHPA&LOGTS", "UKGTS&GHT", "UKGTS&LOGTS", "GHT&LOGTS",
"FOST&MHPA&UKGTS", "FOST&MHPA&GHT", "FOST&MHPA&LOGTS", "FOST&UKGTS&GHT", "FOST&UKGTS&LOGTS",
"FOST&GHT&LOGTS", "MHPA&UKGTS&GHT", "MHPA&GHT&LOGTS", "MHPA&UKGTS&LOGTS", "UKGTS&GHT&LOGTS",
"FOST&MHPA&UKGTS&GHT", "FOST&MHPA&UKGTS&LOGTS", "FOST&MHPA&GHT&LOGTS", "FOST&UKGTS&GHT&LOGTS", "MHPA&UKGTS&GHT&LOGTS",
"FOST&MHPA&UKGTS&GHT&LOGTS", "Neither")
os_subgroups = c("6", "4-5", "1-3", "0")
df.results_os_0 = df.results_os_13 = df.results_os_45 = df.results_os_6 = data.frame(FOST=logical(), GHT=logical(), MHPA=logical(), LOGTS=logical(), UKGTS=logical())
df.interx = data.frame(matrix(NA, nrow = length(names), ncol = length(os_subgroups)))
rownames(df.interx) = names
colnames(df.interx) = os_subgroups
assign("df.interx", df.interx, envir = .GlobalEnv)
col_range = which(colnames(df.results)=="FOST"):which(colnames(df.results)=="GHT")
for(pat in 1:nrow(df.results)){
os = df.results[pat,"OCT.Score"]
if(os == 0){
df.results_os_0 = rbind(df.results_os_0, df.results[pat,col_range])
}
else if(inside.range(os, c(1,3))){
df.results_os_13 = rbind(df.results_os_13, df.results[pat,col_range])
}
else if(inside.range(os, c(4,5))){
df.results_os_45 = rbind(df.results_os_45, df.results[pat,col_range])
}
else if(os == 6){
df.results_os_6 = rbind(df.results_os_6, df.results[pat,col_range])
}
}
ls.results_os = list(df.results_os_6, df.results_os_45, df.results_os_13, df.results_os_0)
par(mfrow=c(2,2), mar=c(0.2,0.2,0.2,0.2))
for(i in 1:length(ls.results_os)){
printEulerDiag(os_subgroups[i], as.data.frame(ls.results_os[i]))
}
p = recordPlot()
dev.off()
h = printClusteredHist(df.results, "os")
plot_grid(p, h, ncol = 1, labels = c("", ""))
}
printFigure2()
names = c("FOST", "MHPA", "UKGTS", "GHT", "LOGTS",
"FOST&MHPA", "FOST&UKGTS", "FOST&GHT", "FOST&LOGTS", "MHPA&UKGTS",
"MHPA&GHT", "MHPA&LOGTS", "UKGTS&GHT", "UKGTS&LOGTS", "GHT&LOGTS",
"FOST&MHPA&UKGTS", "FOST&MHPA&GHT", "FOST&MHPA&LOGTS", "FOST&UKGTS&GHT", "FOST&UKGTS&LOGTS",
"FOST&GHT&LOGTS", "MHPA&UKGTS&GHT", "MHPA&GHT&LOGTS", "MHPA&UKGTS&LOGTS", "UKGTS&GHT&LOGTS",
"FOST&MHPA&UKGTS&GHT", "FOST&MHPA&UKGTS&LOGTS", "FOST&MHPA&GHT&LOGTS", "FOST&UKGTS&GHT&LOGTS", "MHPA&UKGTS&GHT&LOGTS",
"FOST&MHPA&UKGTS&GHT&LOGTS", "Neither")
os_subgroups = c("6", "4-5", "1-3", "0")
df.results_os_0 = df.results_os_13 = df.results_os_45 = df.results_os_6 = data.frame(FOST=logical(), GHT=logical(), MHPA=logical(), LOGTS=logical(), UKGTS=logical())
df.interx = data.frame(matrix(NA, nrow = length(names), ncol = length(os_subgroups)))
rownames(df.interx) = names
colnames(df.interx) = os_subgroups
assign("df.interx", df.interx, envir = .GlobalEnv)
View(df.interx)
#' Euler & Clustered Histo for OCT Score subgroups
#'
#' Print Euler diagrams and Clustered Histogram for each fo the OCT scores (0-6)
#' @export
printFigure2 = function(df.results=df.best_match)
{
names = c("FOST", "MHPA", "UKGTS", "GHT", "LOGTS",
"FOST&MHPA", "FOST&UKGTS", "FOST&GHT", "FOST&LOGTS", "MHPA&UKGTS",
"MHPA&GHT", "MHPA&LOGTS", "UKGTS&GHT", "UKGTS&LOGTS", "GHT&LOGTS",
"FOST&MHPA&UKGTS", "FOST&MHPA&GHT", "FOST&MHPA&LOGTS", "FOST&UKGTS&GHT", "FOST&UKGTS&LOGTS",
"FOST&GHT&LOGTS", "MHPA&UKGTS&GHT", "MHPA&GHT&LOGTS", "MHPA&UKGTS&LOGTS", "UKGTS&GHT&LOGTS",
"FOST&MHPA&UKGTS&GHT", "FOST&MHPA&UKGTS&LOGTS", "FOST&MHPA&GHT&LOGTS", "FOST&UKGTS&GHT&LOGTS", "MHPA&UKGTS&GHT&LOGTS",
"FOST&MHPA&UKGTS&GHT&LOGTS", "Neither")
os_subgroups = c("6", "4-5", "1-3", "0")
df.results_os_0 = df.results_os_13 = df.results_os_45 = df.results_os_6 = data.frame(FOST=logical(), GHT=logical(), MHPA=logical(), LOGTS=logical(), UKGTS=logical())
df.interx = data.frame(matrix(NA, nrow = length(names), ncol = length(os_subgroups)))
rownames(df.interx) = names
colnames(df.interx) = os_subgroups
assign("df.interx", df.interx, envir = .GlobalEnv)
col_range = which(colnames(df.results)=="GHT"):which(colnames(df.results)=="UKGTS")
for(pat in 1:nrow(df.results)){
os = df.results[pat,"OCT.Score"]
if(os == 0){
df.results_os_0 = rbind(df.results_os_0, df.results[pat,col_range])
}
else if(inside.range(os, c(1,3))){
df.results_os_13 = rbind(df.results_os_13, df.results[pat,col_range])
}
else if(inside.range(os, c(4,5))){
df.results_os_45 = rbind(df.results_os_45, df.results[pat,col_range])
}
else if(os == 6){
df.results_os_6 = rbind(df.results_os_6, df.results[pat,col_range])
}
}
ls.results_os = list(df.results_os_6, df.results_os_45, df.results_os_13, df.results_os_0)
par(mfrow=c(2,2), mar=c(0.2,0.2,0.2,0.2))
for(i in 1:length(ls.results_os)){
printEulerDiag(os_subgroups[i], as.data.frame(ls.results_os[i]))
}
p = recordPlot()
dev.off()
h = printClusteredHist(df.results, "os")
plot_grid(p, h, ncol = 1, labels = c("", ""))
}
printFigure2()
print(df.interx)
rm(a,i,names,os_subgroups)
printClusteredHist()
printClusteredHist(x_var = "md")
